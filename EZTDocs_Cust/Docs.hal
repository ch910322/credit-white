//<halrule>server-only</halrule>
external procedure BuildCredManPayPlanCust(record CredManVc,var record CredManPayPlanVc,record CredManSetBlock,Boolean,Boolean);
external procedure BuildCredManInfoMatrix(record CredManVc,record CredManPayPlanVc,record CredManSetBlock,var record SMVc);
external inner function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external inner function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external inner procedure GetUserName(string,var string);
external inner procedure GetFullCurncyRateText(Boolean,var string,val,val,val,val,val);
external inner procedure ValToText(val,Integer,string,string,var string);
external inner procedure GetShipModeText(string,string,var string);
external inner procedure GetShipDealText(string,string,var string);
external function val GetMonthlyPaymentAmount(record CredManVc,Integer);
external inner function Boolean FindCustomerRelationCred(string,string,var record CUVc);
external inner procedure GetPayDealText(string,string,var string);
external inner function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external inner function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external inner procedure M4PadString(string,Integer,string,Boolean,var string);
external function Boolean GetLoanAppContact(string,string,var record CUVc);
external inner procedure HT2Per(Date, Date , var string);
external function Boolean FindCEOContact(string,var record CUVc);
external function Boolean FindCFOContact(string,var record CUVc);
external inner procedure GetUnitStr(string,string,var string);
external inner procedure ItemBC39(string,var string);
external inner procedure GetItemGroup(string,var string);
external inner procedure ItemBCEAN(string,var string);
external inner procedure ItemBCEAN13(string,var string);
external inner procedure GetLangNr(string,var record LangNrVc);
/* Tools*/
external inner procedure Ext_PrintValue(var vector string,string,val,Integer,record LangNrVc,record SysFormatBlock,Boolean);
external procedure Ext_PrintDocumentSigner(var vector string);
external inner procedure Ext_PrintCurrencyCode(var vector string,string,string);
external inner procedure Ext_PrintCountryCode(var vector string,string,string);
external inner procedure Ext_OutAddress(var vector string,string,string,string,string,string,string,string);
external inner procedure Ext_CommonDocumentFields(var vector string);
external inner procedure Ext_PrintSignature(var vector string,string);
external inner procedure Ext_PrintPremiseData(var vector string);
external inner procedure Ext_PrintValueInclZeroWithSign(var vector string,string,string,val,Integer,record LangNrVc,record SysFormatBlock,Boolean);
external inner procedure Ext_PrintLoyaltyCard(var vector string,record LangNrVc,string,string,val,val,LongInt,string);
external inner procedure Ext_PrintValueInclZero(var vector string,string,val,Integer,record LangNrVc,record SysFormatBlock,Boolean);
external inner procedure Ext_CommonDocumentFields2(var vector string,string);
external inner procedure Ext_PrintUserDefinedCustomerFields(var vector string,string,string,string,string,string,Date,Date,Date,val,val,val);
external inner procedure Ext_PrintSiteInformation(var vector string,string,string);
external inner procedure Ext_PrintNote(var vector string,record NotepadVc);
external inner procedure Ext_PrintBranchData(var vector string,string);
external inner procedure Ext_PrintUserDefinedItemFields(var vector string,string,string,string,string,string,Date,Date,Date,val,val,val);
external inner function roundmode SetRoundModeD(Integer);
external procedure ExtPrintOwnBankDetails(var vector string,Longint);
external inner function string 255 CredManCustEmail(record CUVc);
external inner function val GetMonthlyFees(record CredManVc,Integer);
external function Boolean BuildCredManInfoMatrixOnSchedule(record CredManVc,record CredManSetBlock,var record SMVc);
external function string 255 GetCredManNr(Longint);
external inner function string 255 StrReplace(string,string,string);
external function val GetCustomerOpenAmount(string,record IVVc);
external function Integer GetProlongMonths(record CredManVc);
external function string 255 DateInWords(Date,string,Integer);
external function string 255 GetConditionsText(record CredManVc,Integer);
external function string 255 GetConditionsText2(record CredManVc,Integer,string);
external function val AdjustFees(val,val,val);
external function Boolean AgreementPaidOut2(record CredManVc,var val);
external function Integer GetInterestPaymentType(record CredManVc);
external function string 255 AgreementValToText(val);
external inner procedure GetMonthText(string,Date,var string);
external procedure BuildCredManPayPlanCust2(record CredManVc,var record CredManPayPlanVc,record CredManSetBlock,Boolean,Boolean,Boolean);

procedure GetCredManCustContact(record CredManVc CredManr,var string contactid,var string contactname)
begin
  record CUVc ContactCUr;

  if (nonblank(CredManr.ClientContact)) then begin
    if (FindCustomerRelationCred(CredManr.CustCode,CredManr.ClientContact,ContactCUr)) then begin
      contactid = ContactCUr.RegNr1;
      contactname = ContactCUr.Name;
    end;
  end;

  return;
end;

function val GetTotalFromCredManInfoMatrix(record SMVc SMr)
begin
  Integer i,rwcnt;
  row SMVc SMrw;
  val res;

  rwcnt = MatRowCnt(SMr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SMr,i,SMrw);
    res = res + SMrw.DebVal + SMrw.CredVal + SMrw.DebVal2;
  end;

  GetTotalFromCredManInfoMatrix = res;
  return;
end;

global
function val GetContactTotalPaidAmount(record CredManVc CredManr)
begin
  val res;
  record CredManSetBlock CredManSetb;
  record CredManPayPlanVc CredManPayPlanr;
  row CredManPayPlanVc CredManPayPlanrw;
  record SMVc SMr;
 
  BlockLoad(CredManSetb);
  
  if (BuildCredManInfoMatrixOnSchedule(CredManr,CredManSetb,SMr)==false) then begin
    BuildCredManPayPlanCust2(CredManr,CredManPayPlanr,CredManSetb,true,true,false);
    BuildCredManInfoMatrix(CredManr,CredManPayPlanr,CredManSetb,SMr);
  end;

  res = GetTotalFromCredManInfoMatrix(SMr);

  GetContactTotalPaidAmount = res;
  return;
end;

function Boolean GetCredManCustContactRecord(record CredManVc CredManr,var record CUVc CUr)
begin
  record CUVc ContactCUr,tCUr;
  Boolean res;

  if (nonblank(CredManr.ClientContact)) then begin
    if (FindCustomerRelationCred(CredManr.CustCode,CredManr.ClientContact,ContactCUr)) then begin
      RecordCopy(CUr,ContactCUr);
      tCUr.Code = CredManr.CustCode;
      if (ReadFirstMain(tCUr,1,true)) then begin
        if (blank(CUr.eMail)) then begin
          CUr.eMail = tCUr.eMail;
        end;
        if (blank(CUr.Phone)) then begin
          CUr.Phone = tCUr.Phone;
        end;
      end;
      res = true;
    end;
  end;

  GetCredManCustContactRecord = res;
  return;
end;

function string 255 AddToListAddr(string tstr,string astr)
begin
  string 255 res;
  
  res = tstr;
  if (nonblank(astr)) then begin
    if (nonblank(tstr)) then begin
      res = res & ", ";
    end;
    res = res & astr;
  end;

  AddToListAddr = res;
  return;
end;

function string 255 GetDelAddr(string custcode)
begin
  record CUVc CUr;
  string 255 res;
  
  Cur.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin
    if (blank(CUr.DelAddr0)) then begin
      res = AddToListAddr(res,CUr.InvAddr0);
      res = AddToListAddr(res,CUr.InvAddr1);
      res = AddToListAddr(res,CUr.InvAddr2);
      res = AddToListAddr(res,CUr.InvAddr3);
      res = AddToListAddr(res,CUr.InvAddr4);
    end else begin
      res = AddToListAddr(res,CUr.DelAddr0);
      res = AddToListAddr(res,CUr.DelAddr1);
      res = AddToListAddr(res,CUr.DelAddr2);
      res = AddToListAddr(res,CUr.DelAddr3);
      res = AddToListAddr(res,CUr.DelAddr4);
    end;
  end;

  GetDelAddr = res;
  return;
end;

procedure PrintFirstPrincipleDueDate(var vector string vVals,record CredManVc CredManr)
begin
  record CredManSetBlock CredManSetb;
  record CredManPayPlanVc CredManPayPlanr;
  row CredManPayPlanVc CredManPayPlanrw;
  Date res;
  Integer i,rwcnt;
  record SMVc SMr;
  row SMVc SMrw;
  val tval;
  string 255 tstr;
 
  BlockLoad(CredManSetb);
  if (BuildCredManInfoMatrixOnSchedule(CredManr,CredManSetb,SMr)==false) then begin
    BuildCredManPayPlanCust(CredManr,CredManPayPlanr,CredManSetb,true,true);
    BuildCredManInfoMatrix(CredManr,CredManPayPlanr,CredManSetb,SMr);
  end;

  rwcnt = MatRowCnt(SMr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SMr,i,SMrw);
    if (SMrw.DebVal!=0) then begin
      res = SMrw.DueDate;
      i = rwcnt;
    end;
  end;
  tval = GetTotalFromCredManInfoMatrix(SMr);
  vVals["F_TOTALBRUTO"] = tval;
  ValToText(tval,M4Val,CredManr.CurncyCode,CredManr.LangCode,tstr);
  vVals["F_TOTALBRUTOINTEXT"] = tstr;
  vVals["F_INSTALMENTDUEDATE"] = res;

  return;
end;

function string 255 AddValue(string tstr,string tmpstr)
begin
  string 255 res;
  
  res = tstr;
  if (nonblank(tmpstr)) then begin
    if (nonblank(res)) then begin
      res = res & ", ";
    end;
    res = res & tmpstr;
  end;

  AddValue = res;
  return;
end;

function string 255 GetSingleContactLine(record CUVc CUr)
begin
  string 255 tstr;
  
  tstr = "";
  tstr = AddValue(tstr,CUr.Name);
  if (nonblank(CUr.Phone)) then begin
    tstr = AddValue(tstr,CUr.Phone);
  end else begin
    tstr = AddValue(tstr,CUr.Mobile);
  end;
  tstr = AddValue(tstr,CUr.eMail);

  GetSingleContactLine = tstr;
  return;
end;

procedure PrintSingleContactLine(var vector string vVals,string fname,record CUVc CUr)
begin
  string 255 tstr;

  tstr = GetSingleContactLine(CUr);
  vVals[fname] = tstr;

  return;
end;

procedure AddToList(var vector string vVals,string name,string nval)
begin
  string 255 tval;

  tval = vVals[name];
  if (nonblank(tval)) then begin
    tval = tval & "\\n";
  end;
  tval = tval & nval;
  vVals[name] = tval;

  return;
end;

procedure AddToList2(var vector string vVals,string name,string nval)
begin
  string 255 tval;

  tval = vVals[name];
  if (nonblank(tval)) then begin
    tval = tval & ", ";
  end;
  tval = tval & nval;
  vVals[name] = tval;

  return;
end;

function string 255 BuildCompRegNrString(Integer comptype,string id)
begin
  string 255 res;
  record CMPrintConstantsBlock PCb;

  BlockLoad(PCb);
  
  if (comptype==0) then begin
    res = "(" & PCb.CompPrefix & " " & id & ")";
  end else begin
    res = "(" & PCb.PersPrefix & " " & id & ")";
  end;

  BuildCompRegNrString = res;
  return;
end;

function Boolean GetNextSurety(record BOESuretyVc BSr,var record CUVc CUr,var Integer num)
begin
  Boolean res;
  string 255 code;
  
  num = num + 1;
  code = GetFieldValueByName(BSr,"SuretyProvider" & num,-1);
  if (nonblank(code)) then begin
    CUr.Code = code;
    if (ReadFirstMain(CUr,1,true)) then begin end;
    res = true;
  end;

  GetNextSurety = res;
  return;
end;

procedure PrintBOESureties(var vector string vVals,record CredManVc CredManr,Integer tnum,string rw,var Integer gnum)
begin
  record BOESuretyVc BSr;
  Integer num;
  string 255 strnum,tstr;
  record CUVc SCUr;
  
  
  BSr.CredManNr = CredManr.SerNr;
  BSr.BOENum = tnum;
  if (ReadFirstMain(BSr,2,true)) then begin
    while (GetNextSurety(BSr,SCUr,num)) begin
      M4PadString(gnum,3,"0",true,strnum);
      vVals["ROW" & rw & "_" & strnum & "_F_BOESURNAME"] = GetFieldValueByName(BSr,"Surety" & num & "Name",-1);
      vVals["ROW" & rw & "_" & strnum & "_F_BOESURID"] = SCUr.RegNr1;
      Ext_OutAddress(vVals,"ROW" & rw & "_" & strnum & "_F_BOESURADDRESS",SCUr.Name,SCUr.InvAddr0,SCUr.InvAddr1,SCUr.InvAddr2,SCUr.InvAddr3,SCUr.InvAddr4);
      vVals["ROW" & rw & "_" & strnum & "_F_BOESURPHONE"] = GetFieldValueByName(BSr,"Surety" & num & "Phone",-1);
      vVals["ROW" & rw & "_" & strnum & "_F_BOESUREMAIL"] = GetFieldValueByName(BSr,"Surety" & num & "eMail",-1);
      vVals["ROW" & rw & "_" & strnum & "_F_BOESURVALUE"] = GetFieldValueByName(BSr,"Surety" & num & "Amount",-1);
      vVals["ROW" & rw & "_" & strnum & "_F_BOESURSIGNER"] = GetFieldValueByName(BSr,"Surety" & num & "Signer",-1);
      vVals["ROW" & rw & "_" & strnum & "_F_BOESURDATE"] = GetFieldValueByName(BSr,"Surety" & num & "Date",-1);
      
      tstr = GetConditionsText2(CredManr,0,tnum & ":" & num);
      vVals["ROW" & rw & "_" & strnum & "_F_BOESURCOND"] = tstr;
      AddToList(vVals,"F_BOESURNAME_LIST",GetFieldValueByName(BSr,"Surety" & num & "Name",-1) & " " & BuildCompRegNrString(SCUr.CustType,SCUr.RegNr1));
      AddToList(vVals,"F_BOESURCOND_LIST",tstr);

      gnum = gnum + 1;
    end;
  end;
  if (blank(vVals["F_BOESURNAME_LIST"])) then begin
    vVals["F_BOESURNAME_LIST"] = USetStr(200275);
  end;

  return;
end;

procedure PrintCredManBOE(var vector string vVals,record CredManVc CredManr,Integer num)
begin
  string 255 name,id,tstr;
  record CUVc CUr;
   
  name = GetFieldValueByName(CredManr,"BOE" & num & "Name",-1);
  CUr.Code = GetFieldValueByName(CredManr,"BOE" & num & "Code",-1);
  if (ReadFirstMain(CUr,1,true)) then begin
    id = CUr.RegNr1;
  end;

  tstr = name;
  if (nonblank(id)) then begin
    tstr = USetStr(200114) & " " & tstr & " " & BuildCompRegNrString(CUr.CustType,id);
  end;

  AddToList(vVals,"F_BOENAME_LIST",tstr);

  return;
end;

procedure GetSuretyValues4(record CredManVc CredManr,Integer num,var string signManager)
begin
  record UserVc USr;
  
  signManager = GetFieldValueByName(CredManr,"Surety" & num & "SignManager",-1);
  
  if(blank(signManager))then begin
  	if(nonblank(CredManr.SalesMan))then begin
  		USr.Code = CredManr.SalesMan;
  		if(readfirstmain(USr,1,true))then begin
  			signManager = USr.Name;
  		end;
  	end;
  end;
  return;
end;

procedure GetSuretyValues3(record CredManVc CredManr,Integer num,var string name,var string phone,var string mobile,var string email,var string id,var string addr0,var string addr1,var string addr2,var string addr3,var string addr4,var string saddr0,var string saddr1,var string saddr2,var string saddr3,var string saddr4,var string value,var string signer,var string td,var string idcard,var string iddate,var string signerphone,var string signermobile,var string signeremail,var string signerid,var string signeridcard,var string signeriddate,var string legalid,var Integer comptype)
begin
  record CUVc CUr,SCUr;
  string 255 signercode,signername;
  record CredManVc tCredManr;
  
  name = GetFieldValueByName(CredManr,"Surety" & num & "Name",-1);
  email = GetFieldValueByName(CredManr,"Surety" & num & "eMail",-1);
  phone = GetFieldValueByName(CredManr,"Surety" & num & "Phone",-1);
  mobile = GetFieldValueByName(CredManr,"Surety" & num & "Mobile",-1);
  //id = GetFieldValueByName(CredManr,"Surety" & num & "ID",-1);
  value = GetFieldValueByName(CredManr,"Surety" & num & "Amount",-1);
  signername = GetFieldValueByName(CredManr,"Surety" & num & "Signer",-1);
  legalid = GetFieldValueByName(CredManr,"Surety" & num & "OfficialSerNr",-1);
  if (nonblank(signername)) then begin
    RecordCopy(tCredManr,CredManr);
    tCredManr.ClientContact = signername;
    tCredManr.CustCode = GetFieldValueByName(tCredManr,"SuretyProvider" & num,-1);
    if (GetCredManCustContactRecord(tCredManr,SCUr)) then begin
      signer = SCUr.Name;
      signerid = SCUr.RegNr1;
      signeridcard = SCUr.UserStr1;
      signeriddate = SCUr.UserStr2;
      signermobile = SCUr.Mobile;
      signerphone = SCUr.Phone;
      signeremail = SCUr.eMail;
      saddr0 = SCUr.InvAddr0;
      saddr1 = SCUr.InvAddr1;
      saddr2 = SCUr.InvAddr2;
      saddr3 = SCUr.InvAddr3;
      saddr4 = SCUr.InvAddr4;
    end;
  end;
  td = GetFieldValueByName(CredManr,"Surety" & num & "Date",-1);
  if (blank(td)) then begin
    td = CredManr.TransDate;
  end;
  CUr.Code = GetFieldValueByName(CredManr,"SuretyProvider" & num,-1);
  if (ReadFirstMain(CUr,1,true)) then begin
    idcard = CUr.UserStr1;
    iddate = CUr.UserStr2;
    addr0 = CUr.InvAddr0;
    addr1 = CUr.InvAddr1;
    addr2 = CUr.InvAddr2;
    addr3 = CUr.InvAddr3;
    addr4 = CUr.InvAddr4;
    mobile = CUr.Mobile;
    phone = CUr.Phone;
    email = CUr.eMail;
    id = CUr.RegNr1;
    comptype = CUr.CustType;
  end else begin
    addr0 = ""; addr1 = ""; addr2 = ""; addr3 = ""; addr4 = ""; 
  end;

  return;
end;

procedure PrintCredManSureties(var vector string vVals,record CredManVc CredManr,Integer num,string fs)
begin
  string 255 name,phone,mobile,email,id,addr0,addr1,addr2,addr3,addr4,signer,value,td;
  record CUVc CUr;
  string 255 tstr;
  val calcfees,fixfees;
  record UserVc Userr;
  string 255 saddr0,saddr1,saddr2,saddr3,saddr4,idcard,iddate,signManager;
  string 255 signerphone,signermobile,signeremail,signerid,signeridcard,signeriddate,legalid,idstring;
  Integer comptype;

    GetSuretyValues3(CredManr,num,name,phone,mobile,email,id,addr0,addr1,addr2,addr3,addr4,saddr0,saddr1,saddr2,saddr3,saddr4,value,signer,td,idcard,iddate,signerphone,signermobile,signeremail,signerid,signeridcard,signeriddate,legalid,comptype);
    vVals[fs & "F_CONTACTNAME"] = name;
    idstring = BuildCompRegNrString(comptype,id);
    AddToList2(vVals,"F_CONTACTNAME_LIST",name & " " & idstring);
    vVals[fs & "F_CONTACTPHONE"] = phone;
    vVals[fs & "F_CONTACTMOBILE"] = mobile;
    vVals[fs & "F_CONTACTMAIL"] = email;
    vVals[fs & "F_CONTACTID"] = id;
    vVals[fs & "F_CONTACTVALUE"] = value;
    vVals[fs & "F_CONTACTDATE"] = td;
    vVals[fs & "F_CONTACTIDCARD"] = idcard;
    vVals[fs & "F_CONTACTIDCARDDATE"] = iddate;
    vVals[fs & "F_CONTACTLEGALID"] = legalid;
    tstr = GetConditionsText2(CredManr,0,num);
    vVals[fs & "F_SURETYCOND"] = tstr;
    AddToList(vVals,"F_SURETYCOND_LIST",tstr);

    Ext_OutAddress(vVals,fs & "F_CONTACTADRESS",name,addr0,addr1,addr2,addr3,addr4);

    vVals[fs & "F_CONTACTSIGNER"] = signer;
    vVals[fs & "F_CONTACTSIGNERPHONE"] = signerphone;
    vVals[fs & "F_CONTACTSIGNERMOBILE"] = signermobile;
    vVals[fs & "F_CONTACTSIGNERMAIL"] = signeremail;
    vVals[fs & "F_CONTACTSIGNERID"] = signerid;
    vVals[fs & "F_CONTACTSIGNERIDCARD"] = signeridcard;
    vVals[fs & "F_CONTACTSIGNERIDCARDDATE"] = signeriddate;
    Ext_OutAddress(vVals,fs & "F_CONTACTSIGNERADRESS",name,saddr0,saddr1,saddr2,saddr3,saddr4);
		
		if(num>0)then begin
			GetSuretyValues4(CredManr,num,signManager);
		end;
		vVals[fs & "F_SIGNMANAGERNAME"] = signManager;
		
  return;
end;

function Boolean HasSureties(record CredManVc CredManr)
begin
  Boolean res;
  
  if (nonblank(GetFieldValueByName(CredManr,"SuretyProvider1",-1))) then begin
    res = true;
  end;

  HasSureties = res;
  return;
end;

function Boolean HasBOE(record CredManVc CredManr)
begin
  Boolean res;
  
  if (nonblank(GetFieldValueByName(CredManr,"BOE1Code",-1))) then begin
    res = true;
  end;

  HasBOE = res;
  return;
end;

function Boolean HasSubordinations(record CredManVc CredManr)
begin
  Boolean res;
  
  if (nonblank(GetFieldValueByName(CredManr,"Subordination1",-1))) then begin
    res = true;
  end;

  HasSubordinations = res;
  return;
end;

function Boolean HasProperties(record CredManVc CredManr)
begin
  Boolean res;
  record CredManPropertiesVc CMPr;
  
  CMPr.CredManNr = CredManr.SerNr;
  CMPr.RecordType = 0;
  if (ReadFirstMain(CMPr,2,true)) then begin
    if (MatRowCnt(CMPr)>0) then begin
      res = true;
    end;
  end;

  HasProperties = res;
  return;
end;

function Boolean HasSchedule(record CredManVc CredManr)
begin
  Boolean res;
  record AgreementDocVc ADr;
  
  ADr.RecordNr = CredManr.SerNr;
  ADr.RecordType = 0;
  ADr.Type = 2;
  if (ReadFirstKey("RecordNr",ADr,3,true)) then begin
    res = true;
  end;

  HasSchedule = res;
  return;
end;

function Boolean HasInsurance(record CredManVc CredManr)
begin
  record CredManPropertiesVc CMPr;
  row CredManPropertiesVc CMPrw;
  record CMPropertyVc Propr;
  Integer rwcnt,i;
  Boolean res;
  
  CMPr.CredManNr = CredManr.SerNr;
  CMPr.RecordType = 0;
  if (ReadFirstMain(CMPr,2,true)) then begin
    rwcnt = MatRowCnt(CMPr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(CMPr,i,CMPrw);
      Propr.SerNr = CMPrw.Property;
      if (ReadFirstMain(Propr,1,true)) then begin
        if (nonblank(Propr.InsuranceType)) then begin
          res = true;
          i = rwcnt;
        end;
      end;
    end;
  end;

  HasInsurance = res;
  return;
end;

procedure PrintSingleConstant(var vector string vVals,string fn,record CMPrintConstantsBlock PCb,string blockfn,Boolean yesf,string extratext)
begin
  string 255 tstr,tmp;
  
  if (yesf) then begin
    tstr = GetFieldValueByName(PCb,blockfn & "Yes",-1);
    if (blockfn!="Subordination") then begin
      tmp = GetFieldValueByName(PCb,blockfn & "Yes2",-1);
    end;
    if (nonblank(tmp)) then begin
      tstr = tstr;
      if (nonblank(tmp)) then begin
        tstr = tstr & "\\n";
        tstr = tstr & tmp;
      end;
      if (nonblank(extratext)) then begin
        if (blockfn=="Surety") then begin
          if (right(tstr,1)==".") then begin
            tstr = left(tstr,len(tstr)-1);
          end;
          tstr = tstr & " Nr. ";
        end;
        tstr = tstr & extratext;
      end;
    end;
    vVals[fn] = tstr;
  end else begin
    vVals[fn] = GetFieldValueByName(PCb,blockfn & "No",-1);
  end;

  return;
end;

function string 255 GetSuretyLegalNr(record CredManVc CredManr)
begin
  string 255 res,tstr;
  Integer i;
  
  for (i=1;i<7;i=i+1) begin
    tstr = GetFieldValueByName(CredManr,"Surety" & i & "OfficialSerNr",-1);
    if (nonblank(tstr)) then begin
      if (nonblank(res)) then begin
        res = res & ", ";
      end;
      res = res & tstr;
    end;
  end;

  GetSuretyLegalNr = res;
  return;
end;

procedure PrintCMConstants(var vector string vVals,record CredManVc CredManr)
begin
  record CMPrintConstantsBlock PCb;
  Boolean haspropf;
  transaction integer gIsDigitalDocument;

  BlockLoad(PCb);

  haspropf = HasProperties(CredManr);

  PrintSingleConstant(vVals,"F_SURETYCONST",PCb,"Surety",HasSureties(CredManr),GetSuretyLegalNr(CredManr));
  PrintSingleConstant(vVals,"F_BOECONST",PCb,"BOE",HasBOE(CredManr),"");
  PrintSingleConstant(vVals,"F_PROPCONST",PCb,"Property",haspropf,"");
  if (haspropf==false) then begin
    vVals["F_PROPNAME_LIST"] = "-";
    vVals["F_PROPID_LIST"] = "-";
    vVals["F_PROPADDRESS_LIST"] = "-";
    vVals["F_PROPOWNER_LIST"] = "-";
    vVals["F_PROPEVAL_LIST"] = "-";
    vVals["F_PROPCOMMENT_LIST"] = "-";
  end;
  PrintSingleConstant(vVals,"F_PROPINSCONST",PCb,"Insurance",HasInsurance(CredManr),"");
  PrintSingleConstant(vVals,"F_SCHEDULECONST",PCb,"Schedule",HasSchedule(CredManr),"");
  PrintSingleConstant(vVals,"F_SUBORDCONST",PCb,"Subordination",HasSubordinations(CredManr),"");

	if(gIsDigitalDocument==1)then begin
		vVals["F_ISDIGITALDOCUMENT"] = PCb.AgrDigital;
	end else begin
		vVals["F_ISDIGITALDOCUMENT"] = PCb.AgrNotDigital;
	end;
	
  return;
end;

procedure FindAllContactsWithJobTitle(string custcode,var array record CUVc aCUr,string title)
begin
  record ContactRelVc CRr;
  Boolean res;
  Longint pos;
  string 255 tmp;
  record CUVc CUr;
 
  while (LoopKey("CustContactCode:" & custcode,CRr,1,true)) begin
    if (CRr.Invalid==0) then begin
      CUr.Code = CRr.ContactCode;
      if (ReadFirstMain(CUr,1,true)) then begin
        pos = 0;
        while (GetNextSubString(CUr.JobDesc,pos,",",tmp)) begin
          if (SetInSet(tmp,title)) then begin
            aCUr[aCUr.length] = CUr;
            goto LFindAllContactsWithJobTitle_Next;
          end;
        end;
      end;
    end;
LFindAllContactsWithJobTitle_Next:;
  end;

  return;
end;


procedure GetListOfContacts(string custcode,Integer type,var array record CUVc aCUr)
begin
  record CMApplicationSetBlock ASb;

  ClearArray(aCUr);
  BlockLoad(ASb);
  if (type==0 and nonblank(ASb.CEOTitle)) then begin
    FindAllContactsWithJobTitle(custcode,aCUr,ASb.CEOTitle);
  end;  
  if (type==1 and nonblank(ASb.CFOTitle)) then begin
    FindAllContactsWithJobTitle(custcode,aCUr,ASb.CFOTitle);
  end;  

  return;
end;

procedure CredManHeader(var vector string vVals,record CredManVc CredManr)
begin
  record CUVc CUr;
  record IVVc IVr;
  Integer i,rwcnt;
  string 255 tstr;
  string 255 contactname,contactid;
  record BankVc Bankr;
  val amt,fees,prolong,tot,calcfees,fixfees;
  row CredManVc CredManrw;
  record CUVc ContactCUr,CEOCUr;
  record B2BLoanApplicationVc LAr;
  record RLinkVc RLr;
  record CMApplicationSetBlock CMb;
  Boolean foundf;
  record UserVc Userr;
  Integer surnum;
  string 255 sc,strnum;
  Integer gnum;
  array record CUVc aCUr;
  val tval,rate;
  
  BlockLoad(CMb);
  CUr.Code = CredManr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
  end;
  IVr.SerNr = CredManr.IVNr;
  if (ReadFirstMain(IVr,1,true)==false) then begin
    RecordClear(IVr);
  end;

  vVals["F_KUNDNR"] = CredManr.CustCode;
  vVals["F_KUNDNAMN"] = CredManr.Addr0;
  vVals["F_NUMMER"] = CredManr.SerNr;
  vVals["F_NUMMER2"] = GetCredManNr(CredManr.SerNr);
  vVals["F_CREDMANCREATEDATE"] = CredManr.TransDate;
  
  //Ext_OutAddress("F_ADRESS",IVr.Addr0,IVr.Addr1,IVr.Addr2,IVr.Addr3,IVr.InvAddr3,IVr.InvAddr4);//CUST-REMOVED
  vVals["F_ADDR2"] = IVr.Addr1;
  vVals["F_ADDR3"] = IVr.Addr2;
  vVals["F_ADDR4"] = IVr.Addr3;
  vVals["F_INVADDR3"] = IVr.InvAddr3;
  vVals["F_INVADDR4"] = IVr.InvAddr4;
  vVals["F_VARREFERENS"] = CredManr.OurContact;
  vVals["F_ERREFERENS"] = CredManr.ClientContact;
  vVals["F_KOMMENTAR"] = IVr.InvComment;
  GetUserName(CredManr.SalesMan,tstr);
  vVals["F_SALJARNAMN"] = tstr;
  vVals["F_LOCATION"] = IVr.Location;
  vVals["F_INLEVADRESS"] = IVr.ShipAddr0;
  vVals["F_INLEVADRESS"] = IVr.ShipAddr1;
  vVals["F_INLEVADRESS"] = IVr.ShipAddr2;
  vVals["F_INLEVADRESS"] = IVr.ShipAddr3;
  vVals["F_INLEVADRESS"] = IVr.DelAddr3;
  vVals["F_INLEVADRESS"] = IVr.DelAddr4;
  vVals["F_INVLEVSATT"] = IVr.ShipMode;

  GetShipModeText(IVr.ShipMode,IVr.LangCode,tstr);
  vVals["F_INVLEVSATTTEXT"] = tstr;
  vVals["F_INVLEVVILLK"] = IVr.ShipDeal;
  GetShipDealText(IVr.ShipDeal,IVr.LangCode,tstr);
  vVals["F_INVLEVVILLKTEXT"] = tstr;
  GetPayDealText(IVr.PayDeal,IVr.LangCode,tstr);
  vVals["F_VILLKOR"] = tstr;
  Ext_PrintCurrencyCode(vVals,"F_VALUTA",CredManr.CurncyCode);
  vVals["F_KONTRAKTSDATUM"] = CredManr.TransDate;
  vVals["F_STARTDATUM"] = CredManr.startDate;
  vVals["F_LASTINVDATE"] = CredManr.InvUntil;
  vVals["F_ENDDATE"] = CredManr.endDate;
  if (GetInterestPaymentType(CredManr)==2) then begin
    AgreementPaidOut2(CredManr,tval);
    vVals["F_SUMMA"] = tval;
  end else begin
    vVals["F_SUMMA"] = CredManr.InvSum4;
  end;
  GetFullCurncyRateText(true,tstr,CredManr.FrRate,CredManr.ToRateB1,CredManr.ToRateB2,CredManr.BaseRate1,CredManr.BaseRate2);  
  vVals["F_RATE"] = tstr;
  GetFullCurncyRateText(false,tstr,CredManr.FrRate,CredManr.ToRateB1,CredManr.ToRateB2,CredManr.BaseRate1,CredManr.BaseRate2);  
  vVals["F_BASERATE"] = tstr;
  vVals["F_PERIODLENGTH"] = ValToString(CredManr.InstalmentMonths + GetProlongMonths(CredManr),M4Val,"",".",1);
  vVals["F_RANTASATS"] = CredManr.IntRate;
  tstr = AgreementValToText(CredManr.IntRate);
  vVals["F_RANTASATSINWORDS"] = tstr;
  if (blank(IVr.ShipAddr0)) then begin
    tstr = IVr.Addr0;
  end else begin
    tstr = IVr.ShipAddr0;
  end;
  vVals["F_INLEVADRESS2"] = tstr;
  if (blank(IVr.ShipAddr0)) then begin
    tstr = IVr.Addr1;
  end else begin
    tstr = IVr.ShipAddr1;
  end;
  vVals["F_INLEVADRESS2"] = tstr;
  if (blank(IVr.ShipAddr0)) then begin
    tstr = IVr.Addr2;
  end else begin
    tstr = IVr.ShipAddr2;
  end;
  vVals["F_INLEVADRESS2"] = tstr;
  if (blank(IVr.ShipAddr0)) then begin
    tstr = IVr.Addr3;
  end else begin
    tstr = IVr.ShipAddr3;
  end;
  vVals["F_INLEVADRESS2"] = tstr;
  if (blank(IVr.ShipAddr0)) then begin
    tstr = IVr.InvAddr3;
  end else begin
    tstr = IVr.DelAddr3;
  end;
  vVals["F_INLEVADRESS2"] = tstr;
  if (blank(IVr.ShipAddr0)) then begin
    tstr = IVr.InvAddr4;
  end else begin
    tstr = IVr.DelAddr4;
  end;
  vVals["F_INLEVADRESS2"] = tstr;
  
  vVals["F_BASE1SUMMA"] = MulRateToBase1(CredManr.CurncyCode,CredManr.InvSum4,CredManr.FrRate,CredManr.ToRateB1,CredManr.ToRateB2,CredManr.BaseRate1,CredManr.BaseRate2,DefaultCurRoundOff);
  vVals["F_BASE2SUMMA"] = MulRateToBase2(CredManr.CurncyCode,CredManr.InvSum4,CredManr.FrRate,CredManr.ToRateB1,CredManr.ToRateB2,CredManr.BaseRate1,CredManr.BaseRate2,DefaultCurRoundOff);
  vVals["F_ATTBETALA"] = CredManr.TotalSum;
  ValToText(CredManr.TotalSum,M4Val,CredManr.CurncyCode,CredManr.LangCode,tstr);
  vVals["F_ATTBETALATEXT"] = tstr;        
  vVals["F_BASE1BETALA"] = MulRateToBase1(CredManr.CurncyCode,CredManr.TotalSum,CredManr.FrRate,CredManr.ToRateB1,CredManr.ToRateB2,CredManr.BaseRate1,CredManr.BaseRate2,DefaultCurRoundOff);
  vVals["F_BASE2BETALA"] = MulRateToBase2(CredManr.CurncyCode,CredManr.TotalSum,CredManr.FrRate,CredManr.ToRateB1,CredManr.ToRateB2,CredManr.BaseRate1,CredManr.BaseRate2,DefaultCurRoundOff);

  vVals["F_KUNDMOMSNR"] = CUr.VATNr;
  vVals["F_KUNDFAX"] = CUr.Fax;  

  vVals["F_EMAIL"] = CredManCustEmail(CUr);//Email
  vVals["F_REGNUMBER1"] = CUr.RegNr1;//Customer Registration No. 1
  vVals["F_KUNDTEL"] = CUr.Phone;//Customer Telephone Number
  vVals["F_MOBILE"] = CUr.Mobile;//Mobile
  GetCredManCustContact(CredManr,contactid,contactname);
  vVals["F_KONTAKT"] = contactname;
  vVals["F_ID"] = contactid;
  vVals["F_TOTSUM"] = CredManr.InvSum4;
  vVals["F_DATEDAY"] = CredManr.MonthlyPaymentDay;
  vVals["F_MONTHLYINST"] = CredManr.MonthlySum;
  vVals["F_DELAYMONTHS"] = CredManr.PrincipleDelayMonths;
  ValToText(CredManr.InvSum4,M4Val,CredManr.CurncyCode,CredManr.LangCode,tstr);
  vVals["F_TOTSUMINTEXT"] = tstr;
  
  vVals["F_BANKACC"] = CUr.BankAccount;
  Bankr.Code = CUr.AccOperator;
  ReadFirstMain(Bankr,1,true);
  vVals["F_ACCOUNTOPERATORNAME"] = Bankr.Name;
  vVals["F_CREDHALFSUM"] = (CredManr.InvSum4/2);
  ValToText((CredManr.InvSum4/2),M4Val,CredManr.CurncyCode,CredManr.LangCode,tstr);
  vVals["F_CREDHALFSUMTEXT"] = tstr;

  tstr = "";
  amt = GetMonthlyPaymentAmount(CredManr,6);
  vVals["F_AMOUNT"] = amt;
  ValToText(amt,M4Val,CredManr.CurncyCode,CredManr.LangCode,tstr);
  vVals["F_AMOUNTINTEXT"] = tstr;

  amt = GetMonthlyPaymentAmount(CredManr,14);
  vVals["F_AMOUNT2"] = amt;
  ValToText(amt,M4Val,CredManr.CurncyCode,CredManr.LangCode,tstr);
  vVals["F_AMOUNTINTEXT2"] = tstr;

  amt = GetMonthlyPaymentAmount(CredManr,8);
  vVals["F_PRINCIPLE"] = amt;

  tot = amt * (CredManr.InstalmentMonths);//-1?
  tot = CredManr.InvSum4-CredManr.DepositSum-tot;
  if (tot<0) then begin
    tot = 0;//the same as we do on cred man plan
  end;
  vVals["F_LEFTPRINCIPLE"] = tot;


  fees = 0;
  rwcnt = MatRowCnt(CredManr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CredManr,i,CredManrw);
    if (CredManrw.ChargeType==0 or CredManrw.ChargeType==2) then begin
      if (CredManrw.ChargeType==2) then begin
        fees = fees + AdjustFees(((CredManr.InvSum4-CredManr.DepositSum) * (CredManrw.vRebate/100)),CredManrw.MinSum,CredManrw.MaxSum);
      end else begin
        fees = fees + AdjustFees(CredManrw.Price,CredManrw.MinSum,CredManrw.MaxSum);
      end;
    end;
  end;
  fees = Round(fees,SetRoundModeD(2));
  vVals["F_FEES"] = fees;
  ValToText(fees,M4Val,CredManr.CurncyCode,CredManr.LangCode,tstr);
  vVals["F_FEESINTEXT"] = tstr;
  prolong = Round(CredManr.StdProlongFee + (CredManr.InvSum4 * (CredManr.StdProlongPrc/100)),SetRoundModeD(2));
  vVals["F_PROLONG"] = prolong;
  ValToText(prolong,M4Val,CredManr.CurncyCode,CredManr.LangCode,tstr);
  vVals["F_PROLONGINTEXT"] = tstr;
  vVals["F_OVERDUEPRC"] = CredManr.OverduePercentage;
  //ValToText(CredManr.OverduePercentage,M4Val,CredManr.CurncyCode,CMb.NumberLangCode,tstr);
  tstr = AgreementValToText(CredManr.OverduePercentage);
  vVals["F_OVERDUEPRCINWORDS"] = tstr;
  if (CredManr.BuyoutFeePrc>0) then begin
    vVals["F_BUYOUTFEEPRC"] = CredManr.BuyoutFeePrc & " %";
  end else begin
    vVals["F_BUYOUTFEEPRC"] = "";
  end;
  if (CredManr.BuyoutFeePrc>0) then begin
    //ValToText(CredManr.BuyoutFeePrc,M4Val,CredManr.CurncyCode,CMb.NumberLangCode,tstr);
    tstr = AgreementValToText(CredManr.BuyoutFeePrc);
    vVals["F_BUYOUTFEEPRCINWORDS"] = "(" & tstr & " " & USetStr(200276) & ")";
  end else begin
    vVals["F_BUYOUTFEEPRCINWORDS"] = USetStr(200275);
  end;
  vVals["F_OTHERCONDITIONS"] = CredManr.OtherConditions;

  surnum = 1;
  sc = GetFieldValueByName(CredManr,"SuretyProvider" & surnum,-1);
  while (nonblank(sc)) begin
    M4PadString(surnum-1,3,"0",true,strnum);
    PrintCredManSureties(vVals,CredManr,surnum,"ROW2_" & strnum);
    surnum = surnum + 1;
    sc = GetFieldValueByName(CredManr,"SuretyProvider" & surnum,-1);
  end;
  if (blank(vVals["F_CONTACTNAME_LIST"])) then begin
    vVals["F_CONTACTNAME_LIST"] = "-";
  end;
  if (blank(vVals["F_SURETYCOND_LIST"])) then begin
    vVals["F_SURETYCOND_LIST"] = "-";
  end;

  surnum = 1;
  gnum = 0;
  sc = GetFieldValueByName(CredManr,"BOE" & surnum & "Code",-1);
  while (nonblank(sc)) begin
    PrintBOESureties(vVals,CredManr,surnum,"3",gnum);
    PrintCredManBOE(vVals,CredManr,surnum);
    surnum = surnum + 1;
    sc = GetFieldValueByName(CredManr,"BOE" & surnum & "Code",-1);
  end;

  Ext_OutAddress(vVals,"F_ADRESS",CUr.Name,CUr.InvAddr0,CUr.InvAddr1,CUr.InvAddr2,CUr.InvAddr3,CUr.InvAddr4);

  if (ReadRecordLink(CredManr,1,LAr,RLr)) then begin
    foundf = true;
  end else begin
    if (CredManr.LoanApplication>0) then begin
      LAr.SerNr = CredManr.LoanApplication;
      if (ReadFirstMain(LAr,1,true)) then begin
        foundf = true;
      end;
    end;
  end;
/*
  if (foundf) then begin
    CEOCUr.Code = LAr.CEOCustCode;
    if (ReadFirstMain(CEOCUr,1,true)) then begin
      vVals["F_CEONAME"] = CEOCUr.Name;
      vVals["F_CEOID"] = CEOCUr.RegNr1;
      vVals["F_CEOPHONE"] = CUr.Phone;
      vVals["F_CEOEMAIL"] = CUr.eMail;
    end;
  end;
*/

  amt = GetMonthlyPaymentAmount(CredManr,2);
  vVals["F_INTEREST"] = amt;
  Ext_PrintDocumentSigner(vVals);
  vVals["F_DELADDRESS"] = GetDelAddr(CredManr.CustCode);;

  ExtPrintOwnBankDetails(vVals,CredManr.SerNr);
  rate = CredManr.IntRate;
  if (CredManr.AnnualRate==0) then begin
    rate = CredManr.IntRate*12;
  end;
  vVals["F_ANNUALRATE"] = Round(rate,SetRoundModeD(2)) & " %";
  tstr = AgreementValToText(Round(rate,SetRoundModeD(2)));
  vVals["F_ANNUALRATEINTEXT"] = tstr;

  calcfees = GetMonthlyFees(CredManr,0);
  fixfees =  GetMonthlyFees(CredManr,1);
  //if (calcfees>0) then begin
    vVals["F_CALCFEES"] = calcfees & " %";
  //end;
  //if (fixfees>0) then begin
    vVals["F_FIXFEES"] = fixfees;
  //end;

  RecordCLear(CUr);
  if (FindCEOContact(CredManr.CustCode,CUr)) then begin
    vVals["F_CEONAME"] = CUr.Name;
    vVals["F_CEOID"] = CUr.RegNr1;
    vVals["F_CEOPHONE"] = CUr.Phone;
    vVals["F_CEOEMAIL"] = CUr.eMail;
    PrintSingleContactLine(vVals,"F_CEODETAILS",CUr);
  end;
  if (blank(vVals["F_CEODETAILS"])) then begin
    vVals["F_CEODETAILS"] = "-";
  end;
  GetListOfContacts(CredManr.CustCode,0,aCUr);
  for (i=0;i<aCUr.length;i=i+1) begin
    CUr = aCUr[i];
    AddToList(vVals,"F_CEOLIST",GetSingleContactLine(CUr));
  end;

  RecordCLear(CUr);
  if (FindCFOContact(CredManr.CustCode,CUr)) then begin
    vVals["F_CFONAME"] = CUr.Name;
    vVals["F_CFOID"] = CUr.RegNr1;
    vVals["F_CFOPHONE"] = CUr.Phone;
    vVals["F_CFOEMAIL"] = CUr.eMail;
    PrintSingleContactLine(vVals,"F_CFODETAILS",CUr);
  end;
  if (blank(vVals["F_CFODETAILS"])) then begin
    vVals["F_CFODETAILS"] = "-";
  end;
  GetListOfContacts(CredManr.CustCode,1,aCUr);
  for (i=0;i<aCUr.length;i=i+1) begin
    CUr = aCUr[i];
    AddToList(vVals,"F_CFOLIST",GetSingleContactLine(CUr));
  end;

  if (GetCredManCustContactRecord(CredManr,CUr)) then begin
    PrintSingleContactLine(vVals,"F_CONTACTDETAILS",CUr);
  end;
  if (blank(vVals["F_CONTACTDETAILS"])) then begin
    vVals["F_CONTACTDETAILS"] = "-";
  end;

  Userr.Code = CredManr.SalesMan;
  if (ReadFirstMain(Userr,1,true)) then begin
    vVals["F_SALESMANPHONE"] = Userr.Phone1;
    vVals["F_SALESMANNAME"] = Userr.Name;
    vVals["F_SALESMANEMAIL"] = Userr.emailAddr;
    vVals["F_SALESMANJOB"] = Userr.Job;
  end;

  vVals["F_FIRSTINVDATE"] = CredManr.FirstInvDate;
  vVals["F_OTHERCONDITIONSLONG"] = GetConditionsText(CredManr,0);
  vVals["F_PMTCONDITIONS"] = GetConditionsText(CredManr,1);

  PrintFirstPrincipleDueDate(vVals,CredManr);
  PrintCMConstants(vVals,CredManr);

  return;
end;

function string 255 GetMonthList(record CredManVc CredManr,row SMVc SMrw)
begin
  Date td,ed;
  string 255 tstr,res;
  if (nonblank(SMrw.Comment)) then begin
    td = SMrw.Objects;
    ed = SMrw.Comment;
    ed.Day = DaysInMonth(ed.Year,ed.Month);
    while (td<=ed) begin
      GetMonthText(CredManr.LangCode,td,tstr);
      if (nonblank(res)) then begin
        res = res & ", ";
      end;
      res = res & tstr;
      td = AddMonth(td,1);
    end;
  end;

  GetMonthList = res;
  return;
end;

global
procedure ExternalPrintCredManScheduleForm(record CredManVc CredManr,var vector string vVals)
begin
  record CredManPayPlanVc CredManPayPlanr;
  row CredManPayPlanVc CredManPayPlanrw;
  LongInt i,rwcnt,rwcnt2,j;
  record SMVc SMr;
  row SMVc SMrw;
  val totpayment,totinterest,totfullpayment,totfullvat,totinstalment,reimbsum,reimbsumrow;
  record CredManSetBlock CredManSetb;
  record CUVc CUr;
  Integer num;
  string 255 strnum,tstr;
  val topay2,openamount,paidout;
  record IVVc IVr;
  Integer int_type;
  record CMPrintConstantsBlock PCb;
  string 255 months;
  record CredFeesMatrixVc FMr;
  row CredFeesMatrixVc FMrw;
 
  CUr.Code = CredManr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
  end;
  BlockLoad(CredManSetb);
  int_type = GetInterestPaymentType(CredManr);
  if (int_type==2) then begin//to get preliminary schedule for partial disbursement agreements
    AgreementPaidOut2(CredManr,paidout);
    if (paidout==0) then begin
      int_type = 1;
      CredManr.RealInterestFlag = int_type;
    end;
  end;
  if (BuildCredManInfoMatrixOnSchedule(CredManr,CredManSetb,SMr)==false) then begin
    BuildCredManPayPlanCust(CredManr,CredManPayPlanr,CredManSetb,true,true);
    ReadFirstMain(CredManr,1,true);
    CredManr.RealInterestFlag = int_type;
    BuildCredManInfoMatrix(CredManr,CredManPayPlanr,CredManSetb,SMr);
  end;
  
  CredManHeader(vVals,CredManr);
  Ext_CommonDocumentFields(vVals);

  BlockLoad(PCb);

  ReadFirstMain(CredManr,1,true);
  rwcnt = MatRowCnt(SMr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SMr,i,SMrw);
    if (SMrw.TransDate<CredManr.FirstInvDate and SMrw.DebVal==0 and SMrw.CredVal==0) then begin//i==0 and 
      goto LNextRow;
    end;
    if (SMrw.RowSimStat==5) then begin
      goto LNextRow;
    end;
    num = num + 1;
    M4PadString(i,3,"0",true,strnum);
    vVals["ROW_" & strnum & "_F_TRANSDATUM"] = SMrw.TransDate;//Transaction Date (transdate
    vVals["ROW_" & strnum & "_F_CREDINTEREST"] = SMrw.CredVal;//interest
    vVals["ROW_" & strnum & "_F_CREDFEES"] = SMrw.DebVal2;//fees
    vVals["ROW_" & strnum & "_F_CREDINTEREST2"] = (SMrw.CredVal+SMrw.DebVal2);//interest+fees   
    vVals["ROW_" & strnum & "_F_CREDINSTAL"] = SMrw.DebVal;//instalment
    vVals["ROW_" & strnum & "_F_CREDBAL"] = SMrw.CurCredVal;//Balance
    vVals["ROW_" & strnum & "_F_DUEDATE"] = SMrw.DueDate;//Due date
    vVals["ROW_" & strnum & "_F_CREDINVTOT"] = (SMrw.CredVal+SMrw.DebVal2+SMrw.DebVal);//Balance
    vVals["ROW_" & strnum & "_F_ROWNR"] = num;
    vVals["ROW_" & strnum & "_F_VATROWSUM"] = SMrw.FrRate;//vat amount;
    vVals["ROW_" & strnum & "_F_TOTROWSUM"] = SMrw.CurDebVal;//total amount;
    totinterest = totinterest + (SMrw.CredVal+SMrw.DebVal2);
    totpayment = totpayment + (SMrw.CredVal+SMrw.DebVal2) + SMrw.DebVal;
    totfullpayment = totfullpayment + SMrw.CurDebVal;
    totfullvat = totfullvat + SMrw.FrRate;
    totinstalment = totinstalment + SMrw.DebVal;
    if (SetInSet(CredManr.LangCode,PCb.ReimbLanguages)) then begin
      reimbsumrow = 0;
      UnpackRowFieldMatrix(SMrw,"FeesMatrix",FMr);
      rwcnt2 = MatRowCnt(FMr);
      for (j=0;j<rwcnt2;j=j+1) begin
        MatRowGet(FMr,j,FMrw);
        if (SetInSet(FMrw.ArtCode,PCb.ReimbItems)) then begin
          reimbsum = reimbsum + FMrw.Sum;
          reimbsumrow = FMrw.Sum;
        end;
      end;
      months = GetMonthList(CredManr,SMrw);
      vVals["ROW_" & strnum & "_F_REIMBROWSUM"] = reimbsumrow;
      vVals["ROW_" & strnum & "_F_REIMBROWMONTHS"] = months;
    end;
LNextRow:;
  end;

  vVals["F_CREDTOTINT"] = totinterest;
  vVals["F_CREDTOTINSTAL"] = totinstalment;
  vVals["F_CREDTOTPAY"] = totpayment;
  vVals["F_CREDFULLTOTPAY"] = totfullpayment;
  vVals["F_CREDTOTVAT"] = totfullvat;
  vVals["F_REIMBURSMENT"] = reimbsum;

  openamount = GetCustomerOpenAmount(CredManr.CustCode,IVr);

  topay2 = openamount;
  vVals["F_OPENAMOUNT"] = openamount;
  if (topay2<0) then begin
    topay2 = 0;
  end;
  vVals["F_TOPAY2"] = topay2;
  ValToText(topay2,M4Val,CredManr.CurncyCode,CredManr.LangCode,tstr);
  vVals["F_TOPAY2_TEXT"] = tstr;

  return;
end;


procedure GetSuretyValues(record CredManVc CredManr,Integer num,var string name,var string phone,var string mobile,var string email,var string id,var string addr0,var string addr1,var string addr2,var string addr3,var string addr4)
begin
  record CUVc CUr;
  
  name = GetFieldValueByName(CredManr,"Surety" & num & "Name",-1);
  email = GetFieldValueByName(CredManr,"Surety" & num & "eMail",-1);
  phone = GetFieldValueByName(CredManr,"Surety" & num & "Phone",-1);
  mobile = GetFieldValueByName(CredManr,"Surety" & num & "Mobile",-1);
  id = GetFieldValueByName(CredManr,"Surety" & num & "ID",-1);
  CUr.Code = GetFieldValueByName(CredManr,"SuretyProvider" & num,-1);
  if (ReadFirstMain(CUr,1,true)) then begin
    addr0 = GetFieldValueByName(CredManr,"Surety" & num & "Addr0",-1);
    addr1 = GetFieldValueByName(CredManr,"Surety" & num & "Addr1",-1);
    addr2 = GetFieldValueByName(CredManr,"Surety" & num & "Addr2",-1);
    addr3 = GetFieldValueByName(CredManr,"Surety" & num & "Addr3",-1);
    addr4 = GetFieldValueByName(CredManr,"Surety" & num & "Addr4",-1);
  end else begin
    addr0 = ""; addr1 = ""; addr2 = ""; addr3 = ""; addr4 = ""; 
  end;

  return;
end;

procedure GetBOEValues3(record CredManVc CredManr,Integer num,var string name,var string phone,var string email,var string addr0,var string addr1,var string addr2,var string addr3,var string addr4,var val value,var string signer,var string contactid,var Date td,var Date duedate)
begin
  record CUVc CUr;
  
  name = GetFieldValueByName(CredManr,"BOE" & num & "Name",-1);
  email = GetFieldValueByName(CredManr,"BOE" & num & "eMail",-1);
  phone = GetFieldValueByName(CredManr,"BOE" & num & "Phone",-1);
  value = StringToVal(GetFieldValueByName(CredManr,"BOE" & num & "Amount",-1),M4Val);
  signer = GetFieldValueByName(CredManr,"BOE" & num & "Signer",-1);
  td = StringToDate(GetFieldValueByName(CredManr,"BOE" & num & "Date",-1));
  duedate = StringToDate(GetFieldValueByName(CredManr,"BOE" & num & "DueDate",-1));
  if (blank(td)) then begin
    td = CredManr.TransDate;
  end;
  CUr.Code = GetFieldValueByName(CredManr,"BOE" & num & "Code",-1);
  if (ReadFirstMain(CUr,1,true)) then begin
    addr0 = CUr.InvAddr0;
    addr1 = CUr.InvAddr1;
    addr2 = CUr.InvAddr2;
    addr3 = CUr.InvAddr3;
    addr4 = CUr.InvAddr4;
    contactid = CUr.RegNr1;
  end else begin
    addr0 = ""; addr1 = ""; addr2 = ""; addr3 = ""; addr4 = ""; 
  end;

  return;
end;

function string 255 GetCredManCity(record CredManVc CredManr)
begin
  string 255 res,tstr;
  record CredManClassVc Classr;
  record CMApplicationSetBlock CMb;
  Longint pos;

  BlockLoad(CMb);
  if (nonblank(CMb.CityAgreementClassType)) then begin
    while (GetNextSubString(CredManr.Classifications,pos,",",tstr)) begin
      Classr.Code = tstr;
      if (ReadFirstMain(Classr,1,true)) then begin
        if (Classr.Type==CMb.CityAgreementClassType) then begin
          res = Classr.Comment;
          goto LGetCredManCity;
        end;
      end;
    end;
  end;
LGetCredManCity:;
  GetCredManCity = res;
  return;
end;

function string 255 GetCurncyComment(string curcode,string langcode)
begin
  record CurncyCodeVc CCr;
  row CurncyCodeVc CCrw;
  Integer i,rwcnt;
  string 255 res;

  res = "";
  ccr.CurncyCode = curcode;
  if (ReadFirstMain(ccr,1,true)) then begin
    res = ccr.Comment;
    rwcnt = MatRowCnt(CCr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(CCr,i,CCrw);
      if (CCrw.LangCode==langcode) then begin
        res = CCrw.RowCurText;
      end;
    end;
  end;  

  GetCurncyComment = res;
  return;
end;


/*real surety agreement*/
global
procedure ExternalPrintSuretyAgreementForm(record CredManVc CredManr,var vector string vVals)
begin
  string 255 name,phone,mobile,email,id,addr0,addr1,addr2,addr3,addr4,signer,value,td;
  record CUVc CUr;
  string 255 tstr;
  val calcfees,fixfees;
  transaction Longint gSuretyNumber;
  record UserVc Userr;
  string 255 saddr0,saddr1,saddr2,saddr3,saddr4,idcard,iddate;
  string 255 signerphone,signermobile,signeremail,signerid,signeridcard,signeriddate,legalid;

  Ext_CommonDocumentFields(vVals);

  if (gSuretyNumber==-1) then begin
    GetSuretyValues(CredManr,1,name,phone,mobile,email,id,addr0,addr1,addr2,addr3,addr4);
    vVals["F_CONTACTNAME"] = name;
    vVals["F_CONTACTPHONE"] = phone;
    vVals["F_CONTACTMOBILE"] = mobile;
    vVals["F_CONTACTMAIL"] = email;
    vVals["F_CONTACTID"] = id;
    Ext_OutAddress(vVals,"F_CONTACTADRESS",name,addr0,addr1,addr2,addr3,addr4);

    GetSuretyValues(CredManr,2,name,phone,mobile,email,id,addr0,addr1,addr2,addr3,addr4);
    vVals["F_CONTACT2NAME"] = name;
    vVals["F_CONTACT2PHONE"] = phone;
    vVals["F_CONTACT2MOBILE"] = mobile;
    vVals["F_CONTACT2MAIL"] = email;
    vVals["F_CONTACT2ID"] = id;
    Ext_OutAddress(vVals,"F_CONTACT2ADRESS",name,addr0,addr1,addr2,addr3,addr4);

    GetSuretyValues(CredManr,3,name,phone,mobile,email,id,addr0,addr1,addr2,addr3,addr4);
    vVals["F_CONTACT3NAME"] = name;
    vVals["F_CONTACT3PHONE"] = phone;
    vVals["F_CONTACT3MOBILE"] = mobile;
    vVals["F_CONTACT3MAIL"] = email;
    vVals["F_CONTACT3ID"] = id;
    Ext_OutAddress(vVals,"F_CONTACT3ADRESS",name,addr0,addr1,addr2,addr3,addr4);
  end else begin
    PrintCredManSureties(vVals,CredManr,gSuretyNumber,"");
    
  end;
  
  CUr.Code = CredManr.CustCode;
  ReadFirstMain(CUr,1,true);
  vVals["F_NUMMER"] = CredManr.SerNr;
  vVals["F_KUNDNAMN"] = CUr.Name;
  vVals["F_REGNUMBER1"] = CUr.RegNr1;//Customer Registration No. 1
  Ext_OutAddress(vVals,"F_ADRESS",CUr.Name,CUr.InvAddr0,CUr.InvAddr1,CUr.InvAddr2,CUr.InvAddr3,CUr.InvAddr4);
  Ext_PrintCurrencyCode(vVals,"F_VALUTA",CredManr.CurncyCode);
  vVals["F_VALUTANAME"] = GetCurncyComment(vVals["F_VALUTA"],CredManr.LangCode);
  vVals["F_TOTSUM"] = CredManr.InvSum4;
  ValToText(CredManr.InvSum4,M4Val,CredManr.CurncyCode,CredManr.LangCode,tstr);
  vVals["F_TOTSUMINTEXT"] = LowerCase(tstr);
  vVals["F_OVERDUEPRC"] = CredManr.OverduePercentage;


  RecordCLear(CUr);
  if (FindCEOContact(CredManr.CustCode,CUr)) then begin
    vVals["F_CEONAME"] = CUr.Name;
    vVals["F_CEOID"] = CUr.RegNr1;
    vVals["F_CEOPHONE"] = CUr.Phone;
    vVals["F_CEOEMAIL"] = CUr.eMail;
  end;
  RecordCLear(CUr);
  if (FindCFOContact(CredManr.CustCode,CUr)) then begin
    vVals["F_CFONAME"] = CUr.Name;
    vVals["F_CFOID"] = CUr.RegNr1;
    vVals["F_CFOPHONE"] = CUr.Phone;
    vVals["F_CFOEMAIL"] = CUr.eMail;
  end;

  Ext_PrintDocumentSigner(vVals);
  vVals["F_CREDHALFSUM"] = (CredManr.InvSum4/2);
  vVals["F_CREDCUSTCITY"] = GetCredManCity(CredManr);
  ValToText((CredManr.InvSum4/2),M4Val,CredManr.CurncyCode,CredManr.LangCode,tstr);
  vVals["F_CREDHALFSUMTEXT"] = LowerCase(tstr);

  ExtPrintOwnBankDetails(vVals,CredManr.SerNr);
  vVals["F_NUMMER2"] = GetCredManNr(CredManr.SerNr);
  vVals["F_CREDMANCREATEDATE"] = CredManr.TransDate;
  if (CredManr.AnnualRate==1) then begin
    vVals["F_ANNUALRATE"] = Round(CredManr.IntRate,SetRoundModeD(2)) & " %";
  end else begin
    vVals["F_ANNUALRATE"] = Round(CredManr.IntRate*12,SetRoundModeD(2)) & " %";
  end;

  calcfees = GetMonthlyFees(CredManr,0);
  fixfees =  GetMonthlyFees(CredManr,1);
  vVals["F_CALCFEES"] = calcfees & " %";
  vVals["F_FIXFEES"] = fixfees;

  Userr.Code = CredManr.SalesMan;
  if (ReadFirstMain(Userr,1,true)) then begin
    vVals["F_SALESMANPHONE"] = Userr.Phone1;
    vVals["F_SALESMANNAME"] = Userr.Name;
    vVals["F_SALESMANEMAIL"] = Userr.emailAddr;
    vVals["F_SALESMANJOB"] = Userr.Job;
  end;
  vVals["F_OTHERCONDITIONS"] = GetConditionsText(CredManr,0);
  vVals["F_PMTCONDITIONS"] = GetConditionsText(CredManr,1);


  return;
end;

procedure GetSuretyValues2(record CredManVc CredManr,Integer num,var string name,var string phone,var string mobile,var string email,var string id,var string addr0,var string addr1,var string addr2,var string addr3,var string addr4)
begin
  
  name = GetFieldValueByName(CredManr,"Surety" & num & "Name",-1);
  email = GetFieldValueByName(CredManr,"Surety" & num & "eMail",-1);
  phone = GetFieldValueByName(CredManr,"Surety" & num & "Phone",-1);
  mobile = GetFieldValueByName(CredManr,"Surety" & num & "Mobile",-1);
  id = GetFieldValueByName(CredManr,"Surety" & num & "ID",-1);
  addr0 = GetFieldValueByName(CredManr,"Surety" & num & "Addr0",-1);
  addr1 = GetFieldValueByName(CredManr,"Surety" & num & "Addr1",-1);
  addr2 = GetFieldValueByName(CredManr,"Surety" & num & "Addr2",-1);
  addr3 = GetFieldValueByName(CredManr,"Surety" & num & "Addr3",-1);
  addr4 = GetFieldValueByName(CredManr,"Surety" & num & "Addr4",-1);

  return;
end;

global
procedure ExternalPrintVekselisForm(record CredManVc CredManr,var vector string vVals)
begin
  string 255 name,phone,mobile,email,id,addr0,addr1,addr2,addr3,addr4,signer,contactid;
  record CUVc CUr,tCUr,SCUr;
  string 255 tstr;
  val value;
  record CYBlock CYb;
  transaction Longint gBOENumber;
  record BOESuretyVc BSr;
  Integer num;
  string 255 strnum;
  record CredManTypeVc CMTr;
  Date enddate,duedate,td;
  Integer gnum;
  record CMApplicationSetBlock CMb;
  record CMPrintConstantsBlock PCb;


  Ext_CommonDocumentFields(vVals);

  if (gBOENumber>0) then begin
    BlockLoad(CMb);
    BlockLoad(PCb);
    GetBOEValues3(CredManr,gBOENumber,name,phone,email,addr0,addr1,addr2,addr3,addr4,value,signer,contactid,td,duedate);
    vVals["F_CONTACTNAME"] = name;
    vVals["F_CONTACTPHONE"] = phone;
    vVals["F_CONTACTMAIL"] = email;
    vVals["F_CONTACTID"] = contactid;
    vVals["F_CONTACTVALUE"] = value;
    if (nonblank(PCb.BOEValueLangCode)) then begin
      ValToText(value,M4Val,CredManr.CurncyCode,PCb.BOEValueLangCode,tstr);
    end else begin
      ValToText(value,M4Val,CredManr.CurncyCode,CredManr.LangCode,tstr);
    end;
    tstr = StrReplace(tstr,"  "," ");
    tstr = StrReplace(tstr,"  "," ");
    vVals["F_CONTACTVALUEINWORDS"] = tstr;
    vVals["F_CONTACTSIGNER"] = signer;
    vVals["F_CONTACTDATE"] = td;
    tstr = DateInWords(td,CredManr.LangCode,2);
    vVals["F_CONTACTDATEINWORDS"] = tstr;
    vVals["F_CONTACTDUEDATE"] = duedate;
    tstr = DateInWords(duedate,CredManr.LangCode,1);
    vVals["F_CONTACTDUEDATEINWORDS"] = tstr;
    Ext_OutAddress(vVals,"F_CONTACTADRESS",name,addr0,addr1,addr2,addr3,addr4);

    PrintBOESureties(vVals,CredManr,gBOENumber,"",gnum);
  end else begin
    GetSuretyValues2(CredManr,1,name,phone,mobile,email,id,addr0,addr1,addr2,addr3,addr4);
    vVals["F_CONTACTNAME"] = name;
    vVals["F_CONTACTPHONE"] = phone;
    vVals["F_CONTACTMOBILE"] = mobile;
    vVals["F_CONTACTMAIL"] = email;
    vVals["F_CONTACTID"] = id;
    vVals["F_CONTACTADRESS"] = addr0;

    GetSuretyValues2(CredManr,2,name,phone,mobile,email,id,addr0,addr1,addr2,addr3,addr4);
    vVals["F_CONTACT2NAME"] = name;
    vVals["F_CONTACT2PHONE"] = phone;
    vVals["F_CONTACT2MOBILE"] = mobile;
    vVals["F_CONTACT2MAIL"] = email;
    vVals["F_CONTACT2ID"] = id;
    vVals["F_CONTACT2ADRESS"] = addr0;

    GetSuretyValues2(CredManr,3,name,phone,mobile,email,id,addr0,addr1,addr2,addr3,addr4);
    vVals["F_CONTACT3NAME"] = name;
    vVals["F_CONTACT3PHONE"] = phone;
    vVals["F_CONTACT3MOBILE"] = mobile;
    vVals["F_CONTACT3MAIL"] = email;
    vVals["F_CONTACT3ID"] = id;
    vVals["F_CONTACT3ADRESS"] = addr0;
  end;


  if (FindCustomerRelationCred(CredManr.CustCode,CredManr.ClientContact,CUr)) then begin
    vVals["F_ATTNAME"] = CUr.Name;
    vVals["F_ATTID"] = CUr.RegNr1;
  end;
  tCUr.Code = CredManr.CustCode;
  if (ReadFirstMain(tCUr,1,true)) then begin
    vVals["F_CUSTNAME"] = tCUr.Name;
    vVals["F_CUSTID"] = tCUr.RegNr1;
    Ext_OutAddress(vVals,"F_ADRESS",tCUr.Name,tCUr.InvAddr0,tCUr.InvAddr1,tCUr.InvAddr2,tCUr.InvAddr3,tCUr.InvAddr4);
  end;

  BlockLoad(CYb);
  vVals["F_AGREEMENTDATE"] = CredManr.TransDate;
  Ext_PrintCurrencyCode(vVals,"F_VALUTA",CredManr.CurncyCode);
  vVals["F_ORT"] = CYb.Addr3;

  vVals["F_TOTSUM"] = CredManr.InvSum4;
  ValToText(CredManr.InvSum4,M4Val,CredManr.CurncyCode,CredManr.LangCode,tstr);
  vVals["F_TOTSUMINTEXT"] = tstr;
  vVals["F_CREDHALFSUM"] = (CredManr.InvSum4/2);
  ValToText((CredManr.InvSum4/2),M4Val,CredManr.CurncyCode,CredManr.LangCode,tstr);
  vVals["F_CREDHALFSUMTEXT"] = tstr;

  vVals["F_CREDMULSUM"] = (CredManr.InvSum4*1.5);
  ValToText((CredManr.InvSum4*1.5),M4Val,CredManr.CurncyCode,CredManr.LangCode,tstr);
  vVals["F_CREDMULSUMTEXT"] = tstr;
  ExtPrintOwnBankDetails(vVals,CredManr.SerNr);

  RecordCLear(CUr);
  if (FindCEOContact(CredManr.CustCode,CUr)) then begin
    vVals["F_CEONAME"] = CUr.Name;
    vVals["F_CEOID"] = CUr.RegNr1;
    vVals["F_CEOPHONE"] = CUr.Phone;
    vVals["F_CEOEMAIL"] = CUr.eMail;
  end;
  RecordCLear(CUr);
  if (FindCFOContact(CredManr.CustCode,CUr)) then begin
    vVals["F_CFONAME"] = CUr.Name;
    vVals["F_CFOID"] = CUr.RegNr1;
    vVals["F_CFOPHONE"] = CUr.Phone;
    vVals["F_CFOEMAIL"] = CUr.eMail;
  end;
  vVals["F_NUMMER2"] = GetCredManNr(CredManr.SerNr);
  vVals["F_CREDMANCREATEDATE"] = CredManr.TransDate;
  if (CredManr.AnnualRate==1) then begin
    vVals["F_ANNUALRATE"] = Round(CredManr.IntRate,SetRoundModeD(2)) & " %";
  end else begin
    vVals["F_ANNUALRATE"] = Round(CredManr.IntRate*12,SetRoundModeD(2)) & " %";
  end;
  
  CMTr.Code = CredManr.Type;
  if (ReadFirstMain(CMTr,1,true)) then begin end;
  
  enddate = CredManr.startDate;
  enddate = AddMonth(enddate,CredManr.InstalmentMonths);
  if (CMTr.VekselisExtraMonths>-1) then begin
    enddate = AddMonth(enddate,CMTr.VekselisExtraMonths);
  end;

  tstr = DateInWords(enddate,CredManr.LangCode,1);
  vVals["F_ENDDATE2"] = enddate;
  vVals["F_ENDDATE2INWORDS"] = tstr;

  Ext_PrintDocumentSigner(vVals);

  vVals["F_OTHERCONDITIONS"] = GetConditionsText(CredManr,0);
  vVals["F_PMTCONDITIONS"] = GetConditionsText(CredManr,1);

  return;
end;

global
procedure ExternalPrintPaymentCertificateForm(record CredManPmtGrntVc PGr,var vector string vVals)
begin
  record CredManVc CredManr;
  LongInt i,rwcnt;
  val totpayment,totinterest;
  record CUVc CUr;
  record CYBlock CYb;
  row CredManPmtGrntVc PGrw;
 
  Ext_CommonDocumentFields(vVals);

  CredManr.SerNr = PGr.CredManNr;
  if (ReadFirstMain(CredManr,1,true)) then begin
    CredManHeader(vVals,CredManr);
    if (nonblank(vVals["SPEC_ROW"])) then begin
      MatRowGet(PGr,StringToLongInt(vVals["SPEC_ROW"]),PGrw);
      CUr.Code = PGrw.CustCode;
      if (ReadFirstMain(CUr,1,true)) then begin
        vVals["F_SELLERNAME"] = PGrw.CustName;
        vVals["F_SELLERID"] = CUr.RegNr1;
        vVals["F_SELLERLIMIT"] = PGrw.MaxLimit;
        Ext_OutAddress(vVals,"F_SELLERADDRESS",CUr.Name,CUr.InvAddr0,CUr.InvAddr1,CUr.InvAddr2,CUr.InvAddr3,CUr.InvAddr4);
      end;
    end;

    return;
  end;

  return;
end;


global
procedure ExternalBuyoutSummaryForm(record CredManVc CredManr,record RcVc RepSpec,var vector string vVals)
begin
  LongInt i,rwcnt;
  val totpayment,totinterest;
  record CUVc CUr;
  record CYBlock CYb;
 
  Ext_CommonDocumentFields(vVals);

  vVals["F_BUYOUTDATE"] = RepSpec.d1;
  vVals["F_BUYOUTPRINC"] = RepSpec.f13;
  vVals["F_BUYOUTINT"] = RepSpec.f16;
  vVals["F_BUYOUTOVERDUE"] = RepSpec.f17;
  vVals["F_BUYOUTLETTER"] = RepSpec.f18;
  vVals["F_BUYOUTINSURANCE"] = RepSpec.f19;
  vVals["F_BUYOUTNOTINVOVERDUE"] = RepSpec.f12;
  vVals["F_BUYOUTTOTAL"] = RepSpec.vals2;

  return;
end;

procedure GetCFOContacts(string custcode,var array record CUVc aCUr)
begin
  Boolean TrHs;
  record ContactRelVc CRr;
  record CMApplicationSetBlock CMb;
  record CUVc ContactCur;
  
  BlockLoad(CMb);
  TrHs = true;
  CRr.CustCode = custcode;
  while (LoopMain(CRr,1,TrHs)) begin
    if (CRr.CustCode!=custcode) then begin
      TrHs = false;
    end else begin
      if (CRr.Invalid==0) then begin
        ContactCUr.Code = CRr.ContactCode;
        if (ReadFirstMain(ContactCUr,1,true)) then begin
          if (nonblank(ContactCUr.JobDesc)) then begin
            if (SetInSet(ContactCUr.JobDesc,CMb.CFOTitle)) then begin
              aCUr[aCUr.length] = ContactCur;
            end;
          end;
        end;
      end;
    end;
  end;


  return;
end;


global
procedure ExternalPrintCredManForm(record CredManVc CredManr,var vector string vVals)
begin
  Integer i,rwcnt,j,s;
  row CredManVc CredManrw;
  string 255 tstr,strnum;
  record SysFormatBlock SysFormatRec;
  record LangNrVc LangNrr;
  record CredManPropertiesVc CMPr;
  row CredManPropertiesVc CMPrw;
  record CMPropertyVc Propr;
  row CMPropertyVc Proprw,defProprw;
  record CMInsuranceTypeVc ITr;
  array record CUVc aCUr;
  record CUVc CUr,tCUr;
  string 255 numstring,propid;
  Boolean haspropf;
  
  GetLangNr(CredManr.LangCode,LangNrr);      
  Ext_CommonDocumentFields(vVals);
  CredManHeader(vVals,CredManr);
/*
  BlockLoad(SysFormatRec);
  rwcnt = MatRowCnt(CredManr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CredManr,i,CredManrw);
    M4PadString(i,3,"0",true,strnum);
    //vVals["ROW_" & strnum & "_
    GetUnitStr(CredManrw.ArtCode,CredManr.LangCode,tstr);
    vVals["ROW_" & strnum & "_F_ENHET"] = tstr;
    vVals["ROW_" & strnum & "_F_ARTNR"] = CredManrw.ArtCode;
    vVals["ROW_" & strnum & "_F_ARTNR2"] = CredManrw.ArtCode;
    ItemBC39(CredManrw.ArtCode,tstr);
    vVals["ROW_" & strnum & "_F_ARTNRBC39"] = tstr;
    ItemBCEAN(CredManrw.ArtCode,tstr);
    vVals["ROW_" & strnum & "_F_ARTNRBCEAN"] = tstr;
    ItemBCEAN13(CredManrw.ArtCode,tstr);    
    vVals["ROW_" & strnum & "_F_ARTNRBCEAN13"] = tstr;
    GetItemGroup(CredManrw.ArtCode,tstr);
    vVals["ROW_" & strnum & "_F_ARTGRUPP"] = tstr;
    tstr = ValToString(CredManrw.Quant,M4UVal,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);    
    vVals["ROW_" & strnum & "_F_ANTAL"] = tstr;
    vVals["ROW_" & strnum & "_F_SPECIFIKATION"] = CredManrw.Comment;
    tstr = ValToString(CredManrw.Price,M423Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
    vVals["ROW_" & strnum & "_F_APRIS"] = tstr;
    vVals["ROW_" & strnum & "_F_BELOPP"] = CredManrw.Sum;
    tstr = ValToString(CredManrw.vRebate,M41Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
    vVals["ROW_" & strnum & "_F_RABATT"] = tstr;
    vVals["ROW_" & strnum & "_F_BASPRIS"] = CredManrw.Sum;
    vVals["ROW_" & strnum & "_F_PRICEFACTOR"] = CredManrw.PriceFactor;
    vVals["ROW_" & strnum & "_F_FAKTURANUMMER"] = CredManrw.InvoicedOn;
  end;
*/
  CMPr.CredManNr = CredManr.SerNr;
  CMPr.RecordType = 0;
  if (ReadFirstMain(CMPr,2,true)) then begin
    rwcnt = MatRowCnt(CMPr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(CMPr,i,CMPrw);
      Propr.SerNr = CMPrw.Property;
      if (ReadFirstMain(Propr,1,true)) then begin
        M4PadString(i,3,"0",true,strnum);
        vVals["ROW_" & strnum & "_F_PROPNAME"] = CMPrw.Addr0;
        numstring = "";
        if (rwcnt>1) then begin
          numstring = (i+1) & ". ";
        end;
        AddToList(vVals,"F_PROPNAME_LIST",numstring & CMPrw.Addr0);
        vVals["ROW_" & strnum & "_F_PROPOFFICIALNR"] = CMPrw.OfficialSerNr;
        AddToList(vVals,"F_PROPOFFICIALNR_LIST",CMPrw.OfficialSerNr);
        vVals["ROW_" & strnum & "_F_PROPCOUNTRY"] = Propr.Addr1;
        AddToList(vVals,"F_PROPCOUNTRY_LIST",Propr.Addr1);
        vVals["ROW_" & strnum & "_F_PROPCITY"] = Propr.Addr2;
        AddToList(vVals,"F_PROPCITY_LIST",Propr.Addr2);
        vVals["ROW_" & strnum & "_F_PROPID"] = Propr.SerialNo;
        tstr = Propr.SerialNo;
        if (blank(tstr)) then begin
          tstr = "-";
        end;
        AddToList(vVals,"F_PROPID_LIST",numstring & tstr);
        vVals["ROW_" & strnum & "_F_PROPADDRESS"] = Propr.Addr3;
        tstr = Propr.Addr3;
        if (blank(tstr)) then begin
          tstr = "-";
        end;
        AddToList(vVals,"F_PROPADDRESS_LIST",numstring & tstr);
        vVals["ROW_" & strnum & "_F_PROPZIP"] = Propr.Addr4;
        AddToList(vVals,"F_PROPZIP_LIST",Propr.Addr4);
        vVals["ROW_" & strnum & "_F_PROPTYPE"] = Propr.RepVal;
        AddToList(vVals,"F_PROPTYPE_LIST",Propr.RepVal);
        vVals["ROW_" & strnum & "_F_PROPRVAL"] = Propr.RepVal;
        AddToList(vVals,"F_PROPRVAL_LIST",Propr.RepVal);
        vVals["ROW_" & strnum & "_F_PROPEVAL"] = Propr.EvalVal;
        AddToList(vVals,"F_PROPEVAL_LIST",Propr.EvalVal);
        vVals["ROW_" & strnum & "_F_PROPINSCOMPNAME"] = Propr.InsuranceName;
        AddToList(vVals,"F_PROPINSCOMPNAME_LIST",Propr.InsuranceName);
        vVals["ROW_" & strnum & "_F_PROPINSUNTIL"] = Propr.InsuredUntil;
        AddToList(vVals,"F_PROPINSUNTIL_LIST",Propr.InsuredUntil);
        vVals["ROW_" & strnum & "_F_PROPINSVAL"] = Propr.InsuredVal;
        AddToList(vVals,"F_PROPINSVAL_LIST",Propr.InsuredVal);
        
        tstr = "";
        MatRowGet(Propr,0,defProprw);
        vVals["ROW_" & strnum & "_F_PROPOWNER"] = defProprw.OwnerName;
        for (s=0;s<MatRowCnt(Propr);s=s+1) begin
          MatRowGet(Propr,s,Proprw);
          if (nonblank(Proprw.OwnerName)) then begin
            if (nonblank(tstr)) then begin
              tstr = tstr & ", ";
            end;
            tCUr.Code = Proprw.OwnerCode;
            if (ReadFirstMain(tCur,1,true)) then begin
              tstr = tstr & Proprw.OwnerName & " " & BuildCompRegNrString(tCUr.CustType,tCUr.RegNr1);
            end;
          end;
        end;
        if (blank(tstr)) then begin
          tstr = "-";
        end;
        AddToList(vVals,"F_PROPOWNER_LIST",numstring & tstr);
        
        ITr.Code = Propr.InsuranceType;
        if (ReadFirstMain(ITr,1,true)) then begin
          vVals["ROW_" & strnum & "_F_PROPINSURANCETYPE"] = ITr.Comment;
          AddToList(vVals,"F_PROPINSURANCETYPE_LIST",ITr.Comment);
        end;
        tstr = "";
        for (j=0;j<LineTextCnt2(Propr);j=j+1) begin
          tstr = tstr & LineTextGet2(Propr,j);
        end;
        tstr = StrReplace(tstr,chr(13),"\\n");
        vVals["ROW_" & strnum & "_F_PROPCOMMENT"] = tstr;
        AddToList(vVals,"F_PROPCOMMENT_LIST",tstr);
        haspropf = true;
      end;
    end;
  end;
  tstr = "";
  if (haspropf) then begin
    vVals["F_LOANHIPSUM"] = (CredManr.InvSum4*1.3) & " Eur";
    ValToText((CredManr.InvSum4*1.3),M4Val,CredManr.CurncyCode,CredManr.LangCode,tstr);
    vVals["F_LOANHIPSUMTEXT"] = "(" & tstr & ")";
  end else begin
    vVals["F_LOANHIPSUM"] = "-";  
  end;

  return;   
end;


global
procedure ExternalPrintLoanAppForm(record B2BLoanApplicationVc LAr,var vector string vVals)
begin
  record CUVc CUr;

  Ext_CommonDocumentFields(vVals);
  if (GetLoanAppContact(LAr.ContactName,LAr.CustCode,CUr)) then begin
    vVals["F_CONTACTNAME"] = CUr.Name;
    vVals["F_CONTACTID"] = CUr.RegNr1;
    //vVals["F_DATUM"] = CurrentDate;
  end;
  CUr.Code = LAr.CEOCustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    vVals["F_CEONAME"] = CUr.Name;
    vVals["F_CEOID"] = CUr.RegNr1;
    vVals["F_CEOPHONE"] = CUr.Phone;
    vVals["F_CEOEMAIL"] = CUr.eMail;
  end;
  CUr.Code = LAr.SuretyProvider1;
  if (ReadFirstMain(CUr,1,true)) then begin
    vVals["F_SURETY1NAME"] = CUr.Name;
    vVals["F_SURETY1ID"] = CUr.RegNr1;
  end;

  return;
end;

global
procedure ExternalPrintSuretyAppForm(record B2BLoanApplicationVc LAr,var vector string vVals)
begin
  record CUVc CUr;
  string 255 name,phone,mobile,email,id,addr0,addr1,addr2,addr3,addr4;
  Integer surety;

  Ext_CommonDocumentFields(vVals);
  surety = LAr.SuretyCnt;
  if (surety>0) then begin
    GetSuretyValues(LAr,surety,name,phone,mobile,email,id,addr0,addr1,addr2,addr3,addr4);
    OUTFORMFIELD("F_CONTACTNAME",name)
    OUTFORMFIELD("F_CONTACTPHONE",phone)
    OUTFORMFIELD("F_CONTACTMAIL",email)
    OUTFORMFIELD("F_CONTACTID",id)
    Ext_OutAddress(vVals,"F_CONTACTADRESS",name,addr0,addr1,addr2,addr3,addr4);
  end;

  return;
end;
