//<halrule>server-only</halrule>
external procedure ExternalPrintLoanAppForm(record B2BLoanApplicationVc,var vector string);
external procedure ExternalPrintSuretyAppForm(record B2BLoanApplicationVc,var vector string);
external procedure ExternalPrintCredManForm(record CredManVc,var vector string);
external procedure ExternalPrintCredManScheduleForm(record CredManVc,var vector string);
external procedure ExternalPrintVekselisForm(record CredManVc,var vector string);
external procedure ExternalPrintSuretyAgreementForm(record CredManVc,var vector string);
external inner function string 255 CredManOwnBankAccount(Longint);
external inner procedure FindVATCodeRow(string,record VATCodeBlock,var row VATCodeBlock);
external inner function string 255 StrReplace(string,string,string);
external function val GetCredManItemValue(record IVVc,string,Boolean);
external inner procedure InvVat(Integer,Integer,Integer,Integer,string,val,var val,var val,var val,var val,var val);
external inner function boolean AddEMailRecipients(var record MailVc,string,string,integer);
external inner function Boolean FindCustomerRelation(string,string,var record CUVc);
external inner procedure ValToText(val,Integer,string,string,var string);
external inner procedure Ext_PrintValueInclZero(var vector string,string,val,Integer,record LangNrVc,record SysFormatBlock,Boolean);

global
procedure OuterPrintEBSDocument(string docname,string id,var Boolean printf,record RcVc RepSpec,var vector string vVals)
begin
  record CredManVc CredManr;
  record B2BLoanApplicationVc LAr;

  switch (docname) begin
    case "LoanAppForm":
      LAr.SerNr = StringToLongint(id);
      printf = (ReadFirstMain(LAr,1,true) or id=="-2");
      if (printf) then begin
        vVals["SPEC_CUSTCODE"] = RepSpec.f10;
        ExternalPrintLoanAppForm(LAr,vVals);
      end;
    case "SuretyApplicationForm":
      LAr.SerNr = StringToLongint(id);
      printf = (ReadFirstMain(LAr,1,true) or id=="-2");
      if (id=="-2") then begin
        LAr.SuretyCnt = 1;
      end;
      if (printf) then begin
        ExternalPrintSuretyAppForm(LAr,vVals);
      end;
    case "CredManForm":
      CredManr.SerNr = StringToLongint(id);
      printf = (ReadFirstMain(CredManr,1,true) or id=="-2");
      if (printf) then begin
        ExternalPrintCredManForm(CredManr,vVals);
      end;
    case "CredManScheduleForm":
      CredManr.SerNr = StringToLongint(id);
      printf = (ReadFirstMain(CredManr,1,true) or id=="-2");
      if (printf) then begin
        ExternalPrintCredManScheduleForm(CredManr,vVals);
      end;
    case "SuretyAgreementForm":
      CredManr.SerNr = StringToLongint(id);
      printf = (ReadFirstMain(CredManr,1,true) or id=="-2");
      if (printf) then begin
        ExternalPrintSuretyAgreementForm(CredManr,vVals)
      end;
    case "VekselisForm":
      CredManr.SerNr = StringToLongint(id);
      printf = (ReadFirstMain(CredManr,1,true) or id=="-2");
      if (printf) then begin
        ExternalPrintVekselisForm(CredManr,vVals);
      end;

  end;

  return;
end;

global
procedure Ext_PrintDocumentSigner(var vector string vVals)
begin
  record CMApplicationSetBlock ASb;
  record UserVc Userr;
  
  BlockLoad(ASb);
  Userr.Code = ASb.DocumentSigner;
  if (ReadFIrstMain(Userr,1,true)) then begin
    vVals["F_DOCUMENTSIGNERNAME"] = Userr.Name;
    vVals["F_DOCUMENTSIGNERPOSITION"] = ASb.DocumentSignerPosition;
    vVals["F_DOCUMENTSIGNERCODE"] = Userr.Code;
    vVals["F_DOCUMENTSIGNEREMAIL"] = Userr.emailAddr;
    vVals["F_DOCUMENTSIGNERPHONE"] = Userr.Phone1;
  end;

  return;
end;


global
procedure Ext_PrintInvoiceSigner(var vector string vVals)
begin
  record CMApplicationSetBlock ASb;
  record UserVc Userr;
  
  BlockLoad(ASb);
  Userr.Code = ASb.InvoiceSigner;
  if (ReadFIrstMain(Userr,1,true)) then begin
    vVals["F_INVOICESIGNERNAME"] = Userr.Name;
    vVals["F_INVOICESIGNERPOSITION"] = ASb.DocumentSignerPosition;
    vVals["F_INVOICESIGNERCODE"] = Userr.Code;
  end;

  return;
end;

global
function string 255 GetCredManNr(Longint sernr)
begin
  record CredManVc CredManr;
  string 255 res;

  res = sernr;
  CredManr.SerNr = sernr;
  if (ReadFirstMain(CredManr,1,true)) then begin
    if (nonblank(CredManr.OfficialSerNr)) then begin
      res = CredManr.OfficialSerNr;
    end;
  end;

  GetCredManNr = res;
  return;
end;

global
procedure GetHiddenInvoiceValues(record IVVc IVr,var val abovehiddenbase,var val abovehiddenvat)
begin
  Integer i,rwcnt;
  row IVVc IVrw;
  val rowbase;
  val vatprc,vatval,vatexclprc,vatinclprc,rowtax;
  
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    if (IVrw.stp==kInvoiceRowTypeHidden) then begin
      i = rwcnt;
    end else begin
      if (IVrw.stp==kInvoiceRowTypeNormal) then begin
        InvVat(1,IVr.InclVAT,IVr.NoTAXonVAT,IVr.ExportFlag,IVrw.VATCode,IVrw.Sum,vatprc,vatval,vatexclprc,vatinclprc,rowtax);

        if (IVr.InclVAT==0) then begin
          rowbase = IVrw.Sum;
        end else begin
          rowbase = IVrw.Sum - vatval;
        end;

        abovehiddenvat = abovehiddenvat + vatval;
        abovehiddenbase = abovehiddenbase + rowbase;
      end;
    end;
  end;

  return;
end;

global
function val GetCustomerOpenAmount(string custcode)
begin
  val res;
  record ARVc ARr;
  Boolean TrHs;
  record ARPayVc ARPayr;

  TrHs = true;
  res = 0;
  ARr.CustCode = custcode;
  while (LoopKey("CustCode",ARr,1,TrHs)) begin
    if (ARr.CustCode!=custcode) then begin
      TrHs = false;
    end else begin
      if (ARr.RVal>0 and ARr.DueDate<CurrentDate) then begin
        res = res + ARr.RVal;
      end;
    end;
  end;
  
  TrHs = true;
  ARPayr.CustCode = custcode;
  while (LoopKey("CustCode",ARPayr,1,TrHs)) begin
    if (ARPayr.CustCode!=custcode) then begin
      TrHs = false;
    end else begin
      if (ARPayr.RVal>0) then begin
        res = res - ARPayr.RVal;
      end;
    end;
  end;

  GetCustomerOpenAmount = res;
  return;
end;

global
procedure Ext_PrintCustomInvoiceFields(var vector string vVals,record IVVc IVr)
begin
  record CredManSetBlock CMb;
  row IVVc IVrw;
  Integer i,rwcnt,j;
  val abovehiddenbase,abovehiddenvat,rowbase;
  record VATCodeBlock VATb;
  row VATCodeBlock VATbrw;
  record TaxRulesVc TRr;
  record NotePadVc Noter;
  record RLinkVc RLr;
  Longint pos,l;
  string 255 tstr;
  record CMInvoicingBlock CIb;
  string 255 vatnr,del;
  record CUVc CUr;
  record CredManVc CredManr;
  val topay2,openamount;
  string 255 credivno;
  record IVVc IVCreditr;
  record UserVc Userr;

  Ext_PrintInvoiceSigner(vVals);

  vVals["F_CUSTOWNBANKACC"] = CredManOwnBankAccount(IVr.CustCredManNr);

  del = ":";
  BlockLoad(CIb);
  if (nonblank(CIb.PeriodDelimiter)) then begin
    del = CIb.PeriodDelimiter;
  end;
  vVals["F_LOANPERIOD"] = IVr.CredFromDate & del & IVr.CredToDate;

  GetHiddenInvoiceValues(IVr,abovehiddenbase,abovehiddenvat);
  openamount = GetCustomerOpenAmount(IVr.CustCode);

  topay2 = openamount;
  if (IVr.PayDate>=CurrentDate) then begin
    topay2 = topay2 + abovehiddenbase + abovehiddenvat + GetCredManItemValue(IVr,CMb.InstalmentItem,true);
  end;
  if (topay2<0) then begin
    topay2 = 0;
  end;
  vVals["F_OPENAMOUNT"] = openamount;
  vVals["F_TOPAY2"] = topay2;
  ValToText(topay2,M4Val,IVr.CurncyCode,CredManr.LangCode,tstr);
  vVals["F_TOPAY2_TEXT"] = tstr;

  vVals["F_ABOVEHIDDENBASE"] = abovehiddenbase;
  vVals["F_ABOVEHIDDENVAT"] = abovehiddenvat;
  if (IVr.InvType==kInvoiceRowTypeCredit) then begin
    vVals["F_ABOVEHIDDENFULL"] = -(abovehiddenbase + abovehiddenvat);
  end else begin
    vVals["F_ABOVEHIDDENFULL"] = abovehiddenbase + abovehiddenvat;
  end;
  vVals["F_NUMMER"] = GetCredManNr(IVr.CustCredManNr);
  CredManr.SerNr = IVr.CustCredManNr;
  if (ReadFirstMain(CredManr,1,true)) then begin
    vVals["F_CREDMANCREATEDATE"] = CredManr.CreatedDate;
  end;

  BlockLoad(CMb);
  vVals["F_PRINCVAL"] = GetCredManItemValue(IVr,CMb.InstalmentItem,true);

  rwcnt = MatRowCnt(IVr);
  BlockLoad(VATb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    if (IVrw.stp==kInvoiceRowTypeNormal) then begin
      FindVATCodeRow(IVrw.VATCode,VATb,VATbrw);
      if (nonblank(VATbrw.TaxRules)) then begin
        TRr.Code = VATbrw.TaxRules;
        if (ReadFirstMain(TRr,1,true)) then begin
          if (ReadRecordLink(TRr,1,Noter,RLr)) begin
/*
            pos = 0;
            l = SizeTextCnt(Noter);
            tstr = "";
            while (pos<l) begin
              tstr = tstr & StringFromText(Noter,pos,255);
              pos = pos + 255;
            end;
*/          
            tstr = "";
            for (j=0;j<LineTextCnt2(Noter);j=j+1) begin
              tstr = tstr & LineTextGet2(Noter,j);
            end;

            vVals["F_TAXRULE"] = StrReplace(tstr,chr(13),"\\n");
            //i = rwcnt;
          end;
        end;
      end;
    end;
    if (IVrw.stp==kInvoiceRowTypeCredit) then begin
      credivno = IVrw.OrdRow;
      IVCreditr.SerNr = IVrw.OrdRow;
      if (ReadFirstMain(IVCreditr,1,true)) then begin  
        if (nonblank(IVCreditr.OfficialSerNr)) then begin
          credivno = IVCreditr.OfficialSerNr;
        end;
      end;
    end;
  end;

  vVals["F_CREDITIVNO"] = credivno;

  Userr.Code = CredManr.SalesMan;
  if (ReadFirstMain(Userr,1,true)) then begin
    vVals["F_SALESMANJOB"] = Userr.Job;
  end;

  
  if (blank(IVr.VATNr)) then begin
    CUr.Code = IVr.CustCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      vatnr = CUr.VATNr;   
    end;   
  end else begin
    vatnr = IVr.VATNr;      
  end;

  BlockLoad(CIb);
  if (nonblank(CIb.ReplaceVATNr)) then begin
    if (CIb.ReplaceVATNr==vatnr) then begin
      vatnr = CIb.ReplaceVATNrWith;
    end;
  end;
  vVals["F_KUNDMOMSNR2"] = vatnr;

  return;
end;

global
procedure Ext_PrintCustomInvoiceRowFields(var vector string vVals,record IVVc IVr,row IVVc IVrw,Integer rowno,string strnum)
begin
  record VATCodeBlock VATb;
  row VATCodeBlock VATbrw;
  record TaxRulesVc TRr;
  record NotePadVc Noter;
  record RLinkVc RLr;
  Longint pos,l;
  string 255 tstr;
  record LangNrVc LangNrr;
  record SysFormatBlock SFb;

  BlockLoad(SFb);
  BlockLoad(VATb);

  //vVals["ROW_" & strnum & "_F_ROWNAME"] = 
  if (IVrw.stp==kInvoiceRowTypeNormal) then begin
    FindVATCodeRow(IVrw.VATCode,VATb,VATbrw);
    if (nonblank(VATbrw.TaxRules)) then begin
      TRr.Code = VATbrw.TaxRules;
      if (ReadFirstMain(TRr,1,true)) then begin
        if (ReadRecordLink(TRr,1,Noter,RLr)) begin
          pos = 0;
          l = SizeTextCnt(Noter);
          tstr = "";
          while (pos<l) begin
            tstr = tstr & StringFromText(Noter,pos,255);
            pos = pos + 255;
          end;
          vVals["ROW_" & strnum & "_F_TAXRULEROW"] = StrReplace(tstr,chr(13),"\\n");
        end;
      end;
    end;
  end;
  if (IVrw.stp==kInvoiceRowTypeNormal) then begin
    Ext_PrintValueInclZero(vVals,"ROW_" & strnum & "_F_ANTAL3",IVrw.Quant,M4UVal,LangNrr,SFb,false);
  end;

  return;
end;


procedure AddSingleRecipient(var record MailVc Mailr,string email)
begin
  row MailVc Mailrw;
  Integer i,rwcnt;
  Boolean foundf;
  
  if (nonblank(email)) then begin 
    rwcnt = MatRowCnt(Mailr);
    for (i=1;i<rwcnt;i=i+1) begin
      MatRowGet(Mailr,i,Mailrw);
      if (Mailrw.AddrCode==email) then begin
        foundf = true;
        i = rwcnt;
      end;
    end;
    if (!foundf) then begin
      ClearRow(Mailr,Mailrw,1);
      Mailrw.RowTyp = 0;
      Mailrw.AddrCode = email;
      MatRowPut(Mailr,MatRowCnt(Mailr),Mailrw);
    end;
  end; 

  return;
end;

procedure AddContactsByJobDescription(record MailVc Mailr,record CUVc CUr,string jobdescr)
begin
  record CUVc ContactCUr;
  record ContactRelVc CRr;
  while (LoopKey("CustContactCode:" & CUr.Code,CRr,1,true)) begin
    if (CRr.Invalid==0) then begin
      ContactCUr.Code = CRr.ContactCode;
      if (ReadFirstMain(ContactCUr,1,true)) then begin
        if (SetInSet(ContactCUr.JobDesc,jobdescr)) then begin
          AddSingleRecipient(Mailr,ContactCUr.eMail);
        end;
      end;
    end;
  end;

  return;
end;

function Boolean CompanyHasNoMainContact(record CUVc CUr)
begin
  record ContactRelVc CRr;
  Boolean res;

  res = false;
  if (blank(CUr.Person)) then begin
    res = true;
  end;

  CompanyHasNoMainContact = res;
  return;
end;

global
function Boolean Ext_AddCustomMailRecipients(record IVVc IVr,var record MailVc Mailr)
begin
  record CMInvoicingBlock CIb;
  record CUVc CUr;
  record CUVc ContactCUr;
  Boolean res;

  BlockLoad(CIb);
  CUr.Code = IVr.CustCode;
  ReadFirstMain(CUr,1,true);

  if (CIb.SendToMainContact==1) then begin
    if (nonblank(CUr.Person)) then begin
      if (FindCustomerRelation(CUr.Code,CUr.Person,ContactCUr)) then begin
        if (nonblank(ContactCUr.eMail)) then begin
          AddSingleRecipient(Mailr,ContactCUr.eMail);
          res = true;
        end;
      end;
    end;
  end;
  if (CIb.SendToCompany==1) then begin
    if (CIb.SendToCompNoContact==0 or CompanyHasNoMainContact(CUr)) then begin
      AddSingleRecipient(Mailr,Cur.eMail);
      res = true;
    end;
  end;
  if (CIb.SendToAddRecip==1) then begin
    AddEMailRecipients(Mailr,CUr.Code,"",kMailInvoice); 
    res = true;
  end;
  if (nonblank(CIb.SendToJobDescr)) then begin
    AddContactsByJobDescription(Mailr,CUr,CIb.SendToJobDescr);
    res = true;
  end;
  Ext_AddCustomMailRecipients = res;
  return;
end;