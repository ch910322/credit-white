//<halrule>server-only</halrule>
external procedure ExternalPrintLoanAppForm(record B2BLoanApplicationVc,var vector string);
external procedure ExternalPrintSuretyAppForm(record B2BLoanApplicationVc,var vector string);
external procedure ExternalPrintCredManForm(record CredManVc,var vector string);
external procedure ExternalPrintCredManScheduleForm(record CredManVc,var vector string);
external procedure ExternalPrintVekselisForm(record CredManVc,var vector string);
external procedure ExternalPrintSuretyAgreementForm(record CredManVc,var vector string);
external procedure ExternalBuyoutSummaryForm(record CredManVc,record RcVc,var vector string);
external inner function string 255 CredManOwnBankAccount(Longint,var string,var string,var string);
external inner procedure FindVATCodeRow(string,record VATCodeBlock,var row VATCodeBlock);
external inner function string 255 StrReplace(string,string,string);
external function val GetCredManItemValue(record IVVc,string,Boolean);
external inner procedure InvVat(Integer,Integer,Integer,Integer,string,val,var val,var val,var val,var val,var val);
external inner function boolean AddEMailRecipients(var record MailVc,string,string,integer);
external inner function Boolean FindCustomerRelation(string,string,var record CUVc);
external inner procedure ValToText(val,Integer,string,string,var string);
external inner procedure Ext_PrintValueInclZero(var vector string,string,val,Integer,record LangNrVc,record SysFormatBlock,Boolean);
external function val GetContactTotalPaidAmount(record CredManVc);
external inner procedure CustAged(record CUVc,Date,Date,Date,var val,var val,var val,var val,var val,var val,var val,var val,var val,var val,boolean);
external inner procedure GetOnAccBalance(record RcVc,string,string,Boolean,Integer,var val,var val,var val,var val,var val,var val,var val,record SMVc,
                   Array string,Array val,var Integer);
external inner  procedure GetMonthText(string,Date,var string);
external inner procedure StripLeadingSpaces(var string);
external inner procedure StripEndingSpaces(var string);
external function Boolean InvoiceHasHiddenLine(record IVVc);
external inner procedure OneARSFormOpenOnDate(record RcVc,record CUVc,Integer,var val,var Integer,var Integer);
external procedure GetCredManChangePurpose(record CredManVc,var vector string);
external function val GetCredHistOpenValueOnDate(Longint,Date);
external function boolean getAdditionalLangCode(record CredManVc,string,var string);
external function string 20 getAdditionalCredManLangCode(record CredManVc);

global
procedure OuterPrintEBSDocument(string docname,string id,var Boolean printf,record RcVc RepSpec,var vector string vVals)
begin
  record CredManVc CredManr;
  record B2BLoanApplicationVc LAr;

  switch (docname) begin
    case "LoanAppForm":
      LAr.SerNr = StringToLongint(id);
      printf = (ReadFirstMain(LAr,1,true) or id=="-2");
      if (printf) then begin
        vVals["SPEC_CUSTCODE"] = RepSpec.f10;
        ExternalPrintLoanAppForm(LAr,vVals);
      end;
    case "SuretyApplicationForm":
      LAr.SerNr = StringToLongint(id);
      printf = (ReadFirstMain(LAr,1,true) or id=="-2");
      if (id=="-2") then begin
        LAr.SuretyCnt = 1;
      end;
      if (printf) then begin
        ExternalPrintSuretyAppForm(LAr,vVals);
      end;
    case "CredManForm":
      CredManr.SerNr = StringToLongint(id);
      printf = (ReadFirstMain(CredManr,1,true) or id=="-2");
      if (printf) then begin
        ExternalPrintCredManForm(CredManr,vVals);
      end;
    case "CredManScheduleForm":
      CredManr.SerNr = StringToLongint(id);
      printf = (ReadFirstMain(CredManr,1,true) or id=="-2");
      if (printf) then begin
        ExternalPrintCredManScheduleForm(CredManr,vVals);
      end;
    case "SuretyAgreementForm":
      CredManr.SerNr = StringToLongint(id);
      printf = (ReadFirstMain(CredManr,1,true) or id=="-2");
      if (printf) then begin
        ExternalPrintSuretyAgreementForm(CredManr,vVals)
      end;
    case "VekselisForm":
      CredManr.SerNr = StringToLongint(id);
      printf = (ReadFirstMain(CredManr,1,true) or id=="-2");
      if (printf) then begin
        ExternalPrintVekselisForm(CredManr,vVals);
      end;
    case "BuyoutSummaryForm":
      CredManr.SerNr = StringToLongint(id);
      printf = (ReadFirstMain(CredManr,1,true) or id=="-2");
      if (printf) then begin
        ExternalBuyoutSummaryForm(CredManr,RepSpec,vVals);
      end;

  end;

  return;
end;

global
procedure Ext_PrintDocumentSigner(var vector string vVals)
begin
  record CMApplicationSetBlock ASb;
  record UserVc Userr;
  
  BlockLoad(ASb);
  Userr.Code = ASb.DocumentSigner;
  if (ReadFIrstMain(Userr,1,true)) then begin
    vVals["F_DOCUMENTSIGNERNAME"] = Userr.Name;
    vVals["F_DOCUMENTSIGNERPOSITION"] = ASb.DocumentSignerPosition;
    vVals["F_DOCUMENTSIGNERCODE"] = Userr.Code;
    vVals["F_DOCUMENTSIGNEREMAIL"] = Userr.emailAddr;
    vVals["F_DOCUMENTSIGNERPHONE"] = Userr.Phone1;
  end;

  return;
end;


global
procedure Ext_PrintInvoiceSigner(var vector string vVals)
begin
  record CMApplicationSetBlock ASb;
  record UserVc Userr;
  
  BlockLoad(ASb);
  Userr.Code = ASb.InvoiceSigner;
  if (ReadFIrstMain(Userr,1,true)) then begin
    vVals["F_INVOICESIGNERNAME"] = Userr.Name;
    vVals["F_INVOICESIGNERPOSITION"] = ASb.DocumentSignerPosition;
    vVals["F_INVOICESIGNERCODE"] = Userr.Code;
  end;

  return;
end;

global
procedure ExtPrintOwnBankDetails(var vector string vVals,Longint credmannr)
begin
  string 255 bankacc,bankname,bankbic,bankcode;

  bankacc = CredManOwnBankAccount(credmannr,bankname,bankbic,bankcode);
  vVals["F_CUSTOWNBANKACC"] = bankacc;
  vVals["F_CUSTOWNBANKNAME"] = bankname;
  vVals["F_CUSTOWNBANKBIC"] = bankbic;
  vVals["F_CUSTOWNBANKIDCODE"] = bankcode;
 
  return;
end;

global
function string 255 GetCredManNr(Longint sernr)
begin
  record CredManVc CredManr;
  string 255 res;

  res = sernr;
  CredManr.SerNr = sernr;
  if (ReadFirstMain(CredManr,1,true)) then begin
    if (nonblank(CredManr.OfficialSerNr)) then begin
      res = CredManr.OfficialSerNr;
    end;
  end;

  GetCredManNr = res;
  return;
end;

global
procedure GetHiddenInvoiceValues(record IVVc IVr,var val abovehiddenbase,var val abovehiddenvat)
begin
  Integer i,rwcnt;
  row IVVc IVrw;
  val rowbase;
  val vatprc,vatval,vatexclprc,vatinclprc,rowtax;
  
  abovehiddenvat = 0;
  abovehiddenbase = 0;
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    if (IVrw.stp==kInvoiceRowTypeHidden) then begin
      i = rwcnt;
    end else begin
      if (IVrw.stp==kInvoiceRowTypeNormal) then begin
        InvVat(1,IVr.InclVAT,IVr.NoTAXonVAT,IVr.ExportFlag,IVrw.VATCode,IVrw.Sum,vatprc,vatval,vatexclprc,vatinclprc,rowtax);

        if (IVr.InclVAT==0) then begin
          rowbase = IVrw.Sum;
        end else begin
          rowbase = IVrw.Sum - vatval;
        end;

        abovehiddenvat = abovehiddenvat + vatval;
        abovehiddenbase = abovehiddenbase + rowbase;
      end;
    end;
  end;

  return;
end;

global
function val GetCustomerOpenAmount(string custcode,record IVVc IVr)
begin
  val res;
  record ARVc ARr;
  Boolean TrHs;
  record ARPayVc ARPayr;
  row IVVc IVrw;
  Integer i,rwcnt;

  TrHs = true;
  res = 0;
  ARr.CustCode = custcode;
  while (LoopKey("CustCode",ARr,1,TrHs)) begin
    if (ARr.CustCode!=custcode) then begin
      TrHs = false;
    end else begin
      if (ARr.RVal>0 and ARr.DueDate<CurrentDate) then begin
        res = res + ARr.RVal;
      end;
    end;
  end;
  
  TrHs = true;
  ARPayr.CustCode = custcode;
  while (LoopKey("CustCode",ARPayr,1,TrHs)) begin
    if (ARPayr.CustCode!=custcode) then begin
      TrHs = false;
    end else begin
      if (ARPayr.RVal>0) then begin
        res = res - ARPayr.RVal;
      end;
    end;
  end;

  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    if (IVrw.stp==kInvoiceRowTypePrepayment) then begin
      res = res - IVrw.Sum;
    end;
  end;

  GetCustomerOpenAmount = res;
  return;
end;


function val findOpenlateFeeInvoices(record IVVc origIVr)
begin  
  record ARVc ARr;
  record IVVc IVr;
  row IVVc IVrw;
  boolean TrHs,testf,TrHs1,testf1;
  val res;
  record CredManSetBlock CMb;
  integer i,rwcnt;
  record CredHistVc CredHistr,CredHist2r;
  val t,tt,tot1,tot2,tot3;
  longint t2;
  date blankd;
  string 255 tstr;
  
  blockload(CMb);
  
  if(nonblank(CMb.LateFeeItem))then begin
    ARr.CustCode = origIVr.CustCode;
    TrHs = true;
    while (LoopKey("CustCode",ARr,1,TrHs)) begin
      testf = true;
      if (TrHs) then begin
        if (origIVr.CustCode!=ARr.CustCode) then begin TrHs = false; end;
      end;
      if(ARr.InvoiceNr==origIVr.SerNr)then begin
        testf = false;
      end;
      
      if (TrHs==false) then begin testf = false; end;
      if (testf) then begin    
        IVr.SerNr = ARr.InvoiceNr;

        if(ReadFirstMain(IVr,1,true))then begin
          rwcnt = matrowcnt(IVr);
          for(i=0;i<rwcnt;i=i+1)begin
            matrowget(IVr,i,IVrw);
            if(IVrw.stp==kInvoiceRowTypeNormal)then begin
              if(IVrw.ArtCode==CMb.LateFeeItem)then begin
                
                resetloop(CredHistr);
                CredHistr.RecordNr = IVr.SerNr;
                CredHistr.RecordType = 0;
                TrHs1 = true;
                while (LoopKey("RecordNr",CredHistr,2,TrHs1)) begin
                  if ((CredHistr.RecordNr!=IVr.SerNr) or (CredHistr.RecordType!=0)) then begin
                    TrHs1 = false;
                  end;
                  if (TrHs1) then begin
                    t = GetCredHistOpenValueOnDate(CredHistr.SerNr,blankd);
                    tt = CredHistr.Sum-t;
                    if(CredHistr.ArtCode==CMb.LateFeeItem)then begin
                      res = res - tt;
                    end;
                  end;
                end;
                
                res = res + IVrw.Sum;
              end;
            end;
            if(IVrw.stp==kInvoiceRowTypeHidden)then begin
              i = rwcnt;
            end;
          end;
        end;
      
      end;
    end;  
  end;
  
  findOpenlateFeeInvoices = res;
  
return;
end;

procedure printHiddenStrings(record IVVc IVr, var vector string vVals)
begin
  integer i,rwcnt;
  row IVVc IVrw;
  boolean ishidden;
  
  rwcnt = matrowcnt(IVr);
  for(i=0;i<rwcnt;i=i+1)begin
    matrowget(IVr,i,IVrw);
    
    if(ishidden)then begin
      if(nonblank(IVrw.Spec))then begin
        vVals["F_HIDDENROWSSPEC"] = vVals["F_HIDDENROWSSPEC"] & IVrw.Spec  & "\\n";
      end;
    end;
    
    if(IVrw.stp==kInvoiceRowTypeHidden)then begin
      ishidden = true;
    end;
  end;
  
return;
end;

global
procedure Ext_PrintCustomInvoiceFields(var vector string vVals,record IVVc IVr)
begin
  record CredManSetBlock CMb;
  row IVVc IVrw;
  Integer i,rwcnt,j;
  val abovehiddenbase,abovehiddenvat,rowbase;
  record VATCodeBlock VATb;
  row VATCodeBlock VATbrw;
  record TaxRulesVc TRr;
  record NotePadVc Noter;
  record RLinkVc RLr;
  Longint pos,l;
  string 255 tstr;
  record CMInvoicingBlock CIb;
  string 255 vatnr,del,regnr;
  record CUVc CUr;
  record CredManVc CredManr;
  val topay2,topay3,openamount,openamount2,topay4;
  string 255 credivno;
  record IVVc IVCreditr;
  record UserVc Userr;
  Date bd,td;
  val ARSSumod,ARSsactod,ARSs0od,ARSs1od,ARSs16od,ARSs31od,ARSs61od,ARSs91od,ARSs121od,ARSs151od;
  record RcVc RepSpec;
  val ARSOnAccBal,ARSOnAccBalb1;
  record SMVc CurTotalsr;
  val sumbooked,sumnow,sumcurncy,sumdiff;
  Array val debbal;
  Integer debcnt,custcnt,invcnt;
  Array string 10 debaccs;
  val rval,rval2,tval,LateFeeItemSum,OpenLateFeeItemSum;
  record CMPrintConstantsBlock PCb;
  Boolean hiddenf;
  record ARVc ARr;

  Ext_PrintInvoiceSigner(vVals);

  ExtPrintOwnBankDetails(vVals,IVr.CustCredManNr);
  
  CUr.Code = IVr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin end;

  del = ":";
  BlockLoad(CIb);
  BlockLoad(CMb);
  if (nonblank(CIb.PeriodDelimiter)) then begin
    del = CIb.PeriodDelimiter;
  end;
  vVals["F_LOANPERIOD"] = IVr.CredFromDate & del & IVr.CredToDate;

  GetHiddenInvoiceValues(IVr,abovehiddenbase,abovehiddenvat);
  openamount = GetCustomerOpenAmount(IVr.CustCode,IVr);
  td = AddDay(IVr.InvDate,-1);
  //CustAged(CUr,td,bd,td,ARSSumod,ARSsactod,ARSs0od,ARSs1od,ARSs16od,ARSs31od,ARSs61od,ARSs91od,ARSs121od,ARSs151od,0);
  //GetOnAccBalance(RepSpec,CUr.Code,CUr.CurncyCode,false,0,ARSOnAccBalB1,rval2,ARSOnAccBal,sumbooked,sumnow,sumcurncy,sumdiff,CurTotalsr,debaccs,debbal,debcnt);//ObjStr
  RepSpec.d1 = td;
  OneARSFormOpenOnDate(RepSpec,CUr,2,ARSSumod,custcnt,invcnt);//Used this function to calc user balance

  //openamount2 = ARSSumod + ARSOnAccBal; //ARSSumod already included ARSOnAccBal
  openamount2 = ARSSumod;
  
  
  topay3 = openamount2;
  hiddenf = InvoiceHasHiddenLine(IVr);
  topay2 = openamount;
  if (IVr.PayDate>=CurrentDate) then begin
    topay2 = topay2 + abovehiddenbase + abovehiddenvat;
    if (hiddenf) then begin
      topay2 = topay2 + GetCredManItemValue(IVr,CMb.InstalmentItem,true);;
    end; 
  end;
  ARr.InvoiceNr = IVr.SerNr;
  if(readfirstmain(ARr,1,true))then begin
    if(ARr.BookRVal!=IVr.Sum4)then begin
      topay2 = (topay2 - (IVr.Sum4-ARr.BookRVal));
    end;
  end else begin
      topay2 = topay2 - IVr.Sum4;
  end;
  topay3 = topay3 + abovehiddenbase + abovehiddenvat;
  topay4 = topay3;
  if (hiddenf) then begin
    topay3 = topay3 + GetCredManItemValue(IVr,CMb.InstalmentItem,true);
  end; 
  if (topay2<0) then begin
    topay2 = 0;
  end;
  if (topay3<0) then begin
    topay3 = 0;
  end;
  if (topay4<0) then begin
    topay4 = 0;
  end;
  
  vVals["F_OPENAMOUNT"] = openamount;
  vVals["F_TOPAY2"] = topay2;
  ValToText(topay2,M4Val,IVr.CurncyCode,IVr.LangCode,tstr);
  vVals["F_TOPAY2_TEXT"] = tstr;

  GetMonthText(IVr.LangCode,td,tstr);
  vVals["F_LASTDAY"] = tstr & " " & GetDay(td);
  vVals["F_LASTDAY2"] = DateToString(td,"DD.MM.YYYY");
  vVals["F_OPENAMOUNT2"] = openamount2;
  vVals["F_TOPAY3"] = topay3;
  ValToText(topay3,M4Val,IVr.CurncyCode,IVr.LangCode,tstr);
  vVals["F_TOPAY3_TEXT"] = tstr;
  
  vVals["F_TOPAY4"] = topay4;
  ValToText(topay4,M4Val,IVr.CurncyCode,IVr.LangCode,tstr);
  vVals["F_TOPAY4_TEXT"] = tstr;


  vVals["F_ABOVEHIDDENBASE"] = abovehiddenbase;
  vVals["F_ABOVEHIDDENVAT"] = abovehiddenvat;
  if (IVr.InvType==kInvoiceRowTypeCredit) then begin
    vVals["F_ABOVEHIDDENFULL"] = -(abovehiddenbase + abovehiddenvat);
    ValToText(-(abovehiddenbase + abovehiddenvat),M4Val,IVr.CurncyCode,IVr.LangCode,tstr);
    vVals["F_ABOVEHIDDENFULLINWORDS"] = tstr;
  end else begin
    vVals["F_ABOVEHIDDENFULL"] = abovehiddenbase + abovehiddenvat;
    ValToText(abovehiddenbase + abovehiddenvat,M4Val,IVr.CurncyCode,IVr.LangCode,tstr);
    vVals["F_ABOVEHIDDENFULLINWORDS"] = tstr;
  end;
  vVals["F_NUMMER"] = GetCredManNr(IVr.CustCredManNr);
  CredManr.SerNr = IVr.CustCredManNr;
  if (ReadFirstMain(CredManr,1,true)) then begin
    vVals["F_CREDMANCREATEDATE"] = CredManr.TransDate;
    GetCredManChangePurpose(CredManr,vVals);
    if (nonblank(CredManr.DocumentSigner)) then begin
      Userr.Code = CredManr.SalesMan;
      if (ReadFirstMain(Userr,1,true)) then begin
        vVals["F_CREDMANDOCUMENTSIGNERNAME"] = Userr.Name;
        vVals["F_CREDMANDOCUMENTSIGNERJOB"] = Userr.Job;
      end;
    end;
  end;

  BlockLoad(CMb);
  vVals["F_PRINCVAL"] = GetCredManItemValue(IVr,CMb.InstalmentItem,true);

  rwcnt = MatRowCnt(IVr);
  BlockLoad(VATb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    if (IVrw.stp==kInvoiceRowTypeNormal) then begin
      if(nonblank(CMb.LateFeeItem))then begin
        if(IVrw.ArtCode==CMb.LateFeeItem)then begin
          LateFeeItemSum = LateFeeItemSum + IVrw.Sum;
        end;
      end;
      FindVATCodeRow(IVrw.VATCode,VATb,VATbrw);
      if (nonblank(VATbrw.TaxRules)) then begin
        TRr.Code = VATbrw.TaxRules;
        if (ReadFirstMain(TRr,1,true)) then begin
          if (ReadRecordLink(TRr,1,Noter,RLr)) begin
/*
            pos = 0;
            l = SizeTextCnt(Noter);
            tstr = "";
            while (pos<l) begin
              tstr = tstr & StringFromText(Noter,pos,255);
              pos = pos + 255;
            end;
*/          
            tstr = "";
            for (j=0;j<LineTextCnt2(Noter);j=j+1) begin
              tstr = tstr & LineTextGet2(Noter,j);
            end;

            vVals["F_TAXRULE"] = StrReplace(tstr,chr(13),"\\n");
            //i = rwcnt;
          end;
        end;
      end;
    end;
    if (IVrw.stp==kInvoiceRowTypeCredit) then begin
      credivno = IVrw.OrdRow;
      IVCreditr.SerNr = IVrw.OrdRow;
      if (ReadFirstMain(IVCreditr,1,true)) then begin  
        if (nonblank(IVCreditr.OfficialSerNr)) then begin
          credivno = IVCreditr.OfficialSerNr;
        end;
      end;
    end;
  end;
  
  if(LateFeeItemSum!=0)then begin
    vVals["F_LATEFEEITEMSUM"] = LateFeeItemSum;
  end else begin
    vVals["F_LATEFEEITEMSUM"] = "0,00";
  end;
  
  OpenLateFeeItemSum = findOpenlateFeeInvoices(IVr);
  if(OpenLateFeeItemSum!=0)then begin
    vVals["F_OPENLATEFEEITEMSUM"] = OpenLateFeeItemSum;
  end else begin
    vVals["F_OPENLATEFEEITEMSUM"] = "0,00";
  end;

  vVals["F_CREDITIVNO"] = credivno;

  Userr.Code = CredManr.SalesMan;
  if (ReadFirstMain(Userr,1,true)) then begin
    vVals["F_SALESMANNAME"] = Userr.Name;
    vVals["F_SALESMANJOB"] = Userr.Job;
  end;

  
  if (blank(IVr.VATNr)) then begin
    vatnr = CUr.VATNr;   
  end else begin
    vatnr = IVr.VATNr;      
  end;
  BlockLoad(PCb);
  if (CUr.CustType==0) then begin
    regnr = CUr.RegNr1;
    vVals["F_REGNRCOMMENT"] = PCb.RegNrComment;
  end;
  BlockLoad(CIb);
  if (nonblank(CIb.ReplaceVATNr)) then begin
    if (CIb.ReplaceVATNr==vatnr) then begin
      vatnr = CIb.ReplaceVATNrWith;
    end;
  end;
  if (CredManr.SerNr>0) then begin
    tval = GetContactTotalPaidAmount(CredManr);
    vVals["F_TOTALBRUTO"] = tval;
    ValToText(tval,M4Val,CredManr.CurncyCode,getAdditionalCredManLangCode(CredManr),tstr);
    vVals["F_TOTALBRUTOINTEXT"] = tstr;
  end;
  vVals["F_KUNDMOMSNR2"] = vatnr;
  vVals["F_COMPREGNR"] = regnr;
   
  if (IVr.ManualInvoice==1) then begin
    vVals["F_NETTINGTEXT"] = PCb.InvoiceText;
  end;
  printHiddenStrings(IVr,vVals);

  return;
end;

global
procedure Ext_PrintCustomInvoiceRowFields(var vector string vVals,record IVVc IVr,row IVVc IVrw,Integer rowno,string strnum)
begin
  record VATCodeBlock VATb;
  row VATCodeBlock VATbrw;
  record TaxRulesVc TRr;
  record NotePadVc Noter;
  record RLinkVc RLr;
  Longint pos,l;
  string 255 tstr;
  record LangNrVc LangNrr;
  record SysFormatBlock SFb;

  BlockLoad(SFb);
  BlockLoad(VATb);

  //vVals["ROW_" & strnum & "_F_ROWNAME"] = 
  if (IVrw.stp==kInvoiceRowTypeNormal) then begin
    FindVATCodeRow(IVrw.VATCode,VATb,VATbrw);
    if (nonblank(VATbrw.TaxRules)) then begin
      TRr.Code = VATbrw.TaxRules;
      if (ReadFirstMain(TRr,1,true)) then begin
        if (ReadRecordLink(TRr,1,Noter,RLr)) begin
          pos = 0;
          l = SizeTextCnt(Noter);
          tstr = "";
          while (pos<l) begin
            tstr = tstr & StringFromText(Noter,pos,255);
            pos = pos + 255;
          end;
          vVals["ROW_" & strnum & "_F_TAXRULEROW"] = StrReplace(tstr,chr(13),"\\n");
        end;
      end;
    end;
  end;
  if (IVrw.stp==kInvoiceRowTypeNormal) then begin
    Ext_PrintValueInclZero(vVals,"ROW_" & strnum & "_F_ANTAL3",IVrw.Quant,M4UVal,LangNrr,SFb,false);
  end;

  return;
end;


procedure AddSingleRecipient(var record MailVc Mailr,string email)
begin
  row MailVc Mailrw;
  Integer i,rwcnt;
  Boolean foundf;
  
  if (nonblank(email)) then begin 
    rwcnt = MatRowCnt(Mailr);
    for (i=1;i<rwcnt;i=i+1) begin
      MatRowGet(Mailr,i,Mailrw);
      if (Mailrw.AddrCode==email) then begin
        foundf = true;
        i = rwcnt;
      end;
    end;
    if (!foundf) then begin
      ClearRow(Mailr,Mailrw,1);
      Mailrw.RowTyp = 0;
      Mailrw.AddrCode = email;
      MatRowPut(Mailr,MatRowCnt(Mailr),Mailrw);
    end;
  end; 

  return;
end;

procedure AddContactsByJobDescription(record MailVc Mailr,record CUVc CUr,string jobdescr)
begin
  record CUVc ContactCUr;
  record ContactRelVc CRr;
  while (LoopKey("CustContactCode:" & CUr.Code,CRr,1,true)) begin
    if (CRr.Invalid==0) then begin
      ContactCUr.Code = CRr.ContactCode;
      if (ReadFirstMain(ContactCUr,1,true)) then begin
        if(nonblank(ContactCUr.JobDesc))then begin
          if (SetInSet(ContactCUr.JobDesc,jobdescr)) then begin
            AddSingleRecipient(Mailr,ContactCUr.eMail);
          end;
        end;
      end;
    end;
  end;

  return;
end;

function Boolean CompanyHasNoMainContact(record CUVc CUr)
begin
  record ContactRelVc CRr;
  Boolean res;

  res = false;
  if (blank(CUr.Person)) then begin
    res = true;
  end;

  CompanyHasNoMainContact = res;
  return;
end;

procedure RemoveDuplicateRecipients(var record MailVc Mailr)
begin
  row MailVc Mailrw,Mail2rw;
  Integer i,j,rwcnt;

  rwcnt = MatRowCnt(Mailr);
  for (i=1;i<rwcnt;i=i+1) begin
    MatRowGet(Mailr,i,Mailrw);
    for (j=i+1;j<rwcnt;j=j+1) begin
      MatRowGet(Mailr,j,Mail2rw);
      if (Mail2rw.AddrCode==Mailrw.AddrCode) then begin
        MatRowDelete(Mailr,j);
        j = j - 1;
        rwcnt = rwcnt -1;
      end;
    end;
  end;

  return;
end;

global
function Boolean Ext_AddCustomMailRecipients(record IVVc IVr,var record MailVc Mailr)
begin
  record CMInvoicingBlock CIb;
  record CUVc CUr;
  record CUVc ContactCUr;
  Boolean res;

  BlockLoad(CIb);
  CUr.Code = IVr.CustCode;
  ReadFirstMain(CUr,1,true);

  if (CIb.SendToMainContact==1) then begin
    if (nonblank(CUr.Person)) then begin
      if (FindCustomerRelation(CUr.Code,CUr.Person,ContactCUr)) then begin
        if (nonblank(ContactCUr.eMail)) then begin
          AddSingleRecipient(Mailr,ContactCUr.eMail);
          res = true;
        end;
      end;
    end;
  end;
  if (CIb.SendToCompany==1) then begin
    if (CIb.SendToCompNoContact==0 or CompanyHasNoMainContact(CUr)) then begin
      AddSingleRecipient(Mailr,Cur.eMail);
      res = true;
    end;
  end;
  if (CIb.SendToAddRecip==1) then begin
    AddEMailRecipients(Mailr,CUr.Code,"",kMailInvoice); 
    res = true;
  end;
  if (nonblank(CIb.SendToJobDescr)) then begin
    AddContactsByJobDescription(Mailr,CUr,CIb.SendToJobDescr);
    res = true;
  end;

  RemoveDuplicateRecipients(Mailr);

  Ext_AddCustomMailRecipients = res;
  return;
end;

global
function string 255 DateInWords(Date td,string langcode,Integer type)
begin
  string 255 yearstr,yearstr2,res;
  Integer pos;
  string 255 daystr,monthstr,yl,yc,ml,mc,dl,dc,ylmin;
  record CMDateTextBlock DTb;
  Boolean foundf;
  Longint tmp,pos2;
  string 255 tres,tstr;

  BlockLoad(DTb);
  yl = GetFieldValueByName(DTb,"YearLang" & type,-1);
  ylmin = GetFieldValueByName(DTb,"YearLangMin" & type,-1);
  yc = GetFieldValueByName(DTb,"YearCur" & type,-1);
  ml = GetFieldValueByName(DTb,"MonthLang" & type,-1);
  mc = GetFieldValueByName(DTb,"MonthCur" & type,-1);
  dl = GetFieldValueByName(DTb,"DayLang" & type,-1);
  dc = GetFieldValueByName(DTb,"DayCur" & type,-1);

  if (nonblank(yl) and nonblank(yc)) then begin
    tmp = GetYear(td);
    tmp = tmp/100*100;
    ValToText(tmp,M4Val,mc,yl,yearstr);
    ValToText(GetYear(td)-tmp,M4Val,yc,ylmin,yearstr2);
    ValToText(GetMonth(td),M4Val,mc,ml,monthstr);
    ValToText(GetDay(td),M4Val,dc,dl,daystr);
    tres = LowerCase(yearstr) & LowerCase(yearstr2) & LowerCase(monthstr) & LowerCase(daystr);
    foundf = true;
    while (GetNextSubString(tres,pos2," ",tstr)) begin
      if (nonblank(tstr)) then begin
        if (nonblank(res)) then begin
          res = res & " ";
        end;
        res = res & tstr;
      end;
    end;
  end;


  if (!foundf) then begin
    ValToText(GetYear(td),M4Int,"",langcode,yearstr);
    pos = InString(yearstr,"Eur");
    if (pos>0) then begin
      yearstr = left(yearstr,pos-2);
    end;
    res = yearstr & " " & USetStr(22780 + GetMonth(td)) & " " & GetDay(td) & " " & LowerCase(USetStr(38471));
  end;

  DateInWords = res;
  return;
end;

global
function string 255 AgreementValToText(val tval)
begin
  Integer intval;
  val decval;
  string 255 res,intstr,decstr;
  record CMPrintConstantsBlock PCb;
  record LangNrVc LangNrr;
  
  BlockLoad(PCb);
  LangNrr.LangCode = PCb.FullValText;
  ReadFirstMain(LangNrr,1,true);
  intval = tval;
  if (intval>0) then begin
    ValToText(intval,M4Int,PCb.ValCrncyCode,PCb.FullValText,intstr);
    res = intstr;
  end;
  decval = (tval - intval) * 100;

  if (decval>0) then begin
    ValToText(decval,M4Int,PCb.ValCrncyCode,PCb.DecValText,decstr);
    if (nonblank(res)) then begin
      res = res & LangNrr.DeciPart & " ";
    end;
    res = res & decstr;
  end;

  res = StrReplace(res,"  "," ");
  res = StrReplace(res,"  "," ");
  StripLeadingSpaces(res);
  StripEndingSpaces(res);

  AgreementValToText = res;
  return;
end;