external inner function val ValFromString(string,string,string);
external inner function Date DateFromString(string,string);
external inner updating function Boolean AddContactCUDsmRemote(record CUVc,string);
external inner function Boolean GetNextCustNr(var string);
external inner updating function LongInt CUVcRecordUpdate(var record CUVc,record CUVc,LongInt,LongInt);
external function Boolean CheckIfCompanyInfoAvailable(string,string,var array Date,var array val,var array Integer,var array Longint);
external function Boolean GetExistingCompanyInfo(string,string,Longint,var area);
external procedure SendCompanyInfo(string,string,Integer,var area);
external procedure CreditInfoFileAsignB2BLoanApplicationVc(var record B2BLoanApplicationVc,xml,xml,xml,xml);
external procedure CreditInfoFileAsignCUVc(var record CUVc,xml,xml,xml);

function Integer YearDiff(Date d1,Date d2)
begin
  Integer res;

  if (d2>d1) then begin
    res = d2.year-d1.year;
    if (d2.month<d1.month) then begin
      res = res - 1;
    end else begin
      if (d2.month==d1.month) then begin
        if (d2.day<d1.day) then begin
          res = res - 1;
        end;
      end;
    end;
  end;

  YearDiff = res;
  return;
end;

function string 2 ReplaceStrings(string tstr,string realstr,var integer movep)
begin
  string 2 res;

  res = realstr;
  movep = 1;

  if left(tstr,4)=="&lt;" then begin
    res = "<";
    movep = 4;
  end;
  if left(tstr,4)=="&gt;" then begin
    res = ">";
    movep = 4;
  end;
  if left(tstr,6)=="&apos;" then begin
    res = "'";
    movep = 6;
  end;
  if left(tstr,6)=="&quot;" then begin
    res = """";
    movep = 6;
  end;

  ReplaceStrings = res;
  return;
end;

function string 255 ReplaceWebStrings(string rstr)
begin
  longint ln,i;
  string 10 tstr,tmp;
  integer movep;
  string 255 res;

  i = 0;
  while (i < len(rstr)) begin
    tmp = mid(rstr,i,1);
    tstr = mid(rstr,i,6);
    tmp = ReplaceStrings(tstr,tmp,movep);
    res = res & tmp;
    i = i + movep;
  end;

  ReplaceWebStrings = res;
  return;
end;

global
updating procedure TreatCreditInfoReply(var record B2BLoanApplicationVc LAr,var record CUVc CUr,area reply,area replyspdr,area replyfs2,area replyfs,var Integer res)
begin
  Boolean debugf;
  string 255 lang,params,url,path,root,tstr,fn,name,surname,datestr,datestr1,datestr2;
  record CUVc oldCUr,tCUr;
  Date courtdate,td,enddate,maxdate;
  Longint pos;
  row B2BLoanApplicationVc LArw;
  Integer i;
  record ContactRelVc CRr;
  record CMApplicationSetBlock ASb;
  string 255 lastcode,lastname;
  xml axml,axmlspdr,axmlFS,axmlFSlist;
  record CreditinfoFieldAssignBlock CIAb;
  boolean newCIsettig;


  BlockLoad(ASb);
  blockload(CIAb);
  if(matrowcnt(CIAb)>0)then begin
    newCIsettig = true;
  end;
  RecordCopy(oldCUr,CUr);
    
  res = 1;
  axml = ParseXmlArea(reply);
  axmlspdr = ParseXmlArea(replyspdr);
  axmlFS = ParseXmlArea(replyfs2);
  axmlFSlist = ParseXmlArea(replyfs);
  
  if(newCIsettig==false)then begin 
    root = "root/BasicInfo";
    if (nonblank(XmlGet(axml,root & "/Registered"))) then begin
      LAr.Established = DateFromString(XmlGet(axml,root & "/Registered"),"YYYY.MM.DD");
      CUr.BirthDate = LAr.Established;
    end;
    LAr.CEORep = XmlGet(axml,root & "/Atstovavimas");
    CUr.Region = XmlGet(axml,root & "/Region");
    root = "root/BankruptcyInfo/tr";
    if (XmlCountChildren(axml,root)>0) then begin
      LAr.BankruptcyFlag = 1;
      //lets take the first row now.
      tstr = XmlGetAttribute(axml,root & "[0]","CourtDate");
      if (nonblank(tstr)) then begin
        courtdate = DateFromString(tstr,"YYYY.MM.DD");
        if (courtdate>CurrentDate) then begin
          LAr.OngoingCourtCases = 1;
        end else begin
          LAr.HistoricalCourtCases = 1;
        end;
      end;
      if (nonblank(XmlGetAttribute(axml,root & "[0]","NutarimasLikviduoti"))) then begin
        LAr.LiquidationFlag = 1;
      end;
    end;
    
    root = "root/Capital/tr";
    LAr.Equity = ValFromString(XmlGetAttribute(axml,root & "[0]","IstatKap"),","," ");
    LAr.CapitalCurncyCode = XmlGetAttribute(axml,root & "[0]","Valiuta");
    root = "root/SpaudosPranesimai/SpaudosInformacijaNera";
    if (XmlNodeExists(axml,root)) then begin
      LAr.Publicity = 0;
    end else begin
      LAr.Publicity = 1;
    end;
    root = "root/Teismai/TeismaiNera";
    if (XmlNodeExists(axml,root)) then begin
      LAr.BeingSued = 0;
    end else begin
      LAr.BeingSued = 1;
    end;
    LAr.DebtCollections = 0;
    root = "root/PretenzijosBendraInfo/PretenzijosBendraInfoPretenzijuNeraText";
    if (XmlNodeExists(axml,root)==false) then begin
      LAr.DebtCollections = 1;
    end;
    root = "root/Vekseliai/VekseliaiNeraInfo";
    if (XmlNodeExists(axml,root)==false) then begin
      LAr.DebtCollections = 1;
    end;
    root = "root/NepatikimiBendraInfo/NepatikimiBendraInfoDuomenuNeraText";
    if (XmlNodeExists(axml,root)) then begin
      LAr.UnreliableComp = 0;
    end else begin
      LAr.UnreliableComp = 1;
    end;
    root = "root/TurtoArestaiIreg/TurtoArestaiInfoNera";
    if (XmlNodeExists(axml,root)) then begin
      LAr.OngoingAssetArrests = 0;
    end else begin
      LAr.OngoingAssetArrests = 1;
    end;
    root = "root/TurtoArestaiIsreg/TurtoArestaiInfoNera";
    if (XmlNodeExists(axml,root)) then begin
      LAr.HistoricalAssetArrests = 0;
    end else begin
      LAr.HistoricalAssetArrests = 1;
    end;
    root = "root/IkeitimasAndTARInfo/IkeitimasAndTARInfoNera";
    if (XmlNodeExists(axml,root)) then begin
      LAr.HistoricalAssetArrests = 0;
    end else begin
      LAr.HistoricalAssetArrests = 1;
    end;

    //3.26
    root = "root/SkolosBendraInfoLastDate/tr";
    if (XmlNodeExists(axml,root)) then begin
      LAr.LastRepaymentDate = DateFromString(XmlGetAttribute(axml,root,"SkolosBendraInfoLastDate"),"YYYY.MM.DD");
    end;

    //3.27
    i = 0;
    root = "root/Debts2/tr";
    while (XmlNodeExists(axml,root & "[" & i & "]")) begin
      i = i + 1;
      ClearRow(LAr,LArw,1);
      LArw.ClaimDate = DateFromString(XmlGetAttribute(axml,root & "[" & i & "]","Date"),"YYYY.MM.DD");
      LArw.CreditorName = XmlGetAttribute(axml,root & "[" & i & "]","CreditorName");
      LArw.CreditAmount = ValFromString(XmlGetAttribute(axml,root & "[" & i & "]","Amount"),","," ");
      if (nonblank(LArw.CreditAmount)) then begin
        MatRowPut(LAr,MatRowCnt(LAr),LArw);
        LAr.CurrentDebts = LAr.CurrentDebts + LArw.CreditAmount;
      end;
    end;

    //3.29
    i = 0;
    root = "root/Debts2History/tr";
    while (XmlNodeExists(axml,root & "[" & i & "]")) begin
      i = i + 1;
      ClearRow(LAr,LArw,1);
      pos = -1;
      datestr = XmlGetAttribute(axml,root & "[" & i & "]","Date");
      GetNextSubstring(datestr,pos,"/",datestr1);
      GetNextSubstring(datestr,pos,"/",datestr2);
      LArw.ClaimDate = DateFromString(datestr1,"YYYY.MM.DD");
      LArw.PaymentDate = DateFromString(datestr2,"YYYY.MM.DD");
      LArw.CreditorName = ReplaceWebStrings(XmlGetAttribute(axml,root & "[" & i & "]","CreditorName"));
      LArw.CreditAmount = ValFromString(XmlGetAttribute(axml,root & "[" & i & "]","Amount"),","," ");
      if (nonblank(LArw.CreditAmount)) then begin
        MatRowPut(LAr,MatRowCnt(LAr),LArw);
      end;
    end;

    //3.31
    root = "root/SodraSkolos/SodraSkolosInfo";
    if (XmlNodeExists(axml,root)) then begin
      LAr.CurrentDebts = ValFromString(XmlGetAttribute(axml,root,"suma"),","," ");
    end;

    //3.32
    root = "root/JARAtaskaitos/JARAtaskaitosInfoSvarbuText";
    if (XmlNodeExists(axml,root)) then begin
      LAr.AvailableFinStatements = 0;
    end else begin
      LAr.AvailableFinStatements = 1;
    end;

    i = 0;
    root = "root/SHAREHOLDERS/Table";
    while (XmlNodeExists(axml,root & "[" & i & "]")) begin
      i = i + 1;
      name = XmlGet(axml,root & "[" & i & "]/FirstNameLT");
      surname = XmlGet(axml,root & "[" & i & "]/SurNameLT");
      td = DateFromString(XmlGet(axml,root & "[" & i & "]/date"),"YYYY.MM.DD");
      enddate = DateFromString(XmlGet(axml,root & "[" & i & "]/date_to"),"YYYY.MM.DD");
      if (td>maxdate) then begin
        maxdate = td;
      end;
      if (blank(enddate)) then begin
        tCUr.Name = name & " " & surname;
        if (ReadFirstKey("Name",tCUr,1,true)) then begin
          CRr.CustCode = CUr.Code;
          CRr.ContactCode = tCUr.Code;
          if (ReadFirstMain(CRr,2,true)==false) then begin
            AddContactCUDsmRemote(CUr,tCur.Code);
          end;
        end else begin
          RecordNew(tCUr);
          GetNextCustNr(tstr);
          tCUr.Code = tstr;
          tCUr.Name = name & " " & surname;
          tCUr.JobDesc = ASb.OwnerTitle;
          if (RecordInsert(tCUr,true)) then begin
            AddContactCUDsmRemote(CUr,tCur.Code);
          end;
        end;
      end;
      lastcode = tCUr.Code;
      lastname = tCUr.Name;
    end;
    LAr.OwnershipChanges = 0;
    if (nonblank(td) and ASb.OwnershipYears>0) then begin
      if (YearDiff(td,CurrentDate)>=ASb.OwnershipYears) then begin
        LAr.OwnershipChanges = 1;
      end;
    end;
    if (blank(LAr.OwnerCustCode)) then begin
      LAr.OwnerCustCode = lastcode;
      LAr.OwnerName = lastname;
    end;

    //3.35.1
    root = "root/DraudimoSprendimas/tr";
    if (XmlNodeExists(axml,root)) then begin
      LAr.CreditinfoLimit = ValFromString(XmlGetAttribute(axml,root & "[0]","DraudimoSprindimasSuma"),","," ");
    end;

    root = "root/FinansiniaiImonesRodikliai/tr";
    if (XmlNodeExists(axml,root)) then begin
      LAr.PrevProfit = ValFromString(XmlGetAttribute(axml,root & "[0]","PNumber"),","," ");
      LAr.PrevReceivables = ValFromString(XmlGetAttribute(axml,root & "[0]","GSaNumber"),","," ");
      LAr.PrevPayables = ValFromString(XmlGetAttribute(axml,root & "[0]","MsaNumber"),","," ");
      LAr.PrevTotal = LAr.PrevReceivables-LAr.PrevPayables;
    end;
  end else begin
    CreditInfoFileAsignB2BLoanApplicationVc(LAr,axml,axmlspdr,axmlFS,axmlFSlist);// Edit ************************** BPI Ukraine - KramarAlexandr - 02, 15 06 2021 y. at 11:55:04 AM
    CreditInfoFileAsignCUVc(CUr,axml,axmlspdr,axmlFS);// Edit ************************** BPI Ukraine - KramarAlexandr - 02, 15 06 2021 y. at 11:55:04 AM
  end;
  RecordUpdate(oldCUr,CUr,false);
  CUVcRecordUpdate(CUr,oldCUr,Rs_Update,1);
  fn = CUr.RegNr1  & "_creditinfo.xml";
  WriteAreaToFile(reply,fn,0);
  RecordLinkFile(fn,0,LAr,CurrentCompany);
  Delete_File(fn);
  
  fn = CUr.RegNr1  & "_SpiderWeb.xml";
  WriteAreaToFile(replyspdr,fn,0);
  RecordLinkFile(fn,0,LAr,CurrentCompany);
  Delete_File(fn);
  
  fn = CUr.RegNr1  & "FS_List.xml";
  WriteAreaToFile(replyfs,fn,0);
  RecordLinkFile(fn,0,LAr,CurrentCompany);
  Delete_File(fn);
  
  fn = CUr.RegNr1  & "FS_Report.xml";
  WriteAreaToFile(replyfs2,fn,0);
  RecordLinkFile(fn,0,LAr,CurrentCompany);
  Delete_File(fn);
  
  
  
/*
  "/BasicInfo";
  //ManagersPersonalCodeValue,Registered,Atstovavimas,Region
  "/BankruptcyInfo";
  //CourtDate,Isk_data,NutarimasLikviduoti,NUTAR_SPREND_ISREG_DATA,Likvidavimas,Administrator,Admin,Court,Teismas
  "/Capital/Header/tr";
  //IstatKap,TvirData,Pavad,Valiuta
  "/SpaudosPranesimai/tr";
  //SpaudosInformacijaBendraInfoID,,SpaudosInformacijaBendraInfoText,SpaudosInformacijaIDText,SpaudosInformacijaID,SpaudosInformacijaDataText,SpaudosInformacijaData,SpaudosInformacijaTitleText,SpaudosInformacijaTitle
  "/Teismai";
  //TeismaiBendraInfoID,TeismaiBendraInfoText,TeismaiIDText,TeismaiID,TeismaiJarKodasText,TeismaiJarKodas,TeismaiPavadText,TeismaiPavad,TeismaiDataText,TeismaiData,TeismaiVadovasText,TeismaiVadovas,TeismaiKreditoriusText,TeismaiKreditorius,TeismaiSumaText,TeismaiSuma,TeismaiPastabosText,TeismaiPastabos
  "/TeismaiWeb/Header";
  //TeismaiDataBylosText,,TeismaiPavadinimasText,TeismaiDalyviaiText,TeismaiEsmeText
  "/TeismaiWeb/tr";
  //TeismaiData,TeismaiEsme,TeismaiTipas,TeismaiBylosNr,TeismaiPavadinimas,TeismaiDalyviai
  "/PretenzijosBendraInfo/tr";
  //PretenzijosBendraInfoID,PretenzijosBendraInfoText
  "/Pretenzijos/tr";
  "/Vekseliai/tr";
  "/NepatikimiBendraInfo/tr";
  "/TurtoArestaiIreg";
  "/TurtoArestaiIsreg";
  "/IkeitimasAndTARInfo";
  "/SkolosBendraInfo/tr";
  "/Debts2/tr";
  "/ApmoketosSkolosBendraInfo/tr";
  "/Debts2History/tr";
  "/VMINurodymai";
  "/SodraSkolos";
  "/JARAtaskaitos";
  "/SHAREHOLDERS";
  "/DraudimoSprendimas/tr";
  "/FinansiniaiImonesRodikliai";
  "/CompanyRatingWithHistory";
  "/RevenueChartBendraInfo";
  "/RevenueChart";
  "/VehiclesChartBendraInfo";
  "/VehiclesChart";
  "/EmployeesChart";
  "/AvgSalaryInfo";
  "/InfoPazymos";
  "/FinansiniaiImonesRodikliaiIstorija";
  "/StatisticsBySectors";
  "/LicensedActivities";
  "/RestrictionsOfTheActivities";
  "/ImonesJarVeiklosInfo";
  "/SodraSkolosIstorija";
  "/Transport";
  "/Antstoliai";
  "/BailiffUrge";
  "/VptInfo";
*/
  return;
end;

function string 10 truefalsestring(integer parametr)
begin
  string 10 res;
  
  if(parametr==0)then begin
    res = "false";
  end else begin
    res = "true";
  end;

  truefalsestring = res;
return;
end;

procedure DoGetCreditInfo(var record B2BLoanApplicationVc LAr,var Integer res,var string errstr)
begin
  record CreditinfoBlock CIb;
  Boolean debugf;
  area reply,request,requestspdr,replyspdr,temparea,replyfs,requestfs,replyfs2;
  string 255 lang,params,url,path,root,tstr,fn,name,surname,datestr,datestr1,datestr2,repid;
  record CUVc CUr,oldCUr,tCUr;
  Boolean sslf;
  Longint port,pos,counch;
  xml axml,axml2;
  boolean reqf;
  integer i;

  res = 0;
  BlockLoad(CIb);
  CUr.Code = LAr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
  
    //==============================================  CREDITINFO
    lang = "0";
    if (debugf) then begin
      lang = "1";
    end;
    params = "username=" & CIb.APIUser & "&password=" & CIb.APIPassword & "&idnum=" & CUr.RegNr1 & "&lang=" & lang & "&productNumber=6202";
    logtext(0,params);
    if (CIb.Mode==0) then begin//test
      url = "ds.infobankas.lt";
      port = 80;
      sslf = false;
    end else begin
      url = "new.infobankas.lt";
      port = 443;
      sslf = true;
    end;
    path = "/creditinfogroup_lt/SAIS/WebServices/getsais.asmx/GetSAIS";

    if (SendWebRequest(url,port,-1,sslf,"GET",path & "?" & params,"text/xml; charset=utf-8","",false,request,reply,10)) then begin
      writeareatofile(reply,"creditinfo.xlm",0);
      axml = ParseXmlArea(reply);
      root = "root/BasicInfo";
      if (XmlNodeExists(axml,"KLAIDA")) then begin
        errstr = XmlGet(axml,"KLAIDA");
      end;
      if (XmlNodeExists(axml,root)==false) then begin
        goto LGetCreditInfo;
      end;
      
      reqf = true;
    end;
LGetCreditInfo:;    
    
    //==============================================  SPIDERWEB
    
    lang = "0";
    if (debugf) then begin
      lang = "1";
    end;
    //params = "username=" & CIb.SPWAPIUser & "&password=" & CIb.SPWAPIPassword & "&idnum=" & CUr.RegNr1 & "&lang=" & lang & "&productNumber=6202";
    params = "";
    logtext(0,params);
    if (CIb.SPWMode==0) then begin//test
      url = "ds.infobankas.lt";
      port = 80;
      sslf = false;
    end else begin
      url = "new.infobankas.lt";
      port = 443;
      sslf = true;
    end;
    path = "/CreditInfoGroup_lt/SaisWs/SpiderWeb/Spider.svc";
    
    addtexttoarea("SOAPAction: http://creditinfo.lt/2010/05/ISpiderService/GetSpiderData",requestspdr);
    addtexttoarea(chr(13) & chr(10),requestspdr);
    addtexttoarea(chr(13) & chr(10),requestspdr);
    
    addtexttoarea("<x:Envelope xmlns:x=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ns=\"http://creditinfo.lt/2010/05\" ",requestspdr);
    addtexttoarea("xmlns:sai=\"http://schemas.datacontract.org/2004/07/SaisInternalWs.SpiderWeb\">",requestspdr);
    addtexttoarea("<x:Header/>",requestspdr);
    addtexttoarea("<x:Body>",requestspdr);
    addtexttoarea("<ns:GetSpiderData>",requestspdr);
    addtexttoarea("<ns:request>",requestspdr);
    addtexttoarea("<sai:AsociationType>" & CIb.SPWAsociationType & "</sai:AsociationType>",requestspdr);
    addtexttoarea("<sai:CheckJar>" & truefalsestring(CIb.SPWCheckJar) & "</sai:CheckJar>",requestspdr);
    addtexttoarea("<sai:FillNegativeInfo>" & truefalsestring(CIb.SPWFillNegativeInfo) & "</sai:FillNegativeInfo>",requestspdr);
    addtexttoarea("<sai:IdentityNumber>" & CUr.RegNr1 & "</sai:IdentityNumber>",requestspdr);
    addtexttoarea("<sai:Password>" & CIb.SPWAPIPassword & "</sai:Password>",requestspdr);
    addtexttoarea("<sai:UserName>" & CIb.SPWAPIUser & "</sai:UserName>",requestspdr);
    addtexttoarea("<sai:WithHistory>" & truefalsestring(CIb.SPWWithHistory) & "</sai:WithHistory>",requestspdr);
    addtexttoarea("</ns:request>",requestspdr);
    addtexttoarea("</ns:GetSpiderData>",requestspdr);
    addtexttoarea("</x:Body>",requestspdr);
    addtexttoarea("</x:Envelope>",requestspdr);
    addtexttoarea(chr(13) & chr(10),requestspdr);
//addtexttoarea(chr(13) & chr(10),requestspdr);
    
    writeareatofile(requestspdr,"SPDRWEBREQUEST.txt",0);

    if (SendRawWebRequest(url,port,sslf,"POST",path & "?" & params,"text/xml; charset=utf-8","",false,requestspdr,replyspdr,10)) then begin
      if(getarealength(replyspdr)>200)then begin
        for(pos=0;pos<getarealength(replyspdr)-11;pos=pos+1)begin
          if(getstringfromarea(replyspdr,pos,11)=="<s:Envelope")then begin
            GetAreaFromArea(replyspdr,pos,getarealength(replyspdr)-pos,temparea);
            setareazerosize(replyspdr);
            GetAreaFromArea(temparea,0,getarealength(temparea),replyspdr);
          end;
        end;
        writeareatofile(replyspdr,"SPWcreditinfo.xlm",0);
        axml = ParseXmlArea(replyspdr);
        root = "root/BasicInfo";
        if (XmlNodeExists(axml,"KLAIDA")) then begin
          errstr = XmlGet(axml,"KLAIDA");
        end;
        if (XmlNodeExists(axml,root)==false) then begin
          goto LGetCreditInfo1;
        end;
      
        reqf = true;
      end else begin
        goto LGetCreditInfo1;
      end;
    end;
LGetCreditInfo1:;    
    //==============================================  FinancialReports Financial statements
    
    lang = "0";
    if (debugf) then begin
      lang = "1";
    end;
    params = "username=" & CIb.FSAPIUser & "&password=" & CIb.FSAPIPassword & "&companyCode=" & CUr.RegNr1;
    logtext(0,params);
    if (CIb.Mode==0) then begin//test
      url = "ds.infobankas.lt";
      port = 80;
      sslf = false;
    end else begin
      url = "new.infobankas.lt";
      port = 443;
      sslf = true;
    end;
    path = "/CreditInfoGroup_lt/SaisWs/FinancialReports.asmx/GetReportList";

    if (SendWebRequest(url,port,-1,sslf,"GET",path & "?" & params,"text/xml; charset=utf-8","",false,requestfs,replyfs,10)) then begin
      writeareatofile(replyfs,"FBGetReportList.xlm",0);
      axml = ParseXmlArea(replyfs);
      root = "FsiListWsReturnType/Data/PAIESKA/FA_SARASAS";
      
      if (XmlNodeExists(axml,root)==false) then begin
        goto LGetCreditInfo2;
      end else begin
        counch = XmlCountChildren(axml,root);
        if(counch>0)then begin
          for(i=counch-1;i>0;i=i-1)begin
            repid = XmlGetAttribute(axml,root & "/FA[" & i & "]","FS_NUMBER");
            logtext(0,"repid " & repid);
            
            lang = "0";
            if (debugf) then begin
              lang = "1";
            end;
            params = "username=" & CIb.FSAPIUser & "&password=" & CIb.FSAPIPassword & "&fsNumber=" & repid;
            logtext(0,params);
            if (CIb.Mode==0) then begin//test
              url = "ds.infobankas.lt";
              port = 80;
              sslf = false;
            end else begin
              url = "new.infobankas.lt";
              port = 443;
              sslf = true;
            end;
            path = "/CreditInfoGroup_lt/SaisWs/FinancialReports.asmx/GetReport";

            if (SendWebRequest(url,port,-1,sslf,"GET",path & "?" & params,"text/xml; charset=utf-8","",false,requestfs,replyfs2,10)) then begin
              writeareatofile(replyfs2,"FBGetReport" & repid & ".xlm",0);
              axml2 = ParseXmlArea(replyfs2);
              root = "FsiWsReturnType/Data/FA/BALANSAS";
              if (XmlNodeExists(axml2,root)==false) then begin
                setareazerosize(replyfs2);
                goto LGetCreditInfo2;
              end else begin
                reqf = true;
                goto LGetCreditInfo2;
              end;
            end;
            
          end;
        end;
      end;      
    end;
    
LGetCreditInfo2:;
    
    if(reqf)then begin
      qupdating.TreatCreditInfoReply(LAr,CUr,reply,replyspdr,replyfs2,replyfs,res);
      threadasync.SendCompanyInfo(CUr.RegNr1,CUr.CountryCode,1,reply);
    end;
    
  end;


  return;
end;


global
procedure GetCreditInfo(var record B2BLoanApplicationVc LAr,var Integer res,var string errstr,var array Date arrDate,var array val arrAmount,var array Integer arrSource,var array Longint arrID,Boolean forcenewf)
begin
  record CompanyInfoBlock CIb;
  Boolean showoptionsf;
  record CUVc CUr;
  
  BlockLoad(CIb);
  if (CIb.CheckHistory==1 and !forcenewf) then begin
    CUr.Code = LAr.CustCode;
    if (ReadFirstMain(CUr,1,true)) then begin

      if (CheckIfCompanyInfoAvailable(CUr.RegNr1,CUr.CountryCode,arrDate,arrAmount,arrSource,arrID)) then begin
        //Show options
        showoptionsf = true;
      end;
    end;
  end;

  if (showoptionsf) then begin
    res = 2;//get back to client and open window with possible options
  end else begin
    DoGetCreditInfo(LAr,res,errstr);
  end;

  return;
end;

global
procedure GetCreditInfoHistory(var record B2BLoanApplicationVc LAr,var Integer res,var string errstr,Integer source,Longint id)
begin
  record CUVc CUr;
  area comparea,compareaspdr,replyfs;
  
  CUr.Code = LAr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    if (GetExistingCompanyInfo(CUr.RegNr1,CUr.CountryCode,id,comparea)) then begin
      switch (source) begin
        case 1:
          qupdating.TreatCreditInfoReply(LAr,CUr,comparea,compareaspdr,replyfs,replyfs,res);
      end;
    end;
  end;

  return;
end;