external inner function Date DateFromString(string,string);
external inner function val ValFromString(string,string,string);


procedure ExtractObj(string ostr,var Integer pos,var string rstr)
BEGIN
  string 1 c1;

  rstr = "";
L47:;
  if (pos>=len(ostr)) then begin goto L999; end;
  c1 = Mid(ostr,pos,1); 
  pos = pos + 1;
  if ((c1==",") or (c1==".") or (c1==";")) then begin
    if (len(rstr)==0) then begin 
      goto L47; 
    end;
    goto L888;
  end;
  if ((len(rstr)<50)) then begin 
    rstr = rstr & c1;
  end;
  goto L47;
L888:;
  if (pos>len(ostr)) then begin goto L999; end;
  c1 = Mid(ostr,pos,1);  
  pos = pos + 1;
  if ((c1==",") or (c1==".") or (c1==";")) then begin goto L888; end;
  pos = pos - 1;
L999:;
  RETURN;
END;


function Integer CountObjects(string objstr)
BEGIN
  string 255 tstr;
  Integer pos;
  Integer res;
  
  ExtractObj(objstr,pos,tstr);
  while (nonblank(tstr)) begin
    res = res + 1;
    ExtractObj(objstr,pos,tstr);
  end;
  CountObjects = res;
  RETURN;
END; 

function string 255 extractValueFromString(string refstr)
begin
  string 255 res;
  string 2 ch;
  integer i,l;
  
  l = Len(refstr);
  for (i=0;i<l;i=i+1) begin
    ch = Mid(refstr,i,1);
    if(asc(ch)>47 and asc(ch)<58)then begin
      res = res & ch;
    end;
    if(asc(ch)==44 or asc(ch)==46)then begin
      res = res & ch;
    end;
    
  end;
  
  extractValueFromString = res;
  return;
end;

function string 2 ReplaceStrings(string tstr,string realstr,var integer movep)
begin
  string 2 res;

  res = realstr;
  movep = 1;

  if left(tstr,4)=="&lt;" then begin
    res = "<";
    movep = 4;
  end;
  if left(tstr,4)=="&gt;" then begin
    res = ">";
    movep = 4;
  end;
  if left(tstr,6)=="&apos;" then begin
    res = "'";
    movep = 6;
  end;
  if left(tstr,6)=="&quot;" then begin
    res = """";
    movep = 6;
  end;

  ReplaceStrings = res;
  return;
end;

function string 255 ReplaceWebStrings(string rstr)
begin
  longint ln,i;
  string 10 tstr,tmp;
  integer movep;
  string 255 res;

  i = 0;
  while (i < len(rstr)) begin
    tmp = mid(rstr,i,1);
    tstr = mid(rstr,i,6);
    tmp = ReplaceStrings(tstr,tmp,movep);
    res = res & tmp;
    i = i + movep;
  end;

  ReplaceWebStrings = res;
  return;
end;

function string 255 XmlGetFrom(xml axml,string node,string attributestr, boolean issoap)
begin
  string 255 res;
  string 255 first,last;
  
  if(issoap)then begin
    first = attributestr;
  end else begin
    first = firstinrange(attributestr,50);
    last = lastinrange(attributestr,50);
  end;
  
  if(first==last)then begin
    last = "";
  end;
  
  if(blank(attributestr))then begin
    res = XmlGet(axml,node);
  end else begin
    if(nonblank(XmlGet(axml,node & "/" & first)))then begin
      res = XmlGet(axml,node & "/" & first);
    end else begin
      if(nonblank(last))then begin
        res = XmlGetAttribute(axml,node & "/" & first,last);
      end else begin
        res = XmlGetAttribute(axml,node,first);
      end;
    end;
  end;
  
  XmlGetFrom = res;
return;
end;


procedure parsecreditinfoxml(row CreditinfoFieldAssignBlock CABrw,xml axml,var array string steresult,boolean issoap)
begin
  integer i,rwcnt,pos,pos1,k;
  string 255 lang,params,url,path,root,tstr,fn,name,surname,datestr,datestr1,datestr2,attr,fieldtopaste,importnode;
  integer ckbox,countfields,countattributes,index;
  boolean attribfill,importdata,testf;
  val testval;    
      
      if(nonblank(CABrw.ImportNode))then begin
        index = 0;
        if(blank(CABrw.XMLAtribute))then begin
          while(XmlNodeExists(axml,CABrw.ImportNode & "["& index & "]"))begin
            importnode = CABrw.ImportNode & "["& index & "]";
            if(nonblank(XmlGetFrom(axml,importnode,"",issoap)))then begin
              switch(CABrw.DataType)begin
                case M4Str:   tstr = XmlGetFrom(axml,importnode,"",issoap);
                              steresult[steresult.length] = tstr;
                case M4Date:  steresult[steresult.length]  = DateFromString(XmlGetFrom(axml,importnode,"",issoap),"YYYY.MM.DD");
                case M4Chk:   ckbox = 0;
                            if (XmlNodeExists(axml,importnode)) then begin
                              ckbox = 1;
                              if(XmlGetFrom(axml,importnode,"",issoap)=="false")then begin ckbox = 0; end;
                              if(XmlGetFrom(axml,importnode,"",issoap)=="true")then begin ckbox = 1; end;
                              if(XmlGetFrom(axml,importnode,"",issoap)=="0")then begin ckbox = 0; end;
                              if(XmlGetFrom(axml,importnode,"",issoap)=="1")then begin ckbox = 1; end;
                        
                            end;
                            if(CABrw.Invert==1)then begin
                              if(ckbox==0)then begin
                                ckbox = 1;
                              end else begin
                                ckbox = 0;
                              end;
                            end;
                            steresult[steresult.length]  = ckbox;
                case M4Val:tstr = extractValueFromString(XmlGetFrom(axml,importnode,"",issoap));
                            steresult[steresult.length]  = ValFromString(tstr,","," ");
                case M4Long:tstr = extractValueFromString(XmlGetFrom(axml,importnode,"",issoap));
                            steresult[steresult.length]  = stringtolongint(tstr);
                case M4Int:tstr = extractValueFromString(XmlGetFrom(axml,importnode,"",issoap));
                            steresult[steresult.length]  = stringtoint(tstr);
              end;
            end;
            index = index + 1;
          end;
        end else begin
          index = 0;
          while(XmlNodeExists(axml,CABrw.ImportNode & "["& index & "]"))begin
            importnode = CABrw.ImportNode & "["& index & "]";
            k = steresult.length;
            if(CountObjects(CABrw.XMLAtribute)>1)then begin
              testf = true;
              
              if(nonblank(CABrw.ExcludeXMLAtribute))then begin
                pos = 0;
                ExtractObj(CABrw.ExcludeXMLAtribute,pos,attr);
                while(nonblank(attr))begin
                  if(nonblank(XmlGetFrom(axml,importnode,attr,issoap)))then begin
                    testf = false;
                  end;
                  ExtractObj(CABrw.ExcludeXMLAtribute,pos,attr);
                end;
              end;
              
              if(testf)then begin
                if(nonblank(CABrw.XMLAtributeFrom))then begin
                  testval = stringtoval(XmlGetFrom(axml,importnode,CABrw.XMLAtributeFrom,issoap),m4val);
                  if(testval<CABrw.XMLAtributeFromVal)then begin
                    testf = false;
                  end;
                end;
                if(nonblank(CABrw.XMLAtributeTo))then begin
                  testval = stringtoval(XmlGetFrom(axml,importnode,CABrw.XMLAtributeTo,issoap),m4val);
                  if(testval>CABrw.XMLAtributeToVal)then begin
                    testf = false;
                  end;
                end;
                if(nonblank(CABrw.ExcludeXMLAtributeFrom))then begin
                  testval = stringtoval(XmlGetFrom(axml,importnode,CABrw.ExcludeXMLAtributeFrom,issoap),m4val);
                  if(testval>CABrw.ExcludeXMLAtributeFromVal)then begin
                    testf = false;
                  end;
                end;
                if(nonblank(CABrw.ExcludeXMLAtributeTo))then begin
                  testval = stringtoval(XmlGetFrom(axml,importnode,CABrw.ExcludeXMLAtributeTo,issoap),m4val);
                  if(testval<CABrw.ExcludeXMLAtributeToVal)then begin
                    testf = false;
                  end;
                end;
              end;
              if(testf)then begin
                pos = 0;
                ExtractObj(CABrw.XMLAtribute,pos,attr);
                while(nonblank(attr))begin
                  switch(CABrw.DataType)begin
                    case M4Str:   tstr = XmlGetFrom(axml,importnode,attr,issoap);
                                  if(nonblank(tstr))then begin
                                    if(blank(steresult[k]))then begin
                                      steresult[k] = tstr;
                                    end else begin
                                      if(blank(CABrw.Separator))then begin
                                        CABrw.Separator = ", ";
                                      end;
                                      steresult[k] = steresult[k] & CABrw.Separator & tstr;
                                    end;
                                  end;
                              
                  end;
                  ExtractObj(CABrw.XMLAtribute,pos,attr);
                end;
              end;
            end else begin
              if(nonblank(XmlGetFrom(axml,importnode,CABrw.XMLAtribute,issoap)))then begin
                testf = true;
                if(nonblank(CABrw.ExcludeXMLAtribute))then begin
                  pos = 0;
                  ExtractObj(CABrw.ExcludeXMLAtribute,pos,attr);
                  while(nonblank(attr))begin
                    if(nonblank(XmlGetFrom(axml,importnode,attr,issoap)))then begin
                      testf = false;
                    end;
                    ExtractObj(CABrw.ExcludeXMLAtribute,pos,attr);
                  end;
                end;
                
                if(testf)then begin
                  if(nonblank(CABrw.XMLAtributeFrom))then begin
                    testval = stringtoval(XmlGetFrom(axml,importnode,CABrw.XMLAtributeFrom,issoap),m4val);
                    if(testval<CABrw.XMLAtributeFromVal)then begin
                      testf = false;
                    end;
                  end;
                  if(nonblank(CABrw.XMLAtributeTo))then begin
                    testval = stringtoval(XmlGetFrom(axml,importnode,CABrw.XMLAtributeTo,issoap),m4val);
                    if(testval>CABrw.XMLAtributeToVal)then begin
                      testf = false;
                    end;
                  end;
                  if(nonblank(CABrw.ExcludeXMLAtributeFrom))then begin
                    testval = stringtoval(XmlGetFrom(axml,importnode,CABrw.ExcludeXMLAtributeFrom,issoap),m4val);
                    if(testval>CABrw.ExcludeXMLAtributeFromVal)then begin
                      testf = false;
                    end;
                  end;
                  if(nonblank(CABrw.ExcludeXMLAtributeTo))then begin
                    testval = stringtoval(XmlGetFrom(axml,importnode,CABrw.ExcludeXMLAtributeTo,issoap),m4val);
                    if(testval<CABrw.ExcludeXMLAtributeToVal)then begin
                      testf = false;
                    end;
                  end;
                end;
                
                if(testf)then begin
                  switch(CABrw.DataType)begin
                    case M4Str:   tstr = XmlGetFrom(axml,importnode,CABrw.XMLAtribute,issoap);
                                  steresult[steresult.length] = tstr;
                    case M4Date:  steresult[steresult.length]  = DateFromString(XmlGetFrom(axml,importnode,CABrw.XMLAtribute,issoap),"YYYY.MM.DD");
                    case M4Chk:   ckbox = 0;
                                if (XmlNodeExists(axml,importnode)) then begin
                                  ckbox = 1;
                                  if(XmlGetFrom(axml,importnode,CABrw.XMLAtribute,issoap)=="false")then begin ckbox = 0; end;
                                  if(XmlGetFrom(axml,importnode,CABrw.XMLAtribute,issoap)=="true")then begin ckbox = 1; end;
                                  if(XmlGetFrom(axml,importnode,CABrw.XMLAtribute,issoap)=="0")then begin ckbox = 0; end;
                                  if(XmlGetFrom(axml,importnode,CABrw.XMLAtribute,issoap)=="1")then begin ckbox = 1; end;
                        
                                end;
                                if(CABrw.Invert==1)then begin
                                  if(ckbox==0)then begin
                                    ckbox = 1;
                                  end else begin
                                    ckbox = 0;
                                  end;
                                end;
                                steresult[steresult.length]  = ckbox;
                    case M4Val:tstr = extractValueFromString(XmlGetFrom(axml,importnode,CABrw.XMLAtribute,issoap));
                                steresult[steresult.length]  = ValFromString(tstr,","," ");
                    case M4Long:tstr = extractValueFromString(XmlGetFrom(axml,importnode,CABrw.XMLAtribute,issoap));
                                steresult[steresult.length]  = stringtolongint(tstr);
                    case M4Int:tstr = extractValueFromString(XmlGetFrom(axml,importnode,"",issoap));
                              steresult[steresult.length]  = stringtoint(tstr);
                  end;
                end;
              end;
            end;
            index = index + 1;
          end;
        end;
      end;
return;
end;

function string 10 truefalsestring(integer parametr)
begin
  string 10 res;
  
  if(parametr==0)then begin
    res = "false";
  end else begin
    res = "true";
  end;

  truefalsestring = res;
return;
end;

global updating procedure GetDataForExecutor(record SWExecListVc SWExecListr,record B2BLoanApplicationVc LAr)
begin
  record SWExecPersonDataVc SWExecPersonDatar;
  row SWExecPersonDataVc SWExecPersonDatarw;
  boolean udneed;
  record CreditinfoBlock CIb;
  Boolean debugf;
  area reply,request,requestspdr,replyspdr,temparea,replyfs,requestfs,replyfs2;
  string 255 lang,params,url,path,root,tstr,fn,name,surname,datestr,datestr1,datestr2,repid;
  record CUVc CUr,oldCUr,tCUr;
  Boolean sslf;
  Longint port,pos,counch;
  xml axml,axml2;
  boolean reqf;
  integer i,child;

  blockload(CIb);
  
  logtext(0,"GetDataForExecutor " & SWExecListr.ExecId);
  
  SWExecPersonDatar.ExecId = SWExecListr.ExecId;
  if(readfirstmain(SWExecPersonDatar,1,true))then begin
    if(blankdate(SWExecPersonDatar.ImpDate) or SWExecPersonDatar.ImpDate<addday(currentdate,-CIb.ExecutiveDaysUpdate))then begin
      udneed = true;
    end;
  end else begin
    udneed = true;
  end;
  
  if(udneed)then begin
    params = "";
    logtext(0,params);
    if (CIb.SPWMode==0) then begin//test
      url = "ds.infobankas.lt";
      port = 80;
      sslf = false;
    end else begin
      url = "new.infobankas.lt";
      port = 443;
      sslf = true;
    end;
    path = "/CreditInfoGroup_lt/SaisWs/SpiderWeb/Spider.svc";

    addtexttoarea("SOAPAction: http://creditinfo.lt/2010/05/ISpiderService/GetSpiderData",requestspdr);
    addtexttoarea(chr(13) & chr(10),requestspdr);
    addtexttoarea(chr(13) & chr(10),requestspdr);

    addtexttoarea("<x:Envelope xmlns:x=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ns=\"http://creditinfo.lt/2010/05\" ",requestspdr);
    addtexttoarea("xmlns:sai=\"http://schemas.datacontract.org/2004/07/SaisInternalWs.SpiderWeb\">",requestspdr);
    addtexttoarea("<x:Header/>",requestspdr);
    addtexttoarea("<x:Body>",requestspdr);
    addtexttoarea("<ns:GetSpiderData>",requestspdr);
    addtexttoarea("<ns:request>",requestspdr);
    addtexttoarea("<sai:AsociationType>" & CIb.SPWAsociationType & "</sai:AsociationType>",requestspdr);
    addtexttoarea("<sai:CheckJar>" & truefalsestring(CIb.SPWCheckJar) & "</sai:CheckJar>",requestspdr);
    addtexttoarea("<sai:FillNegativeInfo>" & truefalsestring(CIb.SPWFillNegativeInfo) & "</sai:FillNegativeInfo>",requestspdr);
    addtexttoarea("<sai:IdentityNumber>" & SWExecListr.ExecId & "</sai:IdentityNumber>",requestspdr);
    addtexttoarea("<sai:Password>" & CIb.SPWAPIPassword & "</sai:Password>",requestspdr);
    addtexttoarea("<sai:UserName>" & CIb.SPWAPIUser & "</sai:UserName>",requestspdr);
    addtexttoarea("<sai:WithHistory>" & truefalsestring(CIb.SPWWithHistory) & "</sai:WithHistory>",requestspdr);
    addtexttoarea("</ns:request>",requestspdr);
    addtexttoarea("</ns:GetSpiderData>",requestspdr);
    addtexttoarea("</x:Body>",requestspdr);
    addtexttoarea("</x:Envelope>",requestspdr);
    addtexttoarea(chr(13) & chr(10),requestspdr);
    //addtexttoarea(chr(13) & chr(10),requestspdr);

    writeareatofile(requestspdr,"SPDRWEBREQUEST.txt",0);

    if (SendRawWebRequest(url,port,sslf,"POST",path & "?" & params,"text/xml; charset=utf-8","",false,requestspdr,replyspdr,10)) then begin
      if(getarealength(replyspdr)>200)then begin
        for(pos=0;pos<getarealength(replyspdr)-11;pos=pos+1)begin
          if(getstringfromarea(replyspdr,pos,11)=="<s:Envelope")then begin
            GetAreaFromArea(replyspdr,pos,getarealength(replyspdr)-pos,temparea);
            setareazerosize(replyspdr);
            GetAreaFromArea(temparea,0,getarealength(temparea),replyspdr);
          end;
        end;
        fn = "Executive" & SWExecListr.ExecId & ".xml";
        WriteAreaToFile(replyspdr,fn,0);
        RecordLinkFile(fn,0,LAr,CurrentCompany);
        Delete_File(fn);
    
        axml = ParseXmlArea(replyspdr);
        root = "s:Envelope/s:Body/GetSpiderDataResponse/GetSpiderDataResult/a:Person";

        if (XmlNodeExists(axml,root)==false) then begin
          goto LGetCreditInfo1;
        end;
    
        root = "s:Envelope/s:Body/GetSpiderDataResponse/GetSpiderDataResult/a:Person";
    
    
    
        SWExecPersonDatar.ExecId = SWExecListr.ExecId;
        SWExecPersonDatar.Name = XmlGet(axml,root & "/b:FullName");
        SWExecPersonDatar.ImpDate = currentdate;
        SWExecPersonDatar.ImpTime = currenttime;
        for(i=0;i<matrowcnt(SWExecPersonDatar);i=i+1)begin
          matrowdelete(SWExecPersonDatar,0);
        end;
        child = XMLCountChildren(axml,root & "/b:Relations");
        for(i=0;i<child;i=i+1)begin
          SWExecPersonDatarw.CompanyID = XMLGet(axml,root & "/b:Relations/b:InterPersonRelation[" & i & "]/b:Company/b:IdentityNumber");
          SWExecPersonDatarw.CompanyName = XMLGet(axml,root & "/b:Relations/b:InterPersonRelation[" & i & "]/b:Company/b:FullName");
          SWExecPersonDatarw.UnpaidDebtsCount = XMLGet(axml,root & "/b:Relations/b:InterPersonRelation[" & i & "]/b:Company/b:NegativeInfo/b:UnpaidDebtsCount");
          SWExecPersonDatarw.PaidDebtsCount = XMLGet(axml,root & "/b:Relations/b:InterPersonRelation[" & i & "]/b:Company/b:NegativeInfo/b:PaidDebtsCount");
          SWExecPersonDatarw.HasArrests = XMLGet(axml,root & "/b:Relations/b:InterPersonRelation[" & i & "]/b:Company/b:NegativeInfo/b:HasArrests");
          SWExecPersonDatarw.HasClaims = XMLGet(axml,root & "/b:Relations/b:InterPersonRelation[" & i & "]/b:Company/b:NegativeInfo/b:HasClaims");
          SWExecPersonDatarw.HasLawsuits = XMLGet(axml,root & "/b:Relations/b:InterPersonRelation[" & i & "]/b:Company/b:NegativeInfo/b:HasLawsuits");
          SWExecPersonDatarw.Status = XMLGet(axml,root & "/b:Relations/b:InterPersonRelation[" & i & "]/b:Company/b:Status");
          matrowput(SWExecPersonDatar,i,SWExecPersonDatarw);      
        end;
        recordstore(SWExecPersonDatar,true);
    
    
  
        reqf = true;
      end else begin
        goto LGetCreditInfo1;
      end;
    end;
  end;
  
LGetCreditInfo1:;
return;
end;


global updating procedure CreditInfoFileAsignB2BLoanApplicationVc(var record B2BLoanApplicationVc LAr,xml axml,xml axmlspdr,xml axmlFS,xml axmlFSlist)
begin
record CreditinfoFieldAssignBlock CABb;
row CreditinfoFieldAssignBlock CABrw;
integer i,rwcnt,pos,pos1,sh,ex;
string 255 lang,params,url,path,fieldtopaste,xmlkey,reltyp,todate,tstr,custid;
array string 255 steresult;
integer ckbox,countfields,countattributes,index,step;
boolean attribfill;
array string 100 aShareHoldersName,aShareHoldersID,aExecutive;
array val aShares;
array date aShareHoldersSince;
integer relations;
date frdate;
record ORVc ORr,OR2r;
row ORVc ORrw;
record SWExecListVc SWExecListr;
boolean TrHs;

  //root = "root/BasicInfo";
  
  blockload(CABb);
  rwcnt = matrowcnt(CABb);
  for(i=0;i<rwcnt;i=i+1)begin
    matrowget(CABb,i,CABrw);
    if(nonblank(CABrw.FieldName) and CABrw.Source==0)then begin
      if(CABrw.Register=="B2BLoanApplicationVc")then begin
      if(nonblank(CABrw.ImportNode))then begin
          cleararray(steresult);
          index = 0;
          parsecreditinfoxml(CABrw,axml,steresult,false); 
          pos1 = 0;
          
          step = 1;
          if(steresult.length>1)then begin
            if(CABrw.GetOrder==1)then begin
              index = steresult.length - 1;
              step = -1;
            end;
          end;
          
          ExtractObj(CABrw.FieldName,pos1,fieldtopaste);  
          while(nonblank(fieldtopaste))begin  
            if(nonblank(fieldtopaste))then begin
              switch(CABrw.DataType)begin
                case M4Str:  SetFieldValueByName(LAr,fieldtopaste,steresult[index],-1);
                case M4Date: SetFieldValueByName(LAr,fieldtopaste,steresult[index],-1);
                case M4Chk:  SetFieldValueByName(LAr,fieldtopaste,stringtoint(steresult[index]),-1);
                case M4Val:  SetFieldValueByName(LAr,fieldtopaste,ValFromString(steresult[index],","," "),-1);
                case M4Long:  SetFieldValueByName(LAr,fieldtopaste,stringtolongint(steresult[index]),-1);
                case M4Int:  SetFieldValueByName(LAr,fieldtopaste,stringtoint(steresult[index]),-1);
              end;
              index = index + step;
              if(index<0)then begin
                index = 9999;
              end;
            end;
            ExtractObj(CABrw.FieldName,pos1,fieldtopaste);  
          end;
        end;
      end;
    end;
  end;
  
  for(i=0;i<rwcnt;i=i+1)begin
    matrowget(CABb,i,CABrw);
    if(nonblank(CABrw.FieldName) and CABrw.Source==1)then begin//SpiderWeb
      if(CABrw.Register=="B2BLoanApplicationVc")then begin
      if(nonblank(CABrw.ImportNode))then begin
          cleararray(steresult);
          index = 0;
          parsecreditinfoxml(CABrw,axmlspdr,steresult,true); 
          pos1 = 0;
          
          step = 1;
          if(steresult.length>1)then begin
            if(CABrw.GetOrder==1)then begin
              index = steresult.length - 1;
              step = -1;
            end;
          end;
          
          ExtractObj(CABrw.FieldName,pos1,fieldtopaste);  
          while(nonblank(fieldtopaste))begin  
            if(nonblank(fieldtopaste))then begin
              switch(CABrw.DataType)begin
                case M4Str:  SetFieldValueByName(LAr,fieldtopaste,steresult[index],-1);
                case M4Date: SetFieldValueByName(LAr,fieldtopaste,steresult[index],-1);
                case M4Chk:  SetFieldValueByName(LAr,fieldtopaste,stringtoint(steresult[index]),-1);
                case M4Val:  SetFieldValueByName(LAr,fieldtopaste,ValFromString(steresult[index],","," "),-1);
                case M4Long:  SetFieldValueByName(LAr,fieldtopaste,stringtolongint(steresult[index]),-1);
                case M4Int:  SetFieldValueByName(LAr,fieldtopaste,stringtoint(steresult[index]),-1);
              end;
              index = index + step;
              if(index<0)then begin
                index = 9999;
              end;
            end;
            ExtractObj(CABrw.FieldName,pos1,fieldtopaste);  
          end;
        end;
      end;
    end;
  end;
  
  //spiderweb hardcode parsing
  xmlkey = "s:Envelope/s:Body/GetSpiderDataResponse/GetSpiderDataResult/a:Person/b:Relations";
  relations = XmlCountChildren(axmlspdr,xmlkey);
  custid = XmlGet(axmlspdr,"s:Envelope/s:Body/GetSpiderDataResponse/GetSpiderDataResult/a:Person/b:IdentityNumber");
  SWExecListr.MainID = custid;
  TrHs = true;
  while(loopmain(SWExecListr,1,TrHs))begin
    if(SWExecListr.MainID!=custid)then begin TrHs = false; end;
    if(TrHs)then begin
      recorddelete(SWExecListr);
      stepback(SWExecListr);
    end;
  end;
  
  for(i=0;i<relations;i=i+1)begin
    reltyp = XmlGetAttribute(axmlspdr,xmlkey & "/b:InterPersonRelation[" & i & "]","i:type");
    logtext(0,"reltyp " & reltyp);
    if(reltyp=="b:Shareholder")then begin
      todate = "";
      todate = XmlGetAttribute(axmlspdr,xmlkey & "/b:InterPersonRelation[" & i & "]/b:ToDate","i:nil");
      logtext(0,"todate " & todate);
      if(todate=="true")then begin
        logtext(0,"Active");
        aShareHoldersName[sh] = XmlGet(axmlspdr,xmlkey & "/b:InterPersonRelation[" & i & "]/b:Person/b:FullName");
        aShareHoldersID[sh] = XmlGet(axmlspdr,xmlkey & "/b:InterPersonRelation[" & i & "]/b:Person/b:IdentityNumber");
        tstr = left(XmlGet(axmlspdr,xmlkey & "/b:InterPersonRelation[" & i & "]/b:FromDate"),10);
        frdate.year = stringtoint(left(tstr,4));
        frdate.month = stringtoint(mid(tstr,5,2));
        frdate.day = stringtoint(right(tstr,2));
        aShareHoldersSince[sh] = frdate;
        aShares[sh] = stringtoval(XmlGet(axmlspdr,xmlkey & "/b:InterPersonRelation[" & i & "]/b:Share"),m4val);
        
        ORrw.Spec = aShareHoldersName[sh];
        ORrw.SerialNr = aShareHoldersID[sh];
        ORrw.InloadingDate = aShareHoldersSince[sh];
        ORrw.Quant = aShares[sh];
        matrowput(ORr,matrowcnt(ORr),ORrw);
        
        logtext(0,aShares[sh] & "  " & aShareHoldersName[sh] & "   " & aShareHoldersID[sh] & "   " & aShareHoldersSince[sh]);
        
        sh = sh + 1;
      end;
    end;
    ex = 0;
    if(reltyp=="b:Executive")then begin
      todate = "";
      todate = XmlGetAttribute(axmlspdr,xmlkey & "/b:InterPersonRelation[" & i & "]/b:ToDate","i:nil");
      if(todate=="true" or custid=="111111113"/*111111113 for testing*/)then begin
        aExecutive[ex] = XmlGet(axmlspdr,xmlkey & "/b:InterPersonRelation[" & i & "]/b:Person/b:IdentityNumber");
        ORrw.SerialNr = aExecutive[ex];
        matrowput(OR2r,matrowcnt(OR2r),ORrw);        
        sh = sh + 1;
      end;
    end;
  end;
  
  for(i=0;i<matrowcnt(OR2r);i=i+1)begin
    matrowget(OR2r,i,ORrw);
    logtext(0,"Executive " & ORrw.SerialNr);
    SWExecListr.MainID = custid;
    SWExecListr.ExecId = ORrw.SerialNr;
    SWExecListr.ImpDate = currentdate;
    SWExecListr.ImpTime = currenttime;
    recordstore(SWExecListr,true);
    GetDataForExecutor(SWExecListr,LAr);
  end;
  
  SortRows(ORr,"Quant",false);
  for(i=0;i<matrowcnt(ORr);i=i+1)begin
    matrowget(ORr,i,ORrw);
    logtext(0,ORrw.Spec & "  " & ORrw.SerialNr & "  " & ORrw.InloadingDate & " " & ORrw.Quant);
    if(i<6)then begin
      SetFieldValueByName(LAr,"ShareHolder" & i+1 & "Name",ORrw.Spec,-1);
      SetFieldValueByName(LAr,"ShareHolder" & i+1 & "ID",ORrw.SerialNr,-1);
      SetFieldValueByName(LAr,"ShareHolder" & i+1 & "Shares",ORrw.Quant,-1);
      SetFieldValueByName(LAr,"ShareHolder" & i+1 & "Since",ORrw.InloadingDate,-1);
    end;
  end;
  
  for(i=0;i<rwcnt;i=i+1)begin
    matrowget(CABb,i,CABrw);
    if(nonblank(CABrw.FieldName) and CABrw.Source==2)then begin//FS
      if(CABrw.Register=="B2BLoanApplicationVc")then begin
      if(nonblank(CABrw.ImportNode))then begin
          cleararray(steresult);
          index = 0;
          parsecreditinfoxml(CABrw,axmlFS,steresult,false); 
          pos1 = 0;
          
          step = 1;
          if(steresult.length>1)then begin
            if(CABrw.GetOrder==1)then begin
              index = steresult.length - 1;
              step = -1;
            end;
          end;
          
          ExtractObj(CABrw.FieldName,pos1,fieldtopaste);  
          while(nonblank(fieldtopaste))begin  
            if(nonblank(fieldtopaste))then begin
              switch(CABrw.DataType)begin
                case M4Str:  SetFieldValueByName(LAr,fieldtopaste,steresult[index],-1);
                case M4Date: SetFieldValueByName(LAr,fieldtopaste,steresult[index],-1);
                case M4Chk:  SetFieldValueByName(LAr,fieldtopaste,stringtoint(steresult[index]),-1);
                case M4Val:  SetFieldValueByName(LAr,fieldtopaste,ValFromString(steresult[index],","," "),-1);
                case M4Long:  SetFieldValueByName(LAr,fieldtopaste,stringtolongint(steresult[index]),-1);
                case M4Int:  SetFieldValueByName(LAr,fieldtopaste,stringtoint(steresult[index]),-1);
              end;
              index = index + step;
              if(index<0)then begin
                index = 9999;
              end;
            end;
            ExtractObj(CABrw.FieldName,pos1,fieldtopaste);  
          end;
          
        end;
      end;
    end;
  end;
  
  for(i=0;i<rwcnt;i=i+1)begin
    matrowget(CABb,i,CABrw);
    if(nonblank(CABrw.FieldName) and CABrw.Source==3)then begin//FinancialReports
      if(CABrw.Register=="B2BLoanApplicationVc")then begin
      if(nonblank(CABrw.ImportNode))then begin
          cleararray(steresult);
          index = 0;
          parsecreditinfoxml(CABrw,axmlFSlist,steresult,false); 
          pos1 = 0;
          
          step = 1;
          if(steresult.length>1)then begin
            if(CABrw.GetOrder==1)then begin
              index = steresult.length - 1;
              step = -1;
            end;
          end;
          
          ExtractObj(CABrw.FieldName,pos1,fieldtopaste);  
          while(nonblank(fieldtopaste))begin  
            if(nonblank(fieldtopaste))then begin
              switch(CABrw.DataType)begin
                case M4Str:  SetFieldValueByName(LAr,fieldtopaste,steresult[index],-1);
                case M4Date: SetFieldValueByName(LAr,fieldtopaste,steresult[index],-1);
                case M4Chk:  SetFieldValueByName(LAr,fieldtopaste,stringtoint(steresult[index]),-1);
                case M4Val:  SetFieldValueByName(LAr,fieldtopaste,ValFromString(steresult[index],","," "),-1);
                case M4Long:  SetFieldValueByName(LAr,fieldtopaste,stringtolongint(steresult[index]),-1);
                case M4Int:  SetFieldValueByName(LAr,fieldtopaste,stringtoint(steresult[index]),-1);
              end;
              index = index + step;
              if(index<0)then begin
                index = 9999;
              end;
            end;
            ExtractObj(CABrw.FieldName,pos1,fieldtopaste);  
          end;
          
        end;
      end;
    end;
  end;

return;
end;

global procedure CreditInfoFileAsignCUVc(var record CUVc CUr,xml axml,xml axmlspdr,xml axmlFS)
begin
record CreditinfoFieldAssignBlock CABb;
row CreditinfoFieldAssignBlock CABrw;
integer i,rwcnt,pos,pos1;
string 255 lang,params,url,path,root,tstr,fn,name,surname,datestr,datestr1,datestr2,attr,fieldtopaste,importnode;
array string 255 steresult;
integer ckbox,countfields,countattributes,index,step;
boolean attribfill;

  //root = "root/BasicInfo";
  
  blockload(CABb);
  rwcnt = matrowcnt(CABb);
  for(i=0;i<rwcnt;i=i+1)begin
    matrowget(CABb,i,CABrw);
    if(nonblank(CABrw.FieldName) and CABrw.Source==0)then begin
      if(CABrw.Register=="CUVc")then begin
      if(nonblank(CABrw.ImportNode))then begin
          cleararray(steresult);
          index = 0;
          parsecreditinfoxml(CABrw,axml,steresult,false); 
          pos1 = 0;
          
          step = 1;
          if(steresult.length>1)then begin
            if(CABrw.GetOrder==1)then begin
              index = steresult.length - 1;
              step = -1;
            end;
          end;
          
          ExtractObj(CABrw.FieldName,pos1,fieldtopaste);  
          while(nonblank(fieldtopaste))begin   
            if(nonblank(fieldtopaste))then begin
              switch(CABrw.DataType)begin
                case M4Str:  SetFieldValueByName(CUr,fieldtopaste,steresult[index],-1);
                case M4Date: SetFieldValueByName(CUr,fieldtopaste,steresult[index],-1);
                case M4Chk:  SetFieldValueByName(CUr,fieldtopaste,stringtoint(steresult[index]),-1);
                case M4Val:  SetFieldValueByName(CUr,fieldtopaste,ValFromString(steresult[index],","," "),-1);
                case M4Long:  SetFieldValueByName(CUr,fieldtopaste,stringtolongint(steresult[index]),-1);
                case M4Int:  SetFieldValueByName(CUr,fieldtopaste,stringtoint(steresult[index]),-1);
              end;
              index = index + step;
              if(index<0)then begin
                index = 9999;
              end;
            end;
            ExtractObj(CABrw.FieldName,pos1,fieldtopaste);  
          end;
        end;
      end;
    end;
  end;
  
  for(i=0;i<rwcnt;i=i+1)begin
    matrowget(CABb,i,CABrw);
    if(nonblank(CABrw.FieldName) and CABrw.Source==1)then begin//SpiderWeb
      if(CABrw.Register=="CUVc")then begin
      if(nonblank(CABrw.ImportNode))then begin
          cleararray(steresult);
          index = 0;
          parsecreditinfoxml(CABrw,axmlspdr,steresult,true); 
          pos1 = 0;
          
          step = 1;
          if(steresult.length>1)then begin
            if(CABrw.GetOrder==1)then begin
              index = steresult.length - 1;
              step = -1;
            end;
          end;
          
          ExtractObj(CABrw.FieldName,pos1,fieldtopaste);  
          while(nonblank(fieldtopaste))begin   
            if(nonblank(fieldtopaste))then begin
              switch(CABrw.DataType)begin
                case M4Str:  SetFieldValueByName(CUr,fieldtopaste,steresult[index],-1);
                case M4Date: SetFieldValueByName(CUr,fieldtopaste,steresult[index],-1);
                case M4Chk:  SetFieldValueByName(CUr,fieldtopaste,stringtoint(steresult[index]),-1);
                case M4Val:  SetFieldValueByName(CUr,fieldtopaste,ValFromString(steresult[index],","," "),-1);
                case M4Long:  SetFieldValueByName(CUr,fieldtopaste,stringtolongint(steresult[index]),-1);
                case M4Int:  SetFieldValueByName(CUr,fieldtopaste,stringtoint(steresult[index]),-1);
              end;
              index = index + step;
              if(index<0)then begin
                index = 9999;
              end;
            end;
            ExtractObj(CABrw.FieldName,pos1,fieldtopaste);  
          end;
        end;
      end;
    end;
  end;
  
  for(i=0;i<rwcnt;i=i+1)begin
    matrowget(CABb,i,CABrw);
    if(nonblank(CABrw.FieldName) and CABrw.Source==2)then begin//FinancialReports
      if(CABrw.Register=="CUVc")then begin
      if(nonblank(CABrw.ImportNode))then begin
          cleararray(steresult);
          index = 0;
          parsecreditinfoxml(CABrw,axmlspdr,steresult,false); 
          pos1 = 0;
          
          step = 1;
          if(steresult.length>1)then begin
            if(CABrw.GetOrder==1)then begin
              index = steresult.length - 1;
              step = -1;
            end;
          end;
          
          ExtractObj(CABrw.FieldName,pos1,fieldtopaste);  
          while(nonblank(fieldtopaste))begin   
            if(nonblank(fieldtopaste))then begin
              switch(CABrw.DataType)begin
                case M4Str:  SetFieldValueByName(CUr,fieldtopaste,steresult[index],-1);
                case M4Date: SetFieldValueByName(CUr,fieldtopaste,steresult[index],-1);
                case M4Chk:  SetFieldValueByName(CUr,fieldtopaste,stringtoint(steresult[index]),-1);
                case M4Val:  SetFieldValueByName(CUr,fieldtopaste,ValFromString(steresult[index],","," "),-1);
                case M4Long:  SetFieldValueByName(CUr,fieldtopaste,stringtolongint(steresult[index]),-1);
                case M4Int:  SetFieldValueByName(CUr,fieldtopaste,stringtoint(steresult[index]),-1);
              end;
              index = index + step;
              if(index<0)then begin
                index = 9999;
              end;
            end;
            ExtractObj(CABrw.FieldName,pos1,fieldtopaste);  
          end;
        end;
      end;
    end;
  end;

return
end;