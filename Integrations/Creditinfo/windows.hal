event startup
begin
  
  SetLangMode(LangEnglish,"ENG",0);

  Setting("Creditinfo.lt",CreditinfoTClass,modInteg);
  Setting("Creditinfo import fields assign",CreditinfoFieldAssignBlockTClass,modInteg);
  Setting("Company Info Settings",CompanyInfoTClass,modSY);
  Setting("Executive List",SWExecListLClass,modInteg);
  Setting("Executive Data",SWExecPersonDataLClass,modInteg);
  Setting("SpiderWeb Bankruptcy Statuses",SWBancruptTClass,modInteg);
      
  
  SetBegin(30900);
  SetText(0,"-");
  SetText(1,"Creditinfo.lt");
  EndSet;
  
  SetBegin(30901);
  SetText(0,"XML Value");
  SetText(1,"XML Attribute");
  EndSet;
  
  SetBegin(30902);
  SetText(0,"First");
  SetText(1,"Last");
  EndSet;
  
  SetBegin(30903);
  SetText(0,"Basic");
  SetText(1,"Spider WEB");
  SetText(2,"Financial Statements");
  SetText(3,"Financial Statements List");
  EndSet;

end;

event DefineWindows
begin
  real h,v,vs;

  vs = 20;

  SetLangMode(LangEnglish,"ENG",0);

  WindowBegin("Creditinfo.lt",CreditinfoTClass,CGSbl,SRType);
  SetBlid(CreditinfoBlock);
  SetWRect(20,80,570,298);
  Sizeable(-1,-1,0,0);
  EditField(h=190,v=6,200,"User",Normal,APIUser,false,0);
  EditField(h,v+=vs,200,"Password",Normal,APIPassword,false,0);
  ButtonFrame(h,v=v+40,100,2,"Mode");
  RadioButton(h,v,0,0,"Test",Mode);
  RadioButton(h,v+=16,1,0,"Live",Mode);
  
  EditField(h=150,v+=vs,200,"Spider WEB User",Normal,SPWAPIUser,false,0);
  EditField(h,v+=vs,200,"Spider WEB Password",Normal,SPWAPIPassword,false,0);
  EditField(h+150,v+=vs,50,"Update Executive Data after days",Normal,ExecutiveDaysUpdate,false,0);
  ButtonFrame(h,v=v+40,100,2,"Spider WEB Mode");
  RadioButton(h,v,0,0,"Test",SPWMode);
  RadioButton(h,v+=16,1,0,"Live",SPWMode);
  EditField(h,v+=25,200,"Asociation Type",Normal,SPWAsociationType,false,0);
  CheckBox(h,v+=vs,0,"Check Jar",SPWCheckJar);
  CheckBox(h,v+=vs,0,"Fill Negative Info",SPWFillNegativeInfo);
  CheckBox(h,v+=vs,0,"With History",SPWWithHistory);
  
  EditField(h=150,v+=vs,200,"Financial Statements User",Normal,FSAPIUser,false,0);
  EditField(h,v+=vs,200,"Financial Statements Password",Normal,FSAPIPassword,false,0);
  ButtonFrame(h,v=v+40,100,2,"Financial Statements Mode");
  RadioButton(h,v,0,0,"Test",FSMode);
  RadioButton(h,v+=16,1,0,"Live",FSMode);
  
  EndWindow;

  WindowBegin("Company Info Settings",CompanyInfoTClass,CGSbl,SRType);
  SetBlid(CompanyInfoBlock);
  SetWRect(20,80,570,200);
  Sizeable(-1,-1,0,0);
  CheckBox(h,v=20,0,"Search for Historic Data",CheckHistory);
  
  EndWindow;

  return;
end;

window CompanyInfoChooseWClass:3
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,v,vm,vs,vs2;
  record ORVc ORr;
  row ORVc ORrw;
  Integer i,rwcnt;

  WindowBegin("Get Existing Company Info",CompanyInfoChooseWClass,CGother,-);
  UseView(ORVc);
  DynamicWindow;
  if (CurWindow>0) then begin
    GetWindowRecord(CurWindow,ORr);
    rwcnt = MatRowCnt(ORr);
  end;

  SetWRect(20,80,370,170+(35*rwcnt));
  AutoSizeWindow(false);  

  h = 50; h2 = 250; v=20; vs = 30;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ORr,i,ORrw);
    HalPushButtonTag(h,v,h+250,v+20,"CompanyInfoChooseWClassSelect",ORrw.PickingDate & " (" & ORrw.Price & ") - " & StringFromSet(30900,ORrw.Perceptions) ,ORrw.Perceptions & ":" & ORrw.GroupOrdRow);
    v = v + vs;
  end;
  v = v+10;
  HalPushButton(h,v,h+250,v+20,"CompanyInfoChooseWClassNew","Receive New Data");
  h = h + 50;
  HalPushButton(h,v+=vs,h+150,v+20,"CompanyInfoChooseWClassCancel","Cancel");
  EndWindow;

  return;
end;


window CreditinfoFieldAssignBlockTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real v,vs,h,h2,h3,t,tilenr,vm,pos;
  string 255 label1,label2,label3,label4,label5;
  
  WindowBegin("Creditinfo import fields assign",CreditinfoFieldAssignBlockTClass,CGHbl,HBlRecType);
  SetBlid(CreditinfoFieldAssignBlock);
 // Sizeable(-1,-1,0,0);
  SetWRect(20,80,900,457);
  Sizeable(-1,-1,0,0);
  MatrixBegin(20,20,-50,-20,-,99);
  Flip(0);
    MatCol(1,24,"Register",0,Register,false,StrSetSClass);
    MatCol(1,124,"Type",0,DataType,false,SetSClass);
    MatCol(1,220,"Field",0,FieldName,false,0);
  Flip(1);
    MatCol(1,-550,"Path",0,ImportNode,false,0);
    MatCol(1,-290,"XML Attribute",0,XMLAtribute,false,0); 
    MatCol(1,-90,"Invert Yes/No",0,Invert,false,SetSClass); 
  Flip(2);
    MatCol(1,-400,"XML Attribute",0,XMLAtribute,false,0); 
  Flip(3);
    MatCol(1,-400,"Exclude XML Attribute",0,ExcludeXMLAtribute,false,0);
  Flip(4);
    MatCol(1,-350,"Source",0,Source,false,SetSClass);
    MatCol(1,-260,"Separator for attributes",0,Separator,false,0);
    MatCol(1,-80,"Get Order",0,GetOrder,false,SetSClass);
  Flip(5);
    MatCol(1,-400,"Attr From",0,XMLAtributeFrom,false,0);
    MatCol(1,-250,"Val",0,XMLAtributeFromVal,false,0);
    MatCol(1,-200,"Attr To",0,XMLAtributeTo,false,0);
    MatCol(1,-50,"Val",0,XMLAtributeToVal,false,0);
  EndMatrix;
  Flip(6);
    MatCol(1,-400,"Excl. Attr From",0,ExcludeXMLAtributeFrom,false,0);
    MatCol(1,-250,"Val",0,ExcludeXMLAtributeFromVal,false,0);
    MatCol(1,-200,"Excl. Attr To",0,ExcludeXMLAtributeTo,false,0);
    MatCol(1,-50,"Val",0,ExcludeXMLAtributeToVal,false,0);
  EndMatrix;
  vs = 22;
  v = 24; VTab(-35,v,-16,v+vs,ToolFlip,1,"A");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,2,"B");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,3,"C");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,4,"D");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,5,"E");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,6,"F");
  EndWindow;
  return;
end;

window SWExecListLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Executive List",SWExecListLClass,CGmlist,-);
  SetWRect(20,80,660,298);
  Sizeable(-1,-1,0,0);
  UseView(SWExecListVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Main ID",MainID,false,Main);
  RlColKey(164,164,"Exec ID",ExecId,false,ExecId);
  RlCol(-364,-364,"Type",Type,false);
  RlCol(-164,-164,"Import Date",ImpDate,false);
  RlCol(-80,-80,"Import Time",ImpTime,false);
  SearchField("Search");
  EndWindow;
end;


window SWExecPersonDataLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Executive Data",SWExecPersonDataLClass,CGmlist,-);
  SetWRect(20,80,660,298);
  Sizeable(-1,-1,0,0);
  UseView(SWExecPersonDataVc);
  SpawnClass(SWExecPersonDataDClass);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Comp ID",ExecId,false,Main);
  RlColKey(164,164,"Name",Name,false,Name);
  RlColKey(-200,-200,"Type",Type,false,Type);
  SearchField("Search");
  EndWindow;
end;



window SWExecPersonDataDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs,h2,h3,h4,h5;

  WindowBegin("Receipt Connection",SWExecPersonDataDClass,CGview,-);
  UseView(SWExecPersonDataVc);
  SetWRect(20,80,880,621);
  h = 80; v = 27; h2 = 300; h3 = 480;
  vs = 20;
  
    EditField(h,v=6,120,"ExecId",ViewOnly,ExecId,false,0);
    EditField(h,v+=vs,120,"Name",ViewOnly,Name,false,0);
    EditField(h,v+=vs,120,"ImpDate",ViewOnly,ImpDate,false,0);
    EditField(h,v+=vs,120,"ImpTime",ViewOnly,ImpTime,false,0);
    MatrixBegin(10,v+=40,-30,-40,-,99);
    MatCol(1,24,"CompanyID",0,CompanyID,false,0);
    MatCol(1,100,"CompanyName",0,CompanyName,false,0);
    MatCol(1,200,"UnpaidDebtsCount",0,UnpaidDebtsCount,false,0);
    MatCol(1,300,"PaidDebtsCount",0,PaidDebtsCount,false,0);
    MatCol(1,-320,"HasArrests",0,HasArrests,true,0);
    MatCol(1,-240,"HasClaims",0,HasClaims,false,0);
    MatCol(1,-160,"HasLawsuits",0,HasLawsuits,false,0);
    MatCol(1,-80,"Status",0,Status,false,0);
    EndMatrix;

  EndWindow;
  return;
end;

window SWBancruptTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs,v2,vs2,hm;
  WindowBegin("Automatic Tasks",SWBancruptTClass,CGHbl,HBlRecType);
  SetBlid(SWBankruptcyStatusesBlock);
  SetWRect(20,80,350,350);
  Sizeable(-1,-1,0,0);
  MatrixBegin(h,v,-31,-20,-,10);
  MatCol(1,24,"Status",0,Status,false,0);
  EndMatrix;
  EndWindow;
end;