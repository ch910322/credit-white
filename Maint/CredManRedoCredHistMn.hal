//<halrule>server-only</halrule>
external updating procedure UpdateCredHistInvoice(var record IVVc,record IVVc);
external updating procedure SplitLoanPaymentsInReceipt(record IPVc,Boolean);
external updating procedure UpdateCredHistBalance(Longint,Longint,Integer);
external function Integer GetInterestPaymentType(record CredManVc);
external updating procedure CreateCredHist(Longint,Integer,string,val,Integer,string,Date,Longint,Date,var Longint,Date,Date,Integer,Longint,val,Longint,val);

function Longint GetCredHistNrWithItem(Longint ivnr,string item)
begin
  Boolean TrHs;
  Longint res;
  record CredHistVc CredHistr;

  TrHs = true;
  CredHistr.RecordNr = ivnr;
  CredHistr.RecordType = 0;
  while (LoopKey("RecordNr",CredHistr,2,TrHs)) begin
    if (CredHistr.RecordNr!=ivnr or CredHistr.RecordType!=0) then begin
      TrHs = false;
    end else begin
      if (item==CredHistr.ArtCode) then begin
        res = CredHistr.SerNr;
        TrHs = false;
      end;
    end;
  end;

  GetCredHistNrWithItem = res;
  return;
end;

updating procedure TreatSinglePaymentOrder(record VIVc VIr,record CredManVc CredManr)
begin
  Longint histnr;
  record OPrsVc OPrsr;
  record OPVc OPr;
  row OPVc OPrw;
  Integer i,rwcnt;
  Boolean TrHs;

  TrHs = true;
  OPrsr.VINr = VIr.SerNr;
  OPrsr.TransType = kOPrsTransTypePayment;
  while (LoopKey("VIKey",OPrsr,2,TrHs)) begin
    if (OPrsr.VINr!=VIr.SerNr or OPrsr.TransType!=kOPrsTransTypePayment) then begin
      TrHs = false;
    end else begin
      OPr.SerNr = OPrsr.TransNr;
      if (ReadFirstMain(OPr,1,true)) then begin
        rwcnt = MatRowCnt(OPr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(OPr,i,OPrw);
          if (OPrw.VISerNr==VIr.SerNr) then begin
            CreateCredHist(OPr.SerNr,18,VIr.VECode,OPrw.RecVal,5,"",OPr.TransDate,VIr.CustCredManNr,OPr.TransDate,histnr,"","",1,-1,OPrw.RecVal,-1,blankval);
            UpdateCredHistBalance(VIr.CustCredManNr,OPr.SerNr,5);
          end;
        end;
      end;
    end;
  end;

  return;
end;

updating procedure TreatSingleAgreement(record CredManVc CredManr)
begin
  record IVVc IV3r,IVr,oldIVr;
  record CredHistVc CredHistr;
  Boolean TrHs,TrHs2;
  record IPrsVc IPrsr;
  record IPVc IPr,oldIPr;
  row IPVc IPrw;
  Integer i,rwcnt,int_type;
  record VIVc VIr;
  vector Boolean vVISerNr;
  array string 255 aVISerNr;

  CredHistr.CredManNr = CredManr.SerNr;
  TrHs = true;
  while (LoopKey("CredManTypeDate",CredHistr,1,TrHs)) begin
    if (CredHistr.CredManNr!=CredManr.SerNr) then begin
      TrHs = false;
    end else begin
      if (CredHistr.ChargeType!=11) then begin
        RecordRemove(CredHistr);
        StepBack(CredHistr);
      end;
    end;
  end;

  TrHs = true;
  IVr.CustCode = CredManr.CustCode;
  while (LoopKey("CustCode",IVr,1,TrHs)) begin
    if (IVr.CustCode!=CredManr.CustCode) then begin
      TrHs = false;
    end else begin
      if (IVr.CustCredManNr==CredManr.SerNr and IVr.OKFlag==1) then begin
        RecordCopy(oldIVr,IVr);
        UpdateCredHistInvoice(IVr,IV3r);
        RecordUpdate(oldIVr,IVr,false);//no checks. we need this info to be inside 
        ResetLoop(IPrsr);
        RecordClear(IPrsr);
        TrHs2 = true;
        IPrsr.IVNr = IVr.SerNr;
        IPrsr.TransType = 1;
        while (LoopKey("IVKey",IPrsr,2,TrHs2)) begin
          if (IPrsr.IVNr!=IVr.SerNr or IPrsr.TransType!=1) then begin
            TrHs2 = false;
          end else begin
            IPr.SerNr = IPrsr.TransNr;
            if (ReadFirstMain(IPr,1,true)) then begin
              RecordCopy(oldIPr,IPr);
              rwcnt = MatRowCnt(IPr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(IPr,i,IPrw);
                if (IPrw.InvoiceNr==IVr.SerNr) then begin
                  if (IPrw.CredHistNr>0) then begin
                    if (nonblank(IPrw.CredHistItem)) then begin
                      IPrw.CredHistNr = GetCredHistNrWithItem(IVr.SerNr,IPrw.CredHistItem);
                    end else begin
                      IPrw.CredHistNr = -1;
                    end;
                    MatRowPut(IPr,i,IPrw);
                  end;
                end;
              end;
              RecordUpdate(oldIPr,IPr,false);

              for (i=rwcnt-1;i>=0;i=i-1) begin
                MatRowGet(IPr,i,IPrw);
                if (IPrw.InvoiceNr!=IVr.SerNr) then begin
                  MatRowDelete(IPr,i);
                end;
              end;
              SplitLoanPaymentsInReceipt(IPr,true);
            end;
          end;
        end;
      end;
    end;
  end;

  int_type = GetInterestPaymentType(CredManr);
  TrHs = true;
  VIr.CustCredManNr = CredManr.SerNr;
  while (LoopKey("CustCredManNr",VIr,1,TrHs)) begin
    if (VIr.CustCredManNr != CredManr.SerNr) then begin
      TrHs = false;
    end else begin
      if (VIr.OKFlag==1) then begin
        if (int_type==2 or VIr.CredManExtraPayment==1) then begin
          vVISerNr[VIr.SerNr] = true;
          TreatSinglePaymentOrder(VIr,CredManr);
        end;
      end;
    end;
  end;

  if (CredManr.VINr>0) then begin
    if (vVISerNr[CredManr.VINr]==false) then begin
      VIr.SerNr = CredManr.VINr;
      if (ReadFirstMain(VIr,1,true)) then begin
        if (VIr.OKFlag==1) then begin
          if (int_type==2 or VIr.CredManExtraPayment==1) then begin
            TreatSinglePaymentOrder(VIr,CredManr);
          end;
        end;
      end;
    end;
  end;

  return;
end;

global
updating procedure CredManRedoCredHistMn(record RcVc RepSpec)
begin
  record CredManVc CredManr;

  if (RepSpec.long1>0) then begin
    CredManr.SerNr = RepSpec.long1;
    if (ReadFirstMain(CredManr,1,true)) then begin
      TreatSingleAgreement(CredManr);
    end;
  end else begin
    while (LoopMain(CredManr,1,true)) begin
      if ((blank(CredManr.endDate) or CredManr.endDate>CurrentDate) and CredManr.OKFlag==1) then begin
        TreatSingleAgreement(CredManr);
      end;
    end;
  end;
  return;
end;