//<halrule>server-only</halrule>
external updating procedure CreateSingleAgreementInvoice2(record CredManVc,Date,var record IVVc,string,Boolean,Boolean);

global
updating function Boolean LoopAndGenLoanAgreementInvoice(var record RcVc RepSpec,var record IVVc nIVr)
begin
  Boolean res,TrHs,testf;
  record CredManVc CredManr;
  record IVVc IVr;
  
  TrHs = true;
  CredManr.Approved = 1;
  SetLoopPosition(CredManr,RepSpec.long1);
  while (LoopKey("Approved",CredManr,1,TrHs)) begin
    if (CredManr.Approved!=1) then begin
      TrHs = false;
    end else begin
      testf = true;
      RepSpec.long1 = GetLoopPosition(CredManr);
      res = true;
      if (RepSpec.long2>-1 and CredManr.SerNr!=RepSpec.long2) then begin
        testf = false;
      end;
      if (nonblank(RepSpec.f1) and CredManr.CustCode!=RepSpec.f1) then begin
        testf = false;
      end;
      if (nonblank(RepSpec.f2) and CredManr.SalesMan!=RepSpec.f2) then begin
        testf = false;
      end;
      if (testf) then begin
        CreateSingleAgreementInvoice2(CredManr,RepSpec.d1,IVr,"",false,true);
        
        RecordCopy(nIVr,IVr);
        TrHs = false;
        logtext(0,"CredManr sernr " & CredManr.SerNr);
      end;
    end;
  end;
  
  millisleep(500);
  logtext(0,RepSpec.long1 & " LoopAndGenLoanAgreementInvoice RES " & res);
  LoopAndGenLoanAgreementInvoice = res;
  return;
end;

global
procedure GenLoanInvoicesMn(record RcVc RepSpec)
begin
  record IVVc nIVr;
  
  while (qupdating.LoopAndGenLoanAgreementInvoice(RepSpec,nIVr)) begin//nIVr is needed for auto invoicing
    logtext(0,"GenLoanInvoicesMn " & RepSpec.long1);
  end;

  return;
end;