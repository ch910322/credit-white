//<halrule>server-only</halrule>
external updating procedure CreateSingleAgreementInvoice2(record CredManVc,Date,var record IVVc,string,Boolean,Boolean);
forward procedure recursiveGenLoanInvoicesMn(var record RcVc,var record IVVc);
external inner function Date DateFromString(string,string);

global
updating function Boolean LoopAndGenLoanAgreementInvoice(var record RcVc RepSpec,var record IVVc nIVr)
begin
  Boolean res,TrHs,testf;
  record CredManVc CredManr;
  record IVVc IVr;
  
  TrHs = true;
  CredManr.Approved = 1;
  SetLoopPosition(CredManr,RepSpec.long1);
  while (LoopKey("Approved",CredManr,1,TrHs)) begin
    if (CredManr.Approved!=1) then begin
      TrHs = false;
    end else begin
      testf = true;
      RepSpec.long1 = GetLoopPosition(CredManr);
      res = true;
      if (RepSpec.long2>-1 and CredManr.SerNr!=RepSpec.long2) then begin
        testf = false;
      end;
      if (nonblank(RepSpec.f1) and CredManr.CustCode!=RepSpec.f1) then begin
        testf = false;
      end;
      if (nonblank(RepSpec.f2) and CredManr.SalesMan!=RepSpec.f2) then begin
        testf = false;
      end;
      if (testf) then begin
        CreateSingleAgreementInvoice2(CredManr,RepSpec.d1,IVr,"",false,true);
        
        RecordCopy(nIVr,IVr);
        TrHs = false;
        logtext(0,"CredManr sernr " & CredManr.SerNr);
      end;
    end;
  end;
  
  logtext(0,RepSpec.long1 & " LoopAndGenLoanAgreementInvoice RES " & res);
  LoopAndGenLoanAgreementInvoice = res;
  return;
end;

global updating procedure recursiveGenLoanInvoicesMn1(var record RcVc RepSpec,var record IVVc nIVr)
begin
  boolean res;
  
  res = LoopAndGenLoanAgreementInvoice(RepSpec,nIVr);
  if(res)then begin
    recursiveGenLoanInvoicesMn(RepSpec,nIVr);
  end;
  
return;
end;

procedure recursiveGenLoanInvoicesMn(var record RcVc RepSpec,var record IVVc nIVr)
begin
  boolean res;
  
  
  queued.recursiveGenLoanInvoicesMn1(RepSpec,nIVr);
  
return;
end;

global
procedure GenLoanInvoicesMn(record RcVc RepSpec)
begin
  record IVVc nIVr;
  
  while (qupdating.LoopAndGenLoanAgreementInvoice(RepSpec,nIVr)) begin//nIVr is needed for auto invoicing
    logtext(0,"GenLoanInvoicesMn " & RepSpec.long1);
  end;

  return;
end;

global
procedure GenLoanInvoicesTest1Mn(string args)
begin
  Longint pos;
  string 255 arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,compno;
  record RcVc RepSpec;
  Integer oldcomp;
  record IVVc nIVr;
  
  oldcomp = CurrentCompany;
  GetNextSubString(args,pos,"|",compno);
  SetCompany(StringToInt(compno),false);
  
  GetNextSubString(args,pos,"|",arg1);
  GetNextSubString(args,pos,"|",arg2);
  GetNextSubString(args,pos,"|",arg3);
  GetNextSubString(args,pos,"|",arg4);
  
  RepSpec.d1 = DateFromString(arg1,"YYYY-MM-DD");
  RepSpec.f1 = arg2;
  RepSpec.f2 = arg3;
  RepSpec.long2 = StringToLongInt(arg4);
  
  logtext(0,"RepSpec.d1 " & RepSpec.d1);
  logtext(0,"RepSpec.f1 " & RepSpec.f1);
  logtext(0,"RepSpec.f2 " & RepSpec.f2);
  logtext(0,"RepSpec.long2 " & RepSpec.long2);
  
  recursiveGenLoanInvoicesMn(RepSpec,nIVr);
  
return;
end;

global
updating procedure GenLoanInvoicesTestMn(record RcVc RepSpec)
begin
  record IVVc nIVr;
  
    NewTimedTask2("GenLoanInvoicesTest1Mn","GenLoanInvoicesTest1Mn","GenLoanInvoicesTest1Mn",CurrentCompany & "|" & DateToString(RepSpec.d1,"YYYY-MM-DD") & "|" & RepSpec.f1 & "|" & RepSpec.f2 & "|" & RepSpec.long2,CurrentDate,AddSeconds(CurrentTime,1),"","");

  
  //recursiveGenLoanInvoicesMn(RepSpec,nIVr);
  
  return;
end;