//<halrule>server-only</halrule>
external procedure GetCredManOverdueInvoices(record CredManVc,record CredManSetBlock,Date,Date,var Integer,var val,var array string);
external procedure SetupLoanInvoice(record CredManVc,record CredManSetBlock,var record IVVc,Date,Date,Date,Boolean,Boolean,string);
external procedure AddLateFees(record CredManVc,record CredManSetBlock,var record IVVc,Integer,val,array string);
external updating procedure StoreLoanInvoice(var record IVVc,record CredManVc);
external function Date GetLastInvoiceDate(record CredManVc,Date);

/*
function Date GetLastInvoiceDate(record CredManVc CredManr,Date ed)
begin
  Date res;

  res = ed;
  res.day = GetDay(CredManr.FirstInvDate);
  if (res>ed) then begin
    res = AddMonth(res,-1);
  end;

  GetLastInvoiceDate = res;
  return;
end;
*/

global
updating procedure GenOverdueInvMn(record RcVc RepSpec)
begin
  record CredManVc CredManr;
  Date sd,ed;
  record CredManSetBlock CMb;
  val lateamount;
  Integer latedays;
  record IVVc IVr,oldIVr;
  array string 255 lateformula;
  
  if (blank(RepSpec.d1)) then begin
    goto LGenOverdueInvMn;
  end;
  BlockLoad(CMb);
  while (LoopMain(CredManr,1,true)) begin
    if (CredManr.OKFlag==1) then begin
      
      //sd = CredManr.FirstInvDate;
      sd = GetLastInvoiceDate(CredManr,RepSpec.d1);
      //ed = GetLastInvoiceDate(CredManr,RepSpec.d1);
      ed = RepSpec.d1;
      GetCredManOverdueInvoices(CredManr,CMb,ed,sd,latedays,lateamount,lateformula);
      if (lateamount>0) then begin
        RecordClear(IVr);
        SetupLoanInvoice(CredManr,CMb,IVr,CurrentDate,sd,ed,true,false,"");
        AddLateFees(CredManr,CMb,IVr,latedays,lateamount,lateformula);
        StoreLoanInvoice(IVr,CredManr);
      end;
    end;
  end;

LGenOverdueInvMn:;
  return;
end;