remote updating procedure CreateSingleAgreementInvoice2(record CredManVc,Date,var record IVVc,string,Boolean,Boolean);
remote procedure PasteCustInAgreementRemote(var record CredManVc,var string);
remote updating procedure TerminateCredMan(var record CredManVc,val,string,Date,Boolean);
remote procedure TerminateCredManFinish(var record CredManVc);
//remote updating procedure TerminateCredMan(var record CredManVc,var record IVVc);//old implementation
remote updating procedure DoBuyOutAgreement(record CredManVc,Date,Boolean,var record IVVc);
remote procedure CheckBuyOutAgreement(record CredManVc,var record RcVc);
remote inner procedure SetupCustPS2Rn(string,var record RcVc);
remote procedure CredManSetDatesCust(var record CredManVc,Boolean);
remote procedure GetCredManEventList(record CredManVc,var record ORVc);
external procedure GetCredManEventList2(Longint,var record ORVc);
remote updating procedure DoPauseCredMan(var record CredManVc,val,val,Date,var Boolean,var Boolean,record RcVc,var record IVVc,string,var Integer);
remote procedure PasteSuretyInCredMan(var record CredManVc,string,Integer,var string);
remote procedure GetRefinCredManData(Longint,Integer,var record RcVc,Boolean);
remote updating function Boolean DoRefinCredMan(record RcVc,var string,var record CredManVc);
external inner procedure ContactSClassOnOpen(Integer,string,var Array string,var Integer);
remote procedure GetFactoringRecord(record CredManVc,var record CredManFactVc);
remote procedure GetPayGrntRecord(record CredManVc,var record CredManPmtGrntVc);
remote procedure PrepareAgreementDocSigningSession(record AgreementDocVc,var string,var Integer);
remote function Boolean GetAgreementDoc(record CredManVc,Integer,var record AgreementDocVc);
remote updating procedure CredManMakePaymentRemote(var record CredManVc,var record VIVc,var record IVVc,string,var val,Boolean,val);
remote function Boolean GetAgreementDoc2(Longint,string,Integer,var record AgreementDocVc);
remote updating procedure CredManPartialBuyoutDo(Date,val,Longint,record RcVc,Integer,Integer,Boolean);
remote procedure GetPauseCredManNextDate(record CredManVc,var Date);
remote updating procedure RecreateAgreementSchedule(record CredManVc);
remote updating procedure RecreateAgreementSchedule2(record CredManVc,Boolean);
remote updating procedure RecreateAgreementSchedule3(record CredManVc,Boolean,Integer);

remote function Boolean ContractHasInvoiceCreated(record CredManVc);
remote updating procedure CheckAndCreateAutoMailFromInvoice(record IVVc);
remote procedure GenerateAgreementSchedule(record CredManVc,Boolean,Boolean);
remote procedure GenerateAgreementScheduleTask(record CredManVc,Boolean,Boolean);

remote function val GetRateAmount(record CredManVc,val,Integer,Date,Date,val,Boolean,Boolean);
remote updating procedure CreateManualExtraInvoice(record RcVc,var record IVVc);
remote procedure CredLegalNrSerNrSClassOnOpenWindowRemote(string,string,Date,string,string,var array string);
remote updating procedure RecreateAgreementDocument(var record AgreementDocVc,Boolean);
remote updating procedure GetCredManPropertyRecord(record CredManVc,var record CredManPropertyVc);
remote procedure CredManCalcLastMonthPrinciple(var record CredManVc);
remote procedure CredManCalcMaxMonthlyPayment(var record CredManVc);
remote procedure InvLegalInvSerieSClassRemote(Date,Date,var array string);
external inner procedure PasteFromSysList(Integer ,Integer);
remote updating procedure CM_CreatePaymentOrder(record CredManVc,record VIVc,val);
external function Boolean CheckForActiveAgreement(record CredManVc);
external function Boolean CanCredManMakePayment(record CredManVc,var string);
remote updating procedure GetCredManBOESuretyRecord(record CredManVc,var record BOESuretyVc,Integer);
remote procedure InsertCredManDocSignerName(var record CredManVc,Integer);
remote procedure PasteBOEInCredMan(var record CredManVc,string,Integer);
remote procedure PasteSubordinationInCredMan(var record CredManVc,string,Integer);
remote procedure PasteBOESignerInCredMan(var record CredManVc,string,Integer);
remote procedure PasteSuretyInBOESurety(var record BOESuretyVc,string,Integer);
remote procedure InsertBOESuretySignerName(var record BOESuretyVc,Integer);
remote updating procedure GetCredManMoneyReceiverRecord(record CredManVc,var record CredManMoneyRecVc);
remote updating procedure CreatePaymentFakeReceipt(record CredManVc,record IVVc);
remote procedure CheckBuyOutAgreementAsync(record CredManVc,Date,Integer);
remote function Boolean HasCredManChanges(record CredManVc);
remote function Boolean ContractHasHistory(record CredManVc);
remote function Boolean AgreementPaidOut(record CredManVc,var val);
remote function Boolean AgreementPaidOut2(record CredManVc,var val);
remote function Date GetLastInvoiceDate(record CredManVc,Date);
remote inner procedure PrintEBSDocument(string,string,record RcVc,string,string,var area);
remote inner function Boolean ExternalDocumentEnabled(string);
remote updating procedure PrintBuyOutSummary(record CredManVc,record RcVc,var string,area,var record MailVc);
remote updating procedure CredManGracePeriodRemote(record RcVc,record CredManVc,var string);
external function Boolean UseFullBuyoutProcedure();
remote function Boolean FindFirstFeeInvoice(record CredManVc,var record IVVc);
remote procedure RecreateAgreementSchedule4(record CredManVc,Boolean,Boolean);
remote procedure CredManPartialBuyoutFinish(Boolean,record CredManVc);
remote updating procedure CredManCreditBeforePartialBuyout(Integer,record RcVc);
remote function Date GetLastInvDate(record CredManVc);
remote procedure CredManDoPauseFinish(record CredManVc,Boolean,Boolean);
remote updating procedure CredManCreditBeforePause(Integer,Integer,record RcVc);
remote updating function boolean RA_CreateCredManOfferEmail(record RcVc, record CredManVc,var record MailVc);
external outer function Boolean IsOmegaCustomer;
remote procedure CheckBuyOutAgreementOmega(record CredManVc,var record ORVc, Boolean);
external procedure GetItemName(string,var string);

procedure UpdateCredManSoftFields(Integer wn,record CredManVc CredManr,Boolean allf)
begin
  record RcVc RepSpec;
  val calcfees,paidout;
/*
  PutWindowString(wn,"annualrate",(CredManr.IntRate*12) & " %");
  calcfees = GetMonthlyFees(CredManr,0);
  if (calcfees>0) then begin
    PutWindowString(wn,"monthlycalcfees",calcfees & " %");
  end else begin
    PutWindowString(wn,"monthlycalcfees","");
  end;
  PutWindowString(wn,"monthlyfixedfees",GetMonthlyFees(CredManr,1));
*/  
  if (allf) then begin
    threadremoteasync.CheckBuyOutAgreementAsync(CredManr,CurrentDate,wn);
  end;
  if (HasCredManChanges(CredManr)) then begin
    PutWindowString(wn,"HasChanges",1);
  end else begin
    PutWindowString(wn,"HasChanges",0);
  end;
  AgreementPaidOut2(CredManr,paidout);
  PutWindowString(wn,"topayout",CredManr.InvSum4-paidout);

  return;
end;

global
procedure CheckBuyOutAgreementCallBack(record RcVc RepSpec,Integer wn)
begin
  
    PutWindowString(wn,"buyoutvalue",RepSpec.vals2);
    PutWindowString(wn,"remainingprinciple",RepSpec.f13);
    PutWindowString(wn,"totaldue",RepSpec.vals4);
    PutWindowString(wn,"acumpenalty",RepSpec.f12);
    PutWindowString(wn,"lateprincipal",RepSpec.f10);
    PutWindowString(wn,"lateinterest",RepSpec.f11);
  return;
end;

global
procedure RecalcCredManFees(var record CredManVc CredManr)
begin
  Date frdate,todate;
  val calcbal,tmp;
  row CredManVc CredManrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(CredManr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CredManr,i,CredManrw);
    if (CredManrw.ChargeType>=2) then begin
      tmp = GetRateAmount(CredManr,CredManrw.vRebate,1,frdate,todate,calcbal,true,true);
      if (CredManrw.MinSum>0 and tmp<CredManrw.MinSum) then begin
        tmp = CredManrw.MinSum;
      end;
      if (CredManrw.MaxSum>0 and tmp>CredManrw.MaxSum) then begin
        tmp = CredManrw.MaxSum;
      end;
      CredManrw.Sum = tmp;
      MatRowPut(CredManr,i,CredManrw);    
    end;
  end;

  return;
end;

function Boolean CredManDClassStdProlongFeeEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record CredManVc CredManr;

  if (changedf) then begin  
/* why was this here?
    GetWindowRecord(wn,CredManr);
    if (CredManr.StdProlongFee<0) then begin
      CredManr.StdProlongFee = 0;
    end;
    if (CredManr.StdProlongFee>100) then begin
      CredManr.StdProlongFee = 100;
    end;
    PutWindowRecord(wn,CredManr);   
*/
  end; 
  CredManDClassStdProlongFeeEFAfter = true;
  return;
end;

function Boolean CredManDClassStdProlongPrcEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record CredManVc CredManr;

  if (changedf) then begin  
    GetWindowRecord(wn,CredManr);
    if (CredManr.StdProlongPrc<0) then begin
      CredManr.StdProlongPrc = 0;
    end;
    if (CredManr.StdProlongPrc>100) then begin
      CredManr.StdProlongPrc = 100;
    end;
    PutWindowRecord(wn,CredManr);   
  end; 
  CredManDClassStdProlongPrcEFAfter = true;
  return;
end;

function Boolean CredManDClassInstalmentMonthsEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record CredManVc CredManr;

  if (changedf) then begin  
    GetWindowRecord(wn,CredManr);
    if (CredManr.InstalmentType==4) then begin
      CredManr.InstalmentMonths = 1;
    end;
    PutWindowRecord(wn,CredManr);   
  end; 
  CredManDClassInstalmentMonthsEFAfter = true;
  return;
end;

function Boolean CredManDClassCustCodeEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record CredManVc CredManr;
  string 255 warning;

  if (changedf) then begin  
    GetWindowRecord(wn,CredManr);
    PasteCustInAgreementRemote(CredManr,warning);
    if (nonblank(warning)) then begin
      MessageBox(0,warning);
    end;
    PutWindowRecord(wn,CredManr);   
  end; 
  CredManDClassCustCodeEFAfter = true;
  return;
end;

function Boolean CredManDClassstartDateEFAfter(Integer wn,Boolean changedf,Boolean allf)
begin
  record CredManVc CredManr;

  if (changedf) then begin  
    GetWindowRecord(wn,CredManr);
    threadremote.CredManSetDatesCust(CredManr,allf);
    PutWindowRecord(wn,CredManr);   
  end; 
  CredManDClassstartDateEFAfter = true;
  return;
end;

function Boolean CredManDClassInvSumEFAfter(Integer wn,Boolean changedf)
begin
  record CredManVc CredManr;

  if (changedf) then begin  
    GetWindowRecord(wn,CredManr);
    RecalcCredManFees(CredManr);
    if (CredManr.DepositSum>0) then begin
      CredManr.FinSum = CredManr.InvSum4 - CredManr.DepositSum;
    end else begin
      CredManr.FinSum = blankval;
    end;
    PutWindowRecord(wn,CredManr);   
  end; 
  CredManDClassInvSumEFAfter = true;
  return;
end;

function Boolean CredManDClassDepositSumEFAfter(Integer wn,Boolean changedf)
begin
  record CredManVc CredManr;

  if (changedf) then begin  
    GetWindowRecord(wn,CredManr);
    if (CredManr.DepositSum>0) then begin
      CredManr.FinSum = CredManr.InvSum4 - CredManr.DepositSum;
    end else begin
      CredManr.FinSum = blankval;
    end;
    PutWindowRecord(wn,CredManr);   
  end; 
  CredManDClassDepositSumEFAfter = true;
  return;
end;

function Boolean CredManDClassvRebateEFAfter(Integer wn,Boolean changedf)
begin
  record CredManVc CredManr;

  if (changedf) then begin  
    GetWindowRecord(wn,CredManr);
    RecalcCredManFees(CredManr);
    PutWindowRecord(wn,CredManr);   
  end; 
  CredManDClassvRebateEFAfter = true;
  return;
end;

global
procedure RerunWindowDefHAL(string wn)
begin
  RerunWindowDef(StringToInt(wn));
  return;
end;

function Boolean ReopenCredManTypeWindow(Integer wn,record CredManVc CredManr,Integer type)
begin
  Boolean res;
  
  if (CredManr.LoanType!=type) then begin
    CloseWindow(wn);
    OpenWindow("CredMan" & CredManr.LoanType & "DClass",1,0,"","",CredManr);
    res = true;
  end;

  ReopenCredManTypeWindow = res;
  return;
end;

function Boolean CredManDClassTypeEFAfter(Integer wn,Boolean changedf)
begin
  record CredManVc CredManr;
  record CredManTypeVc CMTr;
  Integer oldtype;

  if (changedf) then begin  
    GetWindowRecord(wn,CredManr);
    CMTr.Code = CredManr.Type;
    oldtype = CredManr.LoanType;
    if (ReadFirstMain(CMTr,1,true)) then begin
      CredManr.OverdueRateType = CMTr.OverdueRateType;
      if (CredManr.PrincipleDelayInterest==0) then begin
        CredManr.PrincipleDelayInterest = CredManr.IntRate;
      end;
      Credmanr.LoanType = CMTr.LoanType;
      Credmanr.UseCompensationInvoices = CMTr.UseCompensationInvoices;
      Credmanr.LastPrincipleWithExtraMonth = CMTr.LastPrincipleWithExtraMonth;
      CredManr.RealInterestFlag = CMTr.RealInterestFlag;
      CredManr.BuyoutFeeFixed = CMTr.BuyoutFeeFixed;
      CredManr.BuyoutFeePrc = CMTr.BuyoutFeePrc;
      CredManr.BuyoutFeeMonths = CMTr.BuyoutFeeMonths;
      CredManr.DaysInMonth = CMTr.DaysInMonth;
    end;
    RecalcCredManFees(CredManr);
    if (ReopenCredManTypeWindow(wn,CredManr,oldtype)==false) then begin
      PutWindowRecord(wn,CredManr); 
    end;
  end; 
  CredManDClassTypeEFAfter = true;
  return;
end;

function Boolean CredManDClassIntRateEFAfter(Integer wn,Boolean changedf)
begin
  record CredManVc CredManr;
  record CredManTypeVc CMTr;

  if (changedf) then begin  
    GetWindowRecord(wn,CredManr);
    CredManr.PrincipleDelayInterest = CredManr.IntRate;
    PutWindowRecord(wn,CredManr); 
  end; 
  CredManDClassIntRateEFAfter = true;
  return;
end;

function Boolean CredManDClassSuretyProviderEFAfter(Integer wn,Boolean changedf,Integer num)
begin
  record CredManVc CredManr;
  string 255 warning;

  if (changedf) then begin  
    GetWindowRecord(wn,CredManr);
    PasteSuretyInCredMan(CredManr,GetFieldValueByName(CredManr,"SuretyProvider" & num,-1),num,warning);
    if (nonblank(warning)) then begin
      MessageBox(0,warning);
    end;
    PutWindowRecord(wn,CredManr);   
  end; 
  CredManDClassSuretyProviderEFAfter = true;
  return;
end;

function Boolean CredManDClassSuretySignerEFAfter(Integer wn,Boolean changedf,Integer num)
begin
  record CredManVc CredManr;
  record CUVc CUr;

  if (changedf) then begin  
    GetWindowRecord(wn,CredManr);
    InsertCredManDocSignerName(CredManr,num);
    PutWindowRecord(wn,CredManr);   
  end; 
  CredManDClassSuretySignerEFAfter = true;
  return;
end;

function Boolean CredManDClassSubordSignerEFAfter(Integer wn,Boolean changedf,Integer num)
begin
  record CredManVc CredManr;
  record CUVc CUr;

  if (changedf) then begin  
    GetWindowRecord(wn,CredManr);
    //InsertCredManSubordSignerName(CredManr,num);
    PutWindowRecord(wn,CredManr);   
  end; 
  CredManDClassSubordSignerEFAfter = true;
  return;
end;

function Boolean CredManDClassBOEEFAfter(Integer wn,Boolean changedf,Integer num)
begin
  record CredManVc CredManr;
  string 255 warning;

  if (changedf) then begin  
    GetWindowRecord(wn,CredManr);
    PasteBOEInCredMan(CredManr,GetFieldValueByName(CredManr,"BOE" & num & "Code",-1),num);
    PutWindowRecord(wn,CredManr);   
  end; 
  CredManDClassBOEEFAfter = true;
  return;
end;

function Boolean CredManDClassSubordEFAfter(Integer wn,Boolean changedf,Integer num)
begin
  record CredManVc CredManr;
  string 255 warning;

  if (changedf) then begin  
    GetWindowRecord(wn,CredManr);
    PasteSubordinationInCredMan(CredManr,GetFieldValueByName(CredManr,"Subordination" & num,-1),num);
    PutWindowRecord(wn,CredManr);   
  end; 
  CredManDClassSubordEFAfter = true;
  return;
end;

function Boolean CredManDClassBOESignerEFAfter(Integer wn,Boolean changedf,Integer num)
begin
  record CredManVc CredManr;
  string 255 warning;

  if (changedf) then begin  
    GetWindowRecord(wn,CredManr);
    PasteBOESignerInCredMan(CredManr,GetFieldValueByName(CredManr,"BOE" & num & "Code",-1),num);
    PutWindowRecord(wn,CredManr);   
  end; 
  CredManDClassBOESignerEFAfter = true;
  return;
end;


function Boolean CredManDClassLoanToValueEFAfter(Integer wn,Boolean changedf,Integer num)
begin
  record CredManVc CredManr;

  if (changedf) then begin  
    GetWindowRecord(wn,CredManr);
    if (CredManr.LoanToValue<0) then begin
      CredManr.LoanToValue = 0;
    end;
    if (CredManr.LoanToValue>100) then begin
      CredManr.LoanToValue = 100;
    end;
    //CalculateFactoringValue(CredManr);
    PutWindowRecord(wn,CredManr);   
  end; 
  CredManDClassLoanToValueEFAfter = true;
  return;
end;

function Boolean CredManDClassDayValueEFAfter(Integer wn,Boolean changedf,string fieldname)
begin
  record CredManVc CredManr;
  Integer value;

  if (changedf) then begin  
    GetWindowRecord(wn,CredManr);
    value = StringToInt(GetFieldValueByName(CredManr,fieldname,-1));
    if (value<1) then begin
      value = 1;
    end;
    if (value>31) then begin
      value = 31;
    end;
    SetFieldValueByName(CredManr,fieldname,value,-1);
    PutWindowRecord(wn,CredManr);   
  end; 
  CredManDClassDayValueEFAfter = true;
  return;
end;

function Boolean CredManDClassMaxMonthlyPaymentEFAfter(Integer wn,Boolean changedf)
begin
  record CredManVc CredManr;

  if (changedf) then begin  
    DeselectWindow(wn,true);
    GetWindowRecord(wn,CredManr);
    threadremote.CredManCalcLastMonthPrinciple(CredManr);
    PutWindowRecord(wn,CredManr);   
  end; 
  CredManDClassMaxMonthlyPaymentEFAfter = true;
  return;
end;

function Boolean CredManDClassLastMonthPrincEFAfter(Integer wn,Boolean changedf)
begin
  record CredManVc CredManr;

  if (changedf) then begin  
    DeselectWindow(wn,true);
    GetWindowRecord(wn,CredManr);
    threadremote.CredManCalcMaxMonthlyPayment(CredManr);
    PutWindowRecord(wn,CredManr);   
  end; 
  CredManDClassLastMonthPrincEFAfter = true;
  return;
end;


global
function Boolean CredManDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;
  record CredManVc CredManr;
  Integer num;

  if (changed==0) then begin
    goto LCredManDClassAfterEditField;
  end;
  if (fieldname=="InstalmentMonths" or fieldname=="InstalmentType") then begin//call standard function as well
    res = CredManDClassInstalmentMonthsEFAfter(wn,rownr,changed!=0);
  end;

  switch (fieldname) begin
    case "StdProlongFee":     res = CredManDClassStdProlongFeeEFAfter(wn,rownr,changed!=0);
    case "StdProlongPrc":     res = CredManDClassStdProlongPrcEFAfter(wn,rownr,changed!=0);
    case "startDate":         res = CredManDClassstartDateEFAfter(wn,changed!=0,true);
    case "MonthlyPaymentDay": res = CredManDClassstartDateEFAfter(wn,changed!=0,true);
    case "LoanToValue":       res = CredManDClassLoanToValueEFAfter(wn,changed!=0,3);
    case "PayGrntPayDate1":   res = CredManDClassDayValueEFAfter(wn,changed!=0,fieldname);
    case "PayGrntPayDate2":   res = CredManDClassDayValueEFAfter(wn,changed!=0,fieldname);
    case "PayGrntReportDate1":res = CredManDClassDayValueEFAfter(wn,changed!=0,fieldname);
    case "PayGrntReportDate2":res = CredManDClassDayValueEFAfter(wn,changed!=0,fieldname);
    case "MinSum":            res = CredManDClassvRebateEFAfter(wn,changed!=0);
    case "MaxSum":            res = CredManDClassvRebateEFAfter(wn,changed!=0);
    otherwise 
      if (left(fieldname,6)=="Surety" or left(fieldname,3)=="BOE" or left(fieldname,13)=="Subordination") then begin
        if (left(fieldname,14)=="SuretyProvider") then begin
          num = StringToInt(right(fieldname,1));
          res = CredManDClassSuretyProviderEFAfter(wn,changed!=0,num);
        end;
        if (left(fieldname,3)=="BOE" and right(fieldname,4)=="Code") then begin
          num = StringToInt(mid(fieldname,3,1));
          res = CredManDClassBOEEFAfter(wn,changed!=0,num);
        end;
        if (left(fieldname,13)=="Subordination" and len(fieldname)==14) then begin
          num = StringToInt(mid(fieldname,13,1));
          res = CredManDClassSubordEFAfter(wn,changed!=0,num);
        end;
        if (left(fieldname,3)=="BOE" and right(fieldname,6)=="Signer") then begin
          num = StringToInt(mid(fieldname,3,1));
          res = CredManDClassBOESignerEFAfter(wn,changed!=0,num);
        end;
        
        if (left(fieldname,6)=="Surety" and right(fieldname,6)=="Signer") then begin
          num = StringToInt(mid(fieldname,6,1));
          res = CredManDClassSuretySignerEFAfter(wn,changed!=0,num);
        end;
        if (left(fieldname,13)=="Subordination" and right(fieldname,6)=="Signer") then begin
          num = StringToInt(mid(fieldname,6,1));
          res = CredManDClassSubordSignerEFAfter(wn,changed!=0,num);
        end;
      end else begin
        res = inner.CredManDClassAfterEditField(wn,fieldname,fn,rownr,changed);
      end;
  end;
  switch (fieldname) begin
    case "DepositSum": res = CredManDClassDepositSumEFAfter(wn,changed!=0);
    case "DepositPrc": res = CredManDClassDepositSumEFAfter(wn,changed!=0);
    case "CustCode": res = CredManDClassCustCodeEFAfter(wn,rownr,changed!=0);
    case "InstalmentMonths": res = CredManDClassstartDateEFAfter(wn,changed!=0,false);
    case "MaxMonthlyPayment": res = CredManDClassMaxMonthlyPaymentEFAfter(wn,changed!=0);
    case "LastMonthPrinc": res = CredManDClassLastMonthPrincEFAfter(wn,changed!=0);
    case "InvSum4": res = CredManDClassInvSumEFAfter(wn,changed!=0);
    case "vRebate": res = CredManDClassvRebateEFAfter(wn,changed!=0);
    case "Type": res = CredManDClassTypeEFAfter(wn,changed!=0);
    case "IntRate": res = CredManDClassIntRateEFAfter(wn,changed!=0);
  end;
/*
  if (changed!=0) then begin
    GetWindowRecord(wn,CredManr);
    UpdateCredManSoftFields(wn,CredManr,false);
  end;
*/

LCredManDClassAfterEditField:;
  CredManDClassAfterEditField = res;
  return;
end;

global
procedure UpdateCredManStringList(Integer wn,record CredManVc CredManr)
begin
  string 255 tag;
  Integer i,rwcnt;
  record ORVc ORr;
  row ORVc ORrw;
  
/*
  threadremote.GetCredManEventList(CredManr,ORr);

  ClearStringList(wn);
  rwcnt = MatRowCnt(ORr);
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(ORr,i,ORrw);
    tag = ORrw.RowOrderType & ":" & ORrw.GroupOrdRow;
    AddListRow(wn,"credmanevents",1,tag,0);
    AddListData(wn,"credmanevents","date",ORrw.PlanShipRowDate);
    AddListData(wn,"credmanevents","duedate",ORrw.PickingDate);
    if (ORrw.RowOrderType==0) then begin
      AddListData(wn,"credmanevents","comment",ORrw.InloadingDate & ":" & ORrw.DespatchRowDate);
    end;
    AddListData(wn,"credmanevents","paid",ORrw.Sum-ORrw.TAX1Reb);
    AddListData(wn,"credmanevents","balance",ORrw.rowGP);
    AddListData(wn,"credmanevents","issued",ORrw.Sum);
  end;
*/

  return;
end;

updating procedure CreateCredManInvoiceDo(record CredManVc CredManr,string invno,Integer wn)
begin
  record IVVc IVr;
 
  CreateSingleAgreementInvoice2(CredManr,CurrentDate,IVr,invno,true,true);

  if (IVr.SerNr>0) then begin
    CheckAndCreateAutoMailFromInvoice(IVr);
    OpenWindow("IVDClass",1,0,"","",IVr);
  end;
  //UpdateCredManStringList(wn,CredManr);
  RerunWindowDef(wn);

  return;
end;

global
updating procedure CreateCredManInvoiceDsm()
begin
  record CredManVc CredManr;
  record RcVc RepSpec;
  Integer wn,nwn;
  record CMInvoicingBlock CIb;
  
  wn = CurWindow;
  GetWindowRecord(wn,CredManr);
  BlockLoad(CIb);
  if (CheckForActiveAgreement(CredManr)) then begin
    if (CIb.ManualInvoiceNumber==1) then begin
      nwn = OpenWindow("CredManInvNoWClass",0,wn,"","",RepSpec);
    end else begin
      CreateCredManInvoiceDo(CredManr,"",wn);
    end;
  end else begin
    MessageBox(200265,"");
  end;
  return;
end;

global
updating procedure BuyOutCredManDsm()
begin
  Integer wn;
  record CredManVc CredManr;
  record IVVc IVr;
  record RcVc RepSpec;

  wn = CurWindow;
  if (WindowState(wn)==Rs_Normal) then begin
    GetWindowRecord(wn,CredManr);
    RepSpec.long1 = CredManr.SerNr;
    RepSpec.d1 = CurrentDate;
    RepSpec.flags[1] = 1;
    OpenWindow("CredManBuyoutWClass",0,wn,"","",RepSpec);
  end;

  return;
end;

function Boolean CanTerminateWithDate(record CredManVc CredManr,Date td)
begin
  Boolean res;
  Date lastinvdate;

  res = true;
  if (blank(td)) then begin
    res = false;
  end else begin
    lastinvdate = GetLastInvoiceDate(CredManr,AddYear(CurrentDate,1));
    if (lastinvdate>=td) then begin
      res = false;
    end;
  end;

  CanTerminateWithDate = res;
  return;
end;

global
updating procedure CredManBuyoutWClassProceed()
begin
  record RcVc RepSpec;
  record CredManVc CredManr;
  Integer wn,mwn;
  record IVVc IVr;

  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,RepSpec);
  mwn = MotherWindow(wn);
  if (mwn>0) then begin
    GetWindowRecord(mwn,CredManr);
    if (CanTerminateWithDate(CredManr,RepSpec.d1)) then begin
      DoBuyOutAgreement(CredManr,RepSpec.d1,RepSpec.flags[1]==1,IVr);
      if (IVr.SerNr>0) then begin
        OpenWindow("IVDClass",1,0,"","",IVr);
      end;
      CloseWindow(wn);
    end else begin
      MessageBox(200274,"");
    end;
  end;

  return;
end;

global
updating procedure CalculateBuyOutValueStd()
begin
  Integer wn,mwn;
  record RcVc RepSpec;
  record CredManVc CredManr;
  
  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,RepSpec);
  mwn = MotherWindow(wn);
  GetWindowRecord(mwn,CredManr);
  CredManr.LetterOfDemand = StringToVal(RepSpec.f18,M4Val);
  CredManr.InsuranceCost = StringToVal(RepSpec.f19,M4Val);//Martins: it should not update agreement from check buy-out value
  PutWindowRecord(mwn,CredManr);
  if (WindowDoOK(mwn,0)) then begin
    threadremote.CheckBuyOutAgreement(CredManr,RepSpec);
    PutWindowRecord(wn,RepSpec);
  end;
  SelectWindow(wn);

  return;
end;

global
updating procedure CalculateBuyOutValueOmega()
begin
  Integer wn,mwn;
  record ORVc ORr;
  record CredManVc CredManr;
  
  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,ORr);
  mwn = MotherWindow(wn);
  GetWindowRecord(mwn,CredManr);
  //CredManr.LetterOfDemand = ORr.SumIncCom;
  //CredManr.InsuranceCost = ORr.RvrsVAT;//Martins: it should not update agreement from check buy-out value
  //PutWindowRecord(mwn,CredManr);
  if (true) then begin //if (WindowDoOK(mwn,0)) then begin
    threadremote.CheckBuyOutAgreementOmega(CredManr,ORr,false);
    PutWindowRecord(wn,ORr);
  end;
  SelectWindow(wn);

  return;
end;

global
updating procedure CalculateBuyOutValue()
begin
  if (IsOmegaCustomer) then begin
    CalculateBuyOutValueOmega;
  end else begin
    CalculateBuyOutValueStd;
  end;
  return;
end;

global
updating procedure BuyOutSummaryEmail()
begin
  Integer wn;
  record RcVc RepSpec;
  record CredManVc CredManr;
  record MailVc Mailr;
  area farea;
  string 255 errstr,fname;
  
  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,RepSpec);
  CredManr.SerNr = RepSpec.long1;
  if (ReadFirstMain(CredManr,1,true)) then begin
    if (ExternalDocumentEnabled("BuyoutSummaryForm")) then begin
      threadremote.PrintEBSDocument("BuyoutSummaryForm","",RepSpec,CredManr.SerNr,"",farea);
      if (GetAreaLength(farea)>0) then begin
        PrintBuyOutSummary(CredManr,RepSpec,errstr,farea,Mailr);
        if (blank(errstr)) then begin
          OpenWindow("MailDClass",1,0,"","",Mailr);
        end else begin
          MessageBox(0,errstr);
        end;
      end;
    end;
  end;
  SelectWindow(wn);  

  return;
end;

global
updating function Boolean CheckBuyoutValueWClassOnOpenWindow(Integer wn)
begin
  record RcVc RepSpec;
  record CredManVc CredManr;
  Integer mwn;

  GetWindowRecord(wn,RepSpec);
  RepSpec.d1 = CurrentDate;
  RepSpec.flags[1] = 1;
  mwn = MotherWindow(wn);
  GetWindowRecord(mwn,CredManr);
  RepSpec.f18 = CredManr.LetterOfDemand;
  RepSpec.f19 = CredManr.InsuranceCost;
  RepSpec.flags[2] = 1;
  PutWindowRecord(wn,RepSpec);
  CalculateBuyOutValue;

  CheckBuyoutValueWClassOnOpenWindow = false;
  return;
end;

global
updating procedure BuyOutAgreementYesNo()
begin
  record ORVc ORr;
  Integer wn;
  record CredManVc CredManr;
    
  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,ORr);
  CredManr.SerNr = ORr.SerNr;
  if (ReadFirstMain(CredManr,1,true)) then begin
    OpenWindow("BuyOutAgreementYesNoWClass",1,0,"","",ORr);
  end;
  SelectWindow(wn);  
  
  return;
end;

//same as CredManBuyoutWClassProceed, except ORVc is used
global
updating procedure BuyOutAgreementYesNoWClassYes()
begin
  record ORVc ORr;
  Integer wn,mwn;
  record IVVc IVr;
  record CredManVc CredManr;
  
  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,ORr);
  CredManr.SerNr = ORr.SerNr;
  if (ReadFirstMain(CredManr,1,true)) then begin
    if (CanTerminateWithDate(CredManr,ORr.OrdDate)) then begin
      DoBuyOutAgreement(CredManr,ORr.OrdDate,ORr.InvMark==1,IVr);
      if (IVr.SerNr>0) then begin
        OpenWindow("IVDClass",1,0,"","",IVr);
      end;
      CloseWindow(wn);
    end else begin
      MessageBox(200274,"");
    end;
  end;
  return;
end;

global
procedure BuyOutAgreementYesNoWClassClose()
begin
  
  CloseWindow(CurWindow);

  return;
end;

global
procedure CheckBuyoutValueWindowDsm()
begin
  record RcVc RepSpec;
  record ORVc ORr;
  Integer wn;
  record CredManVc CredManr;
  
  wn = CurWindow;
  GetWindowRecord(wn,CredManr);
  if (IsOmegaCustomer) then begin
    ORr.SerNr = CredManr.SerNr;
    OpenWindow("CheckBuyoutValueOmegaWClass",0,CurWindow,"","",ORr);
  end else begin
    RepSpec.long1 = CredManr.SerNr;
    OpenWindow("CheckBuyoutValueWClass",0,CurWindow,"","",RepSpec);
  end;
  return;
end;

global
procedure CUStatusCredManDsm()
begin
  record RcVc RepSpec;
  record CredManVc CredManr;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,CredManr);
  SetupCustPS2Rn(CredManr.CustCode,RepSpec);
  RepSpec.Media = mtScreen;
  RunReport(RepSpec,0);
  return;
end;

global
updating procedure PaymentScheduleCredManDsm()
begin
  Integer wn;
  record CredManVc CredManr;

  wn = CurWindow;
  GetWindowRecord(wn,CredManr);
  if (WindowState(wn)==Rs_Normal) then begin
    PrintDocument(CredManr,"CredManScheduleForm",false);//ActDocForm
  end;

  return;
end;

function Boolean ProlongInProgress(record CredManVc CredManr)
begin
  record ProlongSessionVc PSr;
  Boolean res;
  
  PSr.CredManNr = CredManr.SerNr;
  PSr.PaidFlag = 0;
  if (ReadFirstKey("CredManPaid",PSr,2,true)) then begin
    res = true;
  end;

  ProlongInProgress = res;
  return;
end;

global
procedure PauseCredManDsm()
begin
  Integer wn;
  record RcVc RepSpec;
  record CredManVc CredManr;
  Date td;
  record CMInvoicingBlock CIb;
  
  wn = CurWindow;
  GetWindowRecord(wn,CredManr);
  if (WindowState(wn)==Rs_Normal) then begin
    if (ProlongInProgress(CredManr)) then begin
      MessageBox(200233,"");
    end else begin
      threadremote.GetPauseCredManNextDate(CredManr,td);
      //RepSpec.vals1 = CredManr.ProlongMonths;
      RepSpec.d1 = td;
      RepSpec.flags[1] = 1;
      BlockLoad(CIb);
      RepSpec.f2 = CIb.FirstInvPayDeal;
      RepSpec.f3 = CurrentUser;
      RepSpec.f4 = "";
      GetItemName(CIb.ProlongItem,RepSpec.f4);
      OpenWindow("PauseCredManWClass",0,wn,"","",RepSpec);
    end;
  end;

  return;
end;

global
procedure EmailOfferDsm()
begin
  Integer wn;
  record RcVc RepSpec;
  record CredManVc CredManr;
  Date td;

  wn = CurWindow;
  GetWindowRecord(wn,CredManr);
  if (WindowState(wn)==Rs_Normal) then begin
    threadremote.GetPauseCredManNextDate(CredManr,td);
    RepSpec.d1 = td;
    OpenWindow("EmailOfferWClass",0,wn,"","",RepSpec);
  end;

  return;
end;

global
updating procedure EmailOfferWClassCreateEmail()
begin
  Integer wn,mwn,iwn;
  record CredManVc CredManr;
  record RcVc RepSpec;
  Boolean res,setf,closedf;
  record IVVc IVr;
  Integer err;
  record MailVc Mailr;
  
  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,RepSpec);
  
  mwn = MotherWindow(wn);
  if (WindowState(mwn)==Rs_Normal) then begin
    getwindowrecord(wn,RepSpec);
    GetWindowRecord(mwn,CredManr);
    if(RA_CreateCredManOfferEmail(RepSpec,CredManr,Mailr))then begin
      if (Mailr.SerNr>0) then begin
        OpenWindow("MailDClass",1,0,"","",Mailr);  
      end;
    end;
  end;
  
  if (!closedf) then begin
    CloseWindow(wn);
  end;
  
  return;
end;


global
updating procedure PauseCredManWClassPause()
begin
  Integer wn,mwn,iwn;
  record CredManVc CredManr;
  record RcVc RepSpec;
  Boolean res,setf,closedf;
  record IVVc IVr;
  Integer err;

  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,RepSpec);
  //if (RepSpec.long1>0) then begin
    mwn = MotherWindow(wn);
    if (WindowState(mwn)==Rs_Normal) then begin
      if (RepSpec.flags[2]==0 and RepSpec.flags[3]==1) then begin
        MessageBox(200264,"");
        goto LPauseCredManWClassPause;
      end;
      GetWindowRecord(mwn,CredManr);
      DoPauseCredMan(CredManr,RepSpec.vals0,RepSpec.vals1,RepSpec.d1,res,setf,RepSpec,IVr,RepSpec.f1,err);
      if (res) then begin
        PutWindowRecord(mwn,CredManr);
        if (WindowDoOK(mwn,0)) then begin
          if (setf and RepSpec.flags[1]==1) then begin
            asyncremote.RecreateAgreementSchedule3(CredManr,true,mwn);
          end else begin
            asyncremote.RecreateAgreementSchedule3(CredManr,false,mwn);
          end;
        end;
        if (IVr.SerNr>0 and IVr.Sum4>0) then begin
          UpdateBrowses("CredHistVc");
          iwn = OpenWindow("IVDClass",1,0,"","",IVr);
          SelectWindow(iwn);
        end;
      end else begin
        //CredManCreditBeforePartialBuyout
        switch (err) begin
          case 3: 
            closedf = true;
            MessageBox(200117,"");
          otherwise
            closedf = true;
            OpenWindow("PauseCredManForceWClass",1,wn,"","",RepSpec);
        end;
        //MessageBox(200109,"");
      end;
      //SetWindowState(mwn,Rs_Normal);
    end;
    if (!closedf) then begin
      CloseWindow(wn);
    end;
  //end;
LPauseCredManWClassPause:;
  return;
end;

global
procedure RecreateAgreementSchedule3CallBack(record CredManVc CredManr,Integer wn)
begin
  string 255 wstr;
  
  if (GetWindowFileName(wn)=="CredManVc") then begin
    wstr = GetWindowClass(wn);
    CloseWindow(wn);
    OpenWindow(wstr,1,0,"","",CredManr);
  end;

  return;
end;

global
procedure PauseCredManForceWClassPause()
begin
  Integer wn,mwn,credwn;
  record RcVc RepSpec;
  record CredManVc CredManr;
  
  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,RepSpec);
  mwn = MotherWindow(wn);
  credwn = MotherWindow(mwn);
  GetWindowRecord(credwn,CredManr);
  RepSpec.long1 = CredManr.SerNr;
  asyncremote.CredManCreditBeforePause(credwn,mwn,RepSpec);
  CloseWindow(wn);

  return;
end;

global 
updating procedure CredManCreditBeforePauseCallBack(Integer wn,Integer mwn,record RcVc RepSpec)
begin
  record CredManVc CredManr;
  Boolean res,setf,closedf;
  record IVVc IVr;
  Integer err;

  GetWindowRecord(wn,CredManr);
  DoPauseCredMan(CredManr,RepSpec.vals0,RepSpec.vals1,RepSpec.d1,res,setf,RepSpec,IVr,"",err);
  if (res) then begin
    PutWindowRecord(wn,CredManr);
    if (WindowDoOK(wn,0)) then begin
      asyncremote.CredManDoPauseFinish(CredManr,RepSpec.flags[1]==1,RepSpec.flags[3]==0);
    end;
  end;
  CloseWindow(mwn);

  return;
end;


global
updating procedure ManualExtraFeeWClassCreate()
begin
  record RcVc RepSpec;
  Boolean testf;
  Integer wn;
  record IVVc IVr;

  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,RepSpec);
  testf = true;
  if (blank(RepSpec.d1)) then begin
    testf = false;
  end;
  if (blank(RepSpec.f1)) then begin
    testf = false;
  end;
  if (RepSpec.vals0<=0) then begin
    testf = false;
  end;
  if (testf) then begin
    CreateManualExtraInvoice(RepSpec,IVr);
    if (IVr.SerNr>-1) then begin
      OpenWindow("IVDCLass",0,0,"","",IVr);
    end;
    UpdateBrowses("CredManVc");
    CloseWindow(wn);
  end else begin
    MessageBox(32683,"");
  end;

  return;
end;

global
procedure ManualExtraFeeDsm()
begin
  Integer wn;
  record RcVc RepSpec;
  record CredManVc CredManr;
  
  wn = CurWindow;
  if (WindowState(wn)==Rs_Normal) then begin
    GetWindowRecord(wn,CredManr);
    RepSpec.long1 = CredManr.SerNr;
    OpenWindow("ManualExtraFeeWClass",0,0,"","",RepSpec);
  end;

  return;
end;

global
procedure ReopenCredManTask(string wstr)
begin
  Integer wn;
  record CredManVc CredManr;
  Integer num,mwn,nwn;
  
  wn = StringToInt(wstr);
  if (wn>0 and GetWindowFileName(wn)=="CredManVc") then begin
    GetWindowRecord(wn,CredManr);
    num = StringToInt(mid(GetWindowClass(wn),7,1));
    if (num!=CredManr.LoanType and CredManr.LoanType>0) then begin
      mwn = MotherWindow(wn);
      CloseWindow(wn);
      nwn = OpenWindow("CredMan" & CredManr.LoanType & "DClass",1,mwn,"","",CredManr);
    end;
  end;
  return;
end;

procedure ScheduleReopenCredManWindow(Integer wn)
begin
  
  NewTimedTask("ReopenCredManTask","ReopenCredManTask","ReopenCredManTask",wn,CurrentDate,CurrentTime,"","");

  return;
end;

global
function Boolean CredManDClassOnOpenWindow(Integer wn)
begin
  Boolean res;
  record CredManVc CredManr;
  Integer mwn,num;
  record CMInterfaceSetBlock ISb;
  string 255 wstr;

/*
  BlockLoad(ISb);
  GetWindowRecord(wn,CredManr);
  if (CredManr.LoanType==0) then begin
    wstr = GetWindowClass(wn);
    if (wstr=="CredManDClass") then begin
      CredManr.LoanType = ISb.DefCredManLoanType;
    end;
  end;
  num = StringToInt(mid(GetWindowClass(wn),7,1));
  if (num!=CredManr.LoanType and CredManr.LoanType>0) then begin
    mwn = MotherWindow(wn);
    CloseWindow(wn);
    OpenWindow("CredMan" & CredManr.LoanType & "DClass",1,mwn,"","",CredManr);
  end else begin
    UpdateCredManSoftFields(wn,CredManr,true);
  end;
*/

  GetWindowRecord(wn,CredManr);

  num = StringToInt(mid(GetWindowClass(wn),7,1));
  if (num!=CredManr.LoanType and CredManr.LoanType>0) then begin
    ScheduleReopenCredManWindow(wn);
  end;


  UpdateCredManSoftFields(wn,CredManr,true);

  CredManDClassOnOpenWindow = false;
  return;
end;

global
function Boolean CredManDClassBeforeEditField(Integer wn,string fieldname,Integer fn, Integer rownr)
begin
  Boolean res;
  record CredManVc CredManr;
  Integer num,nwn,mwn;
  
  if (GetWindowString(wn,"checktype")!="1") then begin
    GetWindowRecord(wn,CredManr);
    num = StringToInt(mid(GetWindowClass(wn),7,1));
    if (num!=CredManr.LoanType and CredManr.LoanType>0) then begin
      ScheduleReopenCredManWindow(wn);
    end;
    PutWindowString(wn,"checktype",1);
  end;
  
  CredManDClassBeforeEditField = true;
  return;
end;

global
function Boolean CredMan1DClassBeforeEditField(Integer wn,string fieldname,Integer fn, Integer rownr)
begin
  CredMan1DClassBeforeEditField = true;
  return;
end;

global
function Boolean CredMan2DClassBeforeEditField(Integer wn,string fieldname,Integer fn, Integer rownr)
begin
  CredMan2DClassBeforeEditField = true;
  return;
end;

global
function Boolean CredMan3DClassBeforeEditField(Integer wn,string fieldname,Integer fn, Integer rownr)
begin
  CredMan3DClassBeforeEditField = true;
  return;
end;

global
function Boolean CredMan4DClassBeforeEditField(Integer wn,string fieldname,Integer fn, Integer rownr)
begin
  CredMan4DClassBeforeEditField = true;
  return;
end;

global
function Boolean CredMan5DClassBeforeEditField(Integer wn,string fieldname,Integer fn, Integer rownr)
begin
  CredMan5DClassBeforeEditField = true;
  return;
end;

global
function Boolean CredMan6DClassBeforeEditField(Integer wn,string fieldname,Integer fn, Integer rownr)
begin
  CredMan6DClassBeforeEditField = true;
  return;
end;

global
function Boolean CredMan7DClassBeforeEditField(Integer wn,string fieldname,Integer fn, Integer rownr)
begin
  CredMan7DClassBeforeEditField = true;
  return;
end;

global
function Boolean CredMan8DClassBeforeEditField(Integer wn,string fieldname,Integer fn, Integer rownr)
begin
  CredMan8DClassBeforeEditField = true;
  return;
end;


global
procedure CredManDClassOnWindowRecordChange(Integer wn)
begin
  record CredManVc CredManr;

  GetWindowRecord(wn,CredManr);
  RerunWindowDef(wn);
  UpdateCredManSoftFields(wn,CredManr,true);

  return;
end;

global
function Boolean CredManDClassUpdateWindowSubset(Integer wn,var string subsetname)
begin
  record CredManVc CredManr;
  
  GetWindowRecord(wn,CredManr);
  if (CredManr.SerNr>0) then begin
    subsetname = CredManr.SerNr;
  end else begin
    subsetname = -9999999;
  end;

  CredManDClassUpdateWindowSubset = true;
  return;
end;

global
function Boolean CredManDClassListDblClick(Integer wn)
begin
  Integer line;
  Longint pos,sernr;
  record IVVc IVr;
  record IPVc IPr;
  record OPVc OPr;
  string 255 tstr,tstr2,type;
  record CredHistVc CredHistr;

  ReadMarkedRecord(wn,CredHistr);
  switch (CredHistr.RecordType) begin
    case "0":
      IVr.SerNr = CredHistr.RecordNr;
      if (ReadFirstMain(IVr,1,true)) then begin
        OpenWindow("IVDClass",1,0,"","",IVr);
      end;
    case "1":
      IPr.SerNr = CredHistr.RecordNr;
    case "2":
      IVr.SerNr = CredHistr.RecordNr;
      if (ReadFirstMain(IVr,1,true)) then begin
        OpenWindow("IVDClass",1,0,"","",IVr);
      end;
    case "5":
      OPr.SerNr = CredHistr.RecordNr;
      if (ReadFirstMain(OPr,1,true)) then begin
        OpenWindow("OPDClass",1,0,"","",OPr);
      end;
    otherwise
      OpenWindow("CredHistDClass",1,0,"","",CredHistr);
    
  end;

  return;
end;
/*
//this allows to edit a field value in hal and use PutWindowRecord and not get "The record has changed" message
//it was needed for TerminateCredManDsm. I combined it with "SetWindowState"
global
function LongInt CredManVcRecordProtectFields(var record CredManVc CredManr,record CredManVc CredMan2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  //CredManr.OrderClass = CredMan2r.OrderClass;
  CredManr.PauseDate = CredMan2r.PauseDate;
  CredManr.PauseMonths = CredMan2r.PauseMonths;
  CredManr.ProlongDate = CredMan2r.ProlongDate;
  CredManr.ProlongMonths = CredMan2r.ProlongMonths;
  //CredManr.endDate = CredMan2r.endDate;
  
  CredManVcRecordProtectFields = res;
  return;
end;
*/

global
procedure CredManInfoBuyOutDbl(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RCVc RepSpec;

  RepSpec.long1 = StringToLongint(l);
  OpenWindow("CheckBuyoutValueWClass",0,0,"","",RepSpec);

  return;
end;

function Boolean RefinCredMan2WClassd1EFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record RcVc RepSpec;

  if (changedf) then begin  
    GetWindowRecord(wn,RepSpec);
    threadremote.GetRefinCredManData(RepSpec.long1,RepSpec.ArtMode,RepSpec,true);
    PutWindowRecord(wn,RepSpec);   
  end; 
  RefinCredMan2WClassd1EFAfter = true;
  return;
end;

function Boolean RefinCredMan2WClassvals2EFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record RcVc RepSpec;

  if (changedf) then begin  
    GetWindowRecord(wn,RepSpec);
    RepSpec.vals3 = RepSpec.vals0 + RepSpec.vals1 + RepSpec.vals2;
    PutWindowRecord(wn,RepSpec);   
  end; 
  RefinCredMan2WClassvals2EFAfter = true;
  return;
end;

function Boolean RefinCredMan2WClassvals3EFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record RcVc RepSpec;

  if (changedf) then begin  
    GetWindowRecord(wn,RepSpec);
    if (RepSpec.vals3<(RepSpec.vals0 + RepSpec.vals1)) then begin
      RepSpec.vals3 = StringToVal(WindEFStr(wn),M4Val);
    end else begin
      RepSpec.vals2 = RepSpec.vals3 - (RepSpec.vals0 + RepSpec.vals1);
    end;
    PutWindowRecord(wn,RepSpec);
  end; 
  RefinCredMan2WClassvals3EFAfter = true;
  return;
end;

function Boolean RefinCredMan2WClassflags1EFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record RcVc RepSpec;

  if (changedf) then begin  
    GetWindowRecord(wn,RepSpec);
    if (RepSpec.flags[1]>31) then begin
      RepSpec.flags[1] = 31;
    end;
    if (RepSpec.flags[1]<1) then begin
      RepSpec.flags[1] = 1;
    end;
    PutWindowRecord(wn,RepSpec);
  end; 
  RefinCredMan2WClassflags1EFAfter = true;
  return;
end;

global
function Boolean RefinCredMan2WClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "d1":
      res = RefinCredMan2WClassd1EFAfter(wn,rownr,changed!=0);
    case "vals2":
      res = RefinCredMan2WClassvals2EFAfter(wn,rownr,changed!=0);
    case "vals3":
      res = RefinCredMan2WClassvals3EFAfter(wn,rownr,changed!=0);
    case "flags[1]":
      res = RefinCredMan2WClassflags1EFAfter(wn,rownr,changed!=0);
  end;

  RefinCredMan2WClassAfterEditField = res;
  return;
end;

global
function Boolean PauseCredManWClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;
  record RcVc RepSpec;

  switch (fieldname) begin
    case "vals0":
      DeselectWindow(wn,true);
      GetWindowRecord(wn,RepSpec);
      RepSpec.vals1 = RepSpec.vals0;
      PutWindowRecord(wn,RepSpec);
  end;

  PauseCredManWClassAfterEditField = res;
  return;
end;


procedure RefinCredMan(Integer type)
begin
  Integer wn;
  record RcVc RepSpec,RepSpec2;

  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,RepSpec);
  
  threadremote.GetRefinCredManData(RepSpec.long1,type,RepSpec2,true);

  CloseWindow(wn);
  OpenWindow("RefinCredMan2WClass",0,0,"","",RepSpec2);

  return;
end;

global
procedure RefinCredManWClassRefinance()
begin
  RefinCredMan(0);
  return;
end;

global
procedure RefinCredManWClassProlong()
begin
  RefinCredMan(1);
  return;
end;

global
procedure RefinCredManWClassTransfer()
begin
  RefinCredMan(2);
  return;
end;

global
procedure RefinCredManWClassPartial()
begin
  Integer wn;
  record RcVc RepSpec,RepSpec2;

  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  
  //GetRefinCredManData(RepSpec.long1,type,RepSpec2,true);

  if (UseFullBuyoutProcedure) then begin
    RepSpec.flags[1] = 1;
    RepSpec.flags[2] = 1;
  end;

  CloseWindow(wn);
  OpenWindow("RefinCredManPartialWClass",0,0,"","",RepSpec);
  return;
end;

global
procedure RefinCredManDsm()
begin
  record RcVc RepSpec;
  record CredManVc CredManr;
  Integer wn;

  wn = CurWindow;
  if (WindowState(wn)==Rs_Normal) then begin
    GetWindowRecord(wn,CredManr);
    RepSpec.long1 = CredManr.SerNr;
    RepSpec.flags[29] = wn;
    OpenWindow("RefinCredManWClass",0,0,"","",RepSpec);
  end;

  return;
end;

global
procedure RefinCredManPartialWClassSubmit()
begin
  Integer wn;
  record RcVc RepSpec;
  string 255 err;
  Date td;
  record CredManVc CredManr;

  if (GetGlobalBoolean("PartialBuyoutInProcess")==false) then begin
    wn = CurWindow;
    DeselectWindow(wn,true);
    GetWindowRecord(wn,RepSpec);
    
    GetWindowRecord(RepSpec.flags[29],CredManr);
    td = GetLastInvDate(CredManr);
    if (nonblank(RepSpec.d1) and RepSpec.d1>td and RepSpec.vals0>0) then begin
      SetGlobalBoolean("PartialBuyoutInProcess",true);
      asyncremote.CredManPartialBuyoutDo(RepSpec.d1,RepSpec.vals0,RepSpec.long1,RepSpec,wn,RepSpec.flags[29],false);
    end else begin
      if (nonblank(RepSpec.d1) and RepSpec.vals0>0) then begin
        RepSpec.flags[28] = wn;
        OpenWindow("RefinCredManPartial2WClass",0,0,"","",RepSpec);
      end;
    end;
  end;

  return;
end;

global
procedure RefinCredManPartial2WClassSubmit()
begin
  Integer wn;
  record RcVc RepSpec;
  string 255 err;

  
  if (GetGlobalBoolean("PartialBuyoutInProcess")==false) then begin
    SetGlobalBoolean("PartialBuyoutInProcess",true);
    wn = CurWindow;
    DeselectWindow(wn,true);
    GetWindowRecord(wn,RepSpec);
    CloseWindow(wn);
    asyncremote.CredManCreditBeforePartialBuyout(RepSpec.flags[28],RepSpec);
  end;

  return;
end;

global
procedure RefinCredManPartial2WClassSubmitCallBack(Integer wn,record RcVc RepSpec,Boolean successf)
begin
  record CredManVc CredManr;

  if (successf) then begin
    asyncremote.CredManPartialBuyoutDo(RepSpec.d1,RepSpec.vals0,RepSpec.long1,RepSpec,wn,RepSpec.flags[29],true);
  end else begin
    SetGlobalBoolean("PartialBuyoutInProcess",false);
  end;

  return;
end;

global
procedure RefinCredManPartialWClassSubmitCallBack(string err,Integer wn,Integer credmanwn,Boolean regenivf)
begin
  record CredManVc CredManr;

  SetGlobalBoolean("PartialBuyoutInProcess",false);
  if (nonblank(err)) then begin
    MessageBox(0,err);
  end else begin
    UpdateBrowses("CredManVc");
    UpdateBrowses("CredHistVc");
    if (GetWindowClass(wn)=="RefinCredManPartialWClass") then begin
      CloseWindow(wn);
    end;
    GetWindowRecord(credmanwn,CredManr);

    threadremoteasync.CredManPartialBuyoutFinish(regenivf,CredManr);
  end;

  return;
end;

global
updating procedure RefinCredMan2WClassSubmit()
begin
  Integer wn;
  record RcVc RepSpec;
  record CredManVc CredManr;
  string 255 msg,wstr;

  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,RepSpec);
  if (DoRefinCredMan(RepSpec,msg,CredManr)) then begin
    wstr = GetWindowClass(wn);
    CloseWindow(wn);
    OpenWindow(wstr,1,0,"","",CredManr);
  end else begin
    Stopalert(msg);
  end;

  return;
end;

function string 255 GetCredHistDetail(record ORVc ORr,Longint sernr,string fieldname)
begin
  string 255 res;
  Integer i,rwcnt;
  row ORVc ORrw;

  rwcnt = MatRowCnt(ORr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ORr,i,ORrw);
    if (ORrw.GroupOrdRow==sernr) then begin
      res = GetFieldValueByName(ORr,fieldname,i);
      i = rwcnt;
    end;
  end;

  GetCredHistDetail = res;
  return;
end;

function string 255 GetCredHistDetail2(record ORVc ORr,Longint sernr)
begin
  string 255 res;
  Integer i,rwcnt;
  row ORVc ORrw;

  rwcnt = MatRowCnt(ORr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ORr,i,ORrw);
    if (ORrw.GroupOrdRow==sernr) then begin
      res = (ORrw.Sum-ORrw.TAX1Reb);
      i = rwcnt;
    end;
  end;

  GetCredHistDetail2 = res;
  return;
end;

global
procedure CredManVc_ContactSClass(Integer wn,Integer mwn)
BEGIN
  record CredManVc CredManr;
  Array string 60 acontact;
  Integer i,acnt;
  LongInt pos;
  string 255 namestr,titlestr,custcode,fn;

  GetWindowRecord(mwn,CredManr);
  fn = WindowActiveField(mwn);
  switch (fn) begin
    case "LeaseSellerContact":
      ContactSClassOnOpen(wn,CredManr.LeaseSellerCode,acontact,acnt);
    otherwise
      ContactSClassOnOpen(wn,CredManr.CustCode,acontact,acnt);
  end;
  for (i=0;i<acnt;i=i+1) begin
//     SetListString(wn,80,acontact[i],false);
    pos = 0;    
    GetNextSubstring(acontact[i],pos,"#",namestr);
    GetNextSubstring(acontact[i],pos,"#",titlestr);
    GetNextSubstring(acontact[i],pos,"#",custcode);
    AddListRow(wn,"DLPasteContact",1,namestr,0);
    AddListData(wn,"DLPasteContact","DLContactName",namestr);
    AddListData(wn,"DLPasteContact","DLContactTitle",titlestr);    
  end;
  RETURN;
END;

global
function Boolean ContactSClassOnOpenWindow(Integer wn)
begin
  Integer mwn;
  Boolean res;

  mwn = MotherWindow(wn);
  switch (GetWindowFileName(mwn)) begin
    case "CredManVc": CredManVc_ContactSClass(wn,mwn);
    otherwise
      res = inner.ContactSClassOnOpenWindow(wn);
  end;
  ContactSClassOnOpenWindow = false;
  return;
end;

global
updating procedure OpenCredManFactoringBtn()
begin
  Integer wn;
  record CredManVc CredManr;
  record CredManFactVc CMFr;

  wn = CurWindow;
  GetWindowRecord(wn,CredManr);
  threadremote.GetFactoringRecord(CredManr,CMFr);
  OpenWindow("CredManFactDClass",1,0,"","",CMFr);

  return;
end;

global
updating procedure OpenCredManFactoringInvoicesBtn()
begin
  Integer wn;
  record CredManVc CredManr;
  record RcVc RepSpec;

  wn = CurWindow;
  GetWindowRecord(wn,CredManr);
  OpenWindow("CustCredManFactInvoiceWClass",1,wn,"","",RepSpec);

  return;
end;

global
updating procedure OpenCredManPayGrntSellersBtn()
begin
  Integer wn;
  record CredManVc CredManr;
  record CredManPmtGrntVc PGr;

  wn = CurWindow;
  GetWindowRecord(wn,CredManr);
  threadremote.GetPayGrntRecord(CredManr,PGr);
  OpenWindow("CredManPmtGrntDClass",1,0,"","",PGr);

  return;
end;

global
updating procedure OpenCredManPayGrntReportsBtn()
begin
  Integer wn;
  record CredManVc CredManr;
  record RcVc RepSpec;

  wn = CurWindow;
  GetWindowRecord(wn,CredManr);
  OpenWindow("CredManGrntReportWClass",1,wn,"","",RepSpec);

  return;
end;

global
procedure AgreementDocDClassSign()
begin
  Integer nwn;
  record RcVc RepSpec;

  if (WindowState(CurWindow)==Rs_Normal) then begin
    nwn = OpenWindow("DocSigningWClass",0,CurWindow,"","",RepSpec);
  end;

  return;
end;

global
updating procedure AgreementDocDClassRegen()
begin 
  Integer wn;
  record AgreementDocVc ADr;
  record RcVc RepSpec;

  wn = CurWindow;
  if (WindowState(wn)==Rs_Normal) then begin
    GetWindowRecord(wn,ADr);
    RecreateAgreementDocument(ADr,false);
    CloseWindow(wn);
    OpenWindow("AgreementDocDClass",1,0,"","",ADr);
  end;

  return;
end;

global
updating procedure AgreementDocDClassRegen2()
begin 
  Integer wn,cwn;
  record AgreementDocVc ADr;
  record RcVc RepSpec;
  record CredManVc CredManr;
  string 255 wstr;

  wn = CurWindow;
  if (WindowState(wn)==Rs_Normal) then begin
    GetWindowRecord(wn,ADr);
    RecreateAgreementDocument(ADr,true);
    cwn = wn - 1;
    if (GetWindowFileName(cwn)=="CredManVc") then begin
      GetWindowRecord(cwn,CredManr);
      ReadFirstMain(CredManr,1,true);
      wstr = GetWindowClass(cwn);
      CloseWindow(cwn);
      OpenWindow(wstr,1,MotherWindow(cwn),"","",CredManr);
    end;
    CloseWindow(wn);
    OpenWindow("AgreementDocDClass",1,0,"","",ADr);
  end;

  return;
end;

global
procedure DocumentSigningClientDone(string user,record AgreementDocVc ADr)
begin
  record AgreementDocVc tADr;
  Integer wn,swn;

  if (user==CurrentUser) then begin
    swn = FindWindow("DocSigningWClass");
    wn = MotherWindow(swn);
    if (wn>0) then begin
      GetWindowRecord(wn,tADr);
      if (ADr.SerNr==tADr.SerNr) then begin
        //PutWindowRecord(wn,ADr);
        CloseWindow(wn);
        OpenWindow("AgreementDocDClass",1,0,"","",ADr);
      end;
    end;
    if (swn>0) then begin
      CloseWindow(swn);
    end;
  end;

  return;
end;

global
function Boolean DocSigningWClassOnOpenWindow(Integer wn)
begin
  record AgreementDocVc ADr;
  string 255 link;
  record RcVc RepSpec;
  Integer err;
  string 255 html
  
  GetWindowRecord(MotherWindow(wn),ADr);
 
  threadremote.PrepareAgreementDocSigningSession(ADr,link,err);
  html = "<html><head>";//<!DOCTYPE html>
  html = html & "<style>body{margin:0px;padding:0px;} iframe{border:none}</style>";//
  html = html & "<script src='https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js'></script>";
  //html = html & "<script src='http://localhost:1201/scripts/clientsign.js?ver=2'></script>";
  //html = html & "<script>$(document).ready(function(){AddSingingIframe('" & link & "')});</script>";
  html = html & "</head><body><iframe id='isign-gateway' width='100%' height='100%' src='" & link & "'></iframe>";
/*
  html = html & "<script src='https://gateway-sandbox.dokobit.com/js/isign.frame.js'></script>";
  html = html & "<script>";
//  html = html & "$.getScript('https://gateway-sandbox.dokobit.com/js/isign.frame.js', function(){";
  html = html & "    $(document.body).append('aaaa '; ";
  html = html & "    Isign.onSignSuccess = function(){ ";
//  html = html & "        $(document.body).html('success');";
//  html = html & "        HansaWorld.CallHal('RefreshAgreementDocWindow','true');";
  html = html & "    };";
  html = html & "    Isign.onSignError = function(errors){";
//  html = html & "        alert('failed to sign ' + errors.join(', '));";
  html = html & "    };";
  html = html & "    Isign.adjustHeight = false;";
//  html = html & "});  ";
  html = html & "</script>";
*/
  html = html & "</body></html>";

  SetWebPageData(wn,"$SIGNAREA",html);

  DocSigningWClassOnOpenWindow = false;
  return;
end;

global
procedure CredManDClassSignAgreement()
begin
  Integer wn;
  record CredManVc CredManr;
  record AgreementDocVc ADr;

  wn = CurWindow;
  GetWindowRecord(wn,CredManr);
  if (GetAgreementDoc(CredManr,1,ADr)) then begin
    OpenWindow("AgreementDocDClass",1,0,"","",ADr);
  end;

  return;
end;

global
procedure CredManDClassSignSchedule()
begin
  Integer wn;
  record CredManVc CredManr;
  record AgreementDocVc ADr;

  wn = CurWindow;
  GetWindowRecord(wn,CredManr);
  if (GetAgreementDoc(CredManr,2,ADr)) then begin
    OpenWindow("AgreementDocDClass",1,0,"","",ADr);
  end;

  return;
end;

global
procedure CredManDClassSignVekselis()
begin
  Integer wn;
  record CredManVc CredManr;
  record AgreementDocVc ADr;

  wn = CurWindow;
  GetWindowRecord(wn,CredManr);
  if (GetAgreementDoc(CredManr,6,ADr)) then begin
    OpenWindow("AgreementDocDClass",1,0,"","",ADr);
  end;

  return;
end;

global
procedure CredManDClassSignSurety()
begin
  Integer wn;
  record CredManVc CredManr;
  record AgreementDocVc ADr;

  wn = CurWindow;
  GetWindowRecord(wn,CredManr);
  if (GetAgreementDoc(CredManr,3,ADr)) then begin
    OpenWindow("AgreementDocDClass",1,0,"","",ADr);
  end;

  return;
end;

global
procedure CredManDClassSignSuretySimplified()
begin
  Integer wn;
  record CredManVc CredManr;
  record AgreementDocVc ADr;
  Integer num;

  num = StringToInt(PushButtonTag);

  if (num>0) then begin
    wn = CurWindow;
    GetWindowRecord(wn,CredManr);
    if (GetAgreementDoc(CredManr,8+num,ADr)) then begin
      OpenWindow("AgreementDocDClass",1,0,"","",ADr);
    end;
  end;

  return;
end;

global
procedure CredManDClassSignBOESimplified()
begin
  Integer wn;
  record CredManVc CredManr;
  record AgreementDocVc ADr;
  Integer num;

  num = StringToInt(PushButtonTag);

  if (num>0) then begin
    wn = CurWindow;
    GetWindowRecord(wn,CredManr);
    if (GetAgreementDoc(CredManr,15+num,ADr)) then begin
      OpenWindow("AgreementDocDClass",1,0,"","",ADr);
    end;
  end;

  return;
end;

updating procedure CredManMakePayment(Integer wn,record CredManVc CredManr,Boolean receiptf,string ivno,val sendsum)
begin
  record VIVc VIr;
  record IVVc IVr,feeIVr;
  val sum;
  string 255 wstr;
  
  CredManMakePaymentRemote(CredManr,VIr,IVr,ivno,sum,receiptf,sendsum);
  PutWindowRecord(wn,CredManr);
  WindowDoOK(wn,0);
  if (receiptf) then begin
    if (IVr.SerNr>0 and sum>0) then begin
      if (FindFirstFeeInvoice(CredManr,feeIVr)) then begin
        asyncremote.CreatePaymentFakeReceipt(CredManr,feeIVr);
      end;
      asyncremote.CM_CreatePaymentOrder(CredManr,VIr,sum);
    end;
    ReadFirstMain(CredManr,1,true);
    wstr = GetWindowClass(wn);
    CloseWindow(wn);
    OpenWindow(wstr,1,0,"","",CredManr);
  end;

  if (VIr.SerNr>0) then begin
    OpenWindow("VIDClass",0,0,"","",VIr);
  end;


  return;
end;

global
updating procedure CredManMakePaymentWithAmount()
begin
  Integer wn,mwn;
  record RcVc RepSpec;
  record CredManVc CredManr;
  val paidout;

  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,RepSpec);
  mwn = MotherWindow(wn);
  GetWindowRecord(mwn,CredManr);

  if (CredManr.LoanType==8 or CredManr.LoanType==7) then begin
    AgreementPaidOut(CredManr,paidout);
    if (paidout+RepSpec.vals1>CredManr.InvSum4) then begin
      MessageBox(200112,"");
      goto LCredManMakePaymentWithAmount;
    end;
  end;
  CloseWindow(wn);
  
  CredManMakePayment(mwn,CredManr,RepSpec.flags[10]==0,"",RepSpec.vals1);

LCredManMakePaymentWithAmount:;
  return;
end;


global
updating procedure CredManMakePaymentDsm()
begin
  Integer wn,nwn;
  record CredManVc CredManr;
  record VIVc VIr;
  record CMInvoicingBlock CIb;
  record RcVc RepSpec;
  record IVVc IVr;
  val sum;
  string 255 errstr;
    
  wn = CurWindow;
  GetWindowRecord(wn,CredManr);

  if (CanCredManMakePayment(CredManr,errstr)) then begin
    BlockLoad(CIb);
    if (CIb.ManualInvoiceNumber==1) then begin
      RepSpec.ArtMode = 1;
      nwn = OpenWindow("CredManInvNoWClass",0,wn,"","",RepSpec);
    end else begin
      if (CredManr.LoanType==7 or CredManr.LoanType==8) then begin
        OpenWindow("CredManPaymentWClass",0,wn,"","",RepSpec);
      end else begin
        CredManMakePayment(wn,CredManr,true,"",0);
      end;
    end;
  end else begin
    if (nonblank(errstr)) then begin
      MessageBox(0,errstr);
    end;
  end;

  return;
end;

global
updating procedure CredManMakePaymentReconsDsm()
begin
  Integer wn,nwn;
  record CredManVc CredManr;
  record VIVc VIr;
  record CMInvoicingBlock CIb;
  record RcVc RepSpec;
  record IVVc IVr;
  val sum;
  string 255 errstr;
    
  wn = CurWindow;
  GetWindowRecord(wn,CredManr);


  if (CanCredManMakePayment(CredManr,errstr)) then begin
    BlockLoad(CIb);
    if (CIb.ManualInvoiceNumber==1) then begin
      RepSpec.ArtMode = 1;
      RepSpec.flags[10] = 1;
      nwn = OpenWindow("CredManInvNoWClass",0,wn,"","",RepSpec);
    end else begin
      if (CredManr.LoanType==7 or CredManr.LoanType==8) then begin
        RepSpec.flags[10] = 1;
        OpenWindow("CredManPaymentWClass",0,wn,"","",RepSpec);
      end else begin
        CredManMakePayment(wn,CredManr,false,"",0);
      end;
    end;
  end else begin
    if (nonblank(errstr)) then begin
      MessageBox(0,errstr);
    end;
  end;

  return;
end;

global
updating procedure CredManInvNoWClassProceed()
begin
  record CredManVc CredManr;
  record RcVc RepSpec;
  Integer wn,mwn,twn;
  record VIVc VIr;
  record IVVc IVr;
  val sum;
  
  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,RepSpec);
  mwn = MotherWindow(wn);
  GetWindowRecord(mwn,CredManr);
  CloseWindow(wn);
  if (RepSpec.ArtMode==0) then begin
    CreateCredManInvoiceDo(CredManr,RepSpec.f1,mwn);
  end else begin
    CredManMakePayment(mwn,CredManr,RepSpec.flags[10]==0,RepSpec.f1,0);
  end;

  return;
end;

global
updating procedure CredManGenScheduleDsm()
begin
  Integer wn;
  record CredManVc CredManr;
  record VIVc VIr;
  record RcVc RepSpec;
  record CredManSchedVc CSr;
    
  wn = CurWindow;
  GetWindowRecord(wn,CredManr);

//  if (CredManr.OKFlag==1 and CredManr.Approved==1) then begin
    CSr.CredManNr = CredManr.SerNr;
    if (ReadFirstMain(CSr,1,true)) then begin
      RepSpec.long1 = CredManr.SerNr;
      OpenWindow("SchedYesNoWClass",0,0,"","",RepSpec);
    end else begin
      GenerateAgreementScheduleTask(CredManr,false,true);
    end;
//  end;

  return;
end;

global
procedure CredManTerminateDsm()
begin
  Integer wn;
  record CredManVc CredManr;
  record VIVc VIr;
  record RcVc RepSpec;
  record CredManSchedVc CSr;
    
  wn = CurWindow;
  if (WindowState(wn)==Rs_Normal) then begin
    GetWindowRecord(wn,CredManr);
    CSr.CredManNr = CredManr.SerNr;
    if (ReadFirstMain(CSr,1,true)==false) then begin
      MessageBox(200273,"");
    end else begin
      RepSpec.long1 = CredManr.SerNr;
      RepSpec.d1 = CurrentDate;
      OpenWindow("TerminateYesNoWClass",0,wn,"","",RepSpec);
    end;
  end;

  return;
end;

global
updating procedure TerminateYesNoWClassProceed()
begin
  record RcVc RepSpec;
  record CredManVc CredManr;
  Integer wn,mwn;

  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,RepSpec);
  mwn = MotherWindow(wn);
  if (mwn>0) then begin
    GetWindowRecord(mwn,CredManr);
    if (CanTerminateWithDate(CredManr,RepSpec.d1)) then begin
      CredManr.CancelDate = RepSpec.d1;
      PutWindowRecord(mwn,CredManr);
      if (WindowDoOK(mwn,0)) then begin
        TerminateCredMan(CredManr,100,"",RepSpec.d1,false);
        PutWindowPrevRecord(mwn,CredManr);
        PutWindowRecord(mwn,CredManr);
        threadremote.TerminateCredManFinish(CredManr);
        PutWindowRecord(mwn,CredManr);
        WindowDoOK(mwn,0);
        UpdateBrowses("CredHistVc");
      end;
      CloseWindow(wn);
    end else begin
      MessageBox(200274,"");
    end;
  end;

  return;
end;

global
procedure CredManSellDsm()
begin
  Integer wn;
  record CredManVc CredManr;
  record VIVc VIr;
  record RcVc RepSpec;
  record CredManSchedVc CSr;
    
  wn = CurWindow;
  if (WindowState(wn)==Rs_Normal) then begin
    GetWindowRecord(wn,CredManr);
    CSr.CredManNr = CredManr.SerNr;
    if (ReadFirstMain(CSr,1,true)==false) then begin
      MessageBox(200273,"");
    end else begin
      RepSpec.long1 = CredManr.SerNr;
      RepSpec.vals0 = 100;
      RepSpec.d1 = CurrentDate;
      OpenWindow("SellAgreementWClass",0,wn,"","",RepSpec);
    end;
  end;

  return;
end;

global
updating procedure SellAgreementWClassProceed()
begin
  record RcVc RepSpec;
  record CredManVc CredManr;
  Integer wn,mwn;

  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,RepSpec);
  
  if (RepSpec.vals0==0) then begin
    MessageBox(1058,"");
    WindowFieldGoto(wn,RepSpec,-1,"vals0",true);
    goto LCredManSellWClassProceed;
  end;
  if (blank(RepSpec.f1)) then begin
    MessageBox(1058,"");
    WindowFieldGoto(wn,RepSpec,-1,"f1",true);
    goto LCredManSellWClassProceed;
  end;
  mwn = MotherWindow(wn);
  if (mwn>0) then begin
    GetWindowRecord(mwn,CredManr);
    if (CanTerminateWithDate(CredManr,RepSpec.d1)) then begin
      CredManr.CancelDate = RepSpec.d1;
      PutWindowRecord(mwn,CredManr);
      if (WindowDoOK(mwn,0)) then begin
        TerminateCredMan(CredManr,RepSpec.vals0,RepSpec.f1,RepSpec.d1,true);
        PutWindowPrevRecord(mwn,CredManr);
        PutWindowRecord(mwn,CredManr);
        threadremote.TerminateCredManFinish(CredManr);
        PutWindowRecord(mwn,CredManr);
        WindowDoOK(mwn,0);
        UpdateBrowses("CredHistVc");
      end;
    end else begin
      MessageBox(200274,"");
    end;
  end;

  CloseWindow(wn);
LCredManSellWClassProceed:;
  return;
end;
global
updating procedure SchedYesNoWClassProceed()
begin
  record RcVc RepSpec;
  record CredManVc CredManr;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  
  CredManr.SerNr = RepSpec.long1;
  if (ReadFirstMain(CredManr,1,true)) then begin
    GenerateAgreementScheduleTask(CredManr,true,true);
  end;

  CloseWindow(wn);
  return;
end;

global
procedure SchedYesNoWClassClose()
begin
  
  CloseWindow(CurWindow);

  return;
end;

global
procedure CredManPmtGrntOpenCertificateDsm()
begin
  Integer wn,rw;
  record CredManPmtGrntVc PGr;
  row CredManPmtGrntVc PGrw;
  record AgreementDocVc ADr;

  wn = CurWindow;

  rw = WindowActiveRow(wn);
  if (rw>-1) then begin
    GetWindowRecord(wn,PGr);
    MatRowGet(PGr,rw,PGrw); 
    if (GetAgreementDoc2(PGr.CredManNr,PGrw.CustCode,rw,ADr)) then begin
      OpenWindow("AgreementDocDClass",1,0,"","",ADr);
    end;
  end;

  return;
end;

global
function Boolean CredManDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  record CredManVc CredManr;
 
  res = false;
  if (wnst==2) then begin//Rs_update
    switch (fieldname) begin
      case "Classifications": res = true;
      case "MoneyTransferDate": 
        if (UserCanAction("CredManChangeTransferDate",false)==true) then begin
          res = true;
        end;
      case "DocumentSigner":
        res = true;
      otherwise
        if (left(fn,6)=="Surety") then begin
          res = true;
        end;
    end;
  end;
  
  if (!res) then begin
    res = inner.CredManDClassActiveEditField(wn,fieldname,fn,wnst,rownr,changed);
  end;

  if (res) then begin
    switch (fieldname) begin
      case "InstalmentMonths": 
        GetWindowRecord(wn,CredManr);
        if (UserCanAction("CredManChangeInvoicedMonths",false)==false) then begin
          if (ContractHasInvoiceCreated(CredManr)) then begin
            res = false;
          end;
        end;
    end;
  end;

  CredManDClassActiveEditField = res;
  return;
end;

global
procedure DblCredManVc(string dblstr,string l,Integer currepwn)
begin

  if (nonblank(l)) then begin
    inner.DblCredManVc(l,l,currepwn);
  end else begin
    inner.DblCredManVc(dblstr,l,currepwn);
  end;
  return;
end;

global
function Boolean CredLegalNrSerNrSClassOnOpenWindow(Integer wn)
begin
  array string 255 arrOffSerNr;
  record B2BLoanApplicationVc LAr;
  record CredManVc CredManr;
  Integer mwn,i;
  
  mwn = MotherWindow(wn);

  switch (GetWindowFileName(mwn)) begin
    case "B2BLoanApplicationVc":
      GetWindowRecord(mwn,LAr);
      threadremote.CredLegalNrSerNrSClassOnOpenWindowRemote("B2BLoanApplicationVc",LAr.SerNr,LAr.Type,LAr.TransDate,"",arrOffSerNr);
    case "CredManVc":
      GetWindowRecord(mwn,CredManr);
      threadremote.CredLegalNrSerNrSClassOnOpenWindowRemote("CredManVc",CredManr.SerNr,CredManr.startDate,CredManr.Type,CredManr.Classifications,arrOffSerNr);      
  end;
  ClearStringList(wn);
  for (i=0;i<arrOffSerNr.length;i=i+1) begin
    AddListRow(wn,"DLPasteCredSerNrAccount",1,arrOffSerNr[i],0);
    AddListData(wn,"DLPasteCredSerNrAccount","DLSerNr",arrOffSerNr[i]);
  end;

  CredLegalNrSerNrSClassOnOpenWindow = false;
  return;
end;


global
function Boolean CredLegalNrSerNrSClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  record B2BLoanApplicationVc LAr;
  record CredManVc CredManr;
  record BankVc Bankr;
  Integer Sel;
  string 255 tstr;
  
  mwn = MotherWindow(wn);

  Sel = SelectedListLine(wn);
  if (Sel>-1) then begin
    tstr = GetListTag(wn,Sel);
    PasteString(mwn,tstr);
  end;
  CloseWindow(wn);

  CredLegalNrSerNrSClassOnOKWindow = false;
  return;
end;

global
updating procedure CredManDClassOpenProperties()
begin
  record CredManVc CredManr;
  record CredManPropertiesVc CMPr;
  Integer wn,nwn;

  wn = CurWindow;
  if (WindowState(wn)==Rs_Normal) then begin
    GetWindowRecord(wn,CredManr);
    GetCredManPropertyRecord(CredManr,CMPr);
    nwn = OpenWindow("CredManPropertiesDClass",0,0,"","",CMPr);
    PutWindowString(nwn,"type",CredManr.LoanType);
    RerunWindowDef(nwn);
  end;
  return;
end;

global
procedure CredManDClassOpenChanges()
begin
  record CredManChangeVc Changer; 
  Integer wn;
  record CredManVc CredManr; 

  wn = CurWindow;
  GetWindowRecord(wn,CredManr);
  OpenWindow("CredManChange2LClass",1,0,CredManr.SerNr,"",Changer);
  return;
end;

global
updating procedure CredManDClassAddLanguages()
begin
  record CredManAddLangVc CredManAddLangr; 
  Integer wn;
  record CredManTypeVc CredManTyper; 

  wn = CurWindow;
  GetWindowRecord(wn,CredManTyper);
  CredManAddLangr.CredManTypeCode = CredManTyper.Code;
  if(readfirstmain(CredManAddLangr,1,true)==false)then begin
    recordnew(CredManAddLangr);
    CredManAddLangr.CredManTypeCode = CredManTyper.Code;
    recordstore(CredManAddLangr,true);
  end;
  OpenWindow("CredManAddLangsDClass",1,0,"","",CredManAddLangr);
  return;
end;

global
updating procedure CredManDClassBOESurety()
begin
  record CredManVc CredManr;
  record BOESuretyVc BSr;
  Integer wn,nwn,num;

  wn = CurWindow;
  if (WindowState(wn)==Rs_Normal) then begin
    num = StringToInt(PushButtonTag);
    GetWindowRecord(wn,CredManr);
    GetCredManBOESuretyRecord(CredManr,BSr,num);
    nwn = OpenWindow("BOESuretyDClass",1,0,"","",BSr);
    PutWindowString(nwn,"CredManWin",wn);
  end;
  return;
end;


global
function Boolean CredMan2LClassUpdateWindowSubset(Integer wn,var string subsetname)
begin
  record CredManVc CredManr;
  
  GetWindowRecord(wn,CredManr);
  subsetname = 2;

  CredMan2LClassUpdateWindowSubset = true;
  return;
end;


global
function Boolean CredMan2LClassOnOpenWindow(Integer wn)
begin
  record CredManVc CredManr;
  
  GetWindowRecord(wn,CredManr);
  SetWindowSubset(wn,2);

  CredMan2LClassOnOpenWindow = true;
  return;
end;

global
function Boolean CredMan3LClassUpdateWindowSubset(Integer wn,var string subsetname)
begin
  record CredManVc CredManr;
  
  GetWindowRecord(wn,CredManr);
  subsetname = 3;

  CredMan3LClassUpdateWindowSubset = true;
  return;
end;

global
function Boolean CredMan3LClassOnOpenWindow(Integer wn)
begin
  record CredManVc CredManr;
  
  GetWindowRecord(wn,CredManr);
  SetWindowSubset(wn,3);

  CredMan3LClassOnOpenWindow = true;
  return;
end;


global
function Boolean CredMan4LClassUpdateWindowSubset(Integer wn,var string subsetname)
begin
  record CredManVc CredManr;
  
  GetWindowRecord(wn,CredManr);
  subsetname = 4;

  CredMan4LClassUpdateWindowSubset = true;
  return;
end;

global
function Boolean CredMan4LClassOnOpenWindow(Integer wn)
begin
  record CredManVc CredManr;
  
  GetWindowRecord(wn,CredManr);
  SetWindowSubset(wn,4);

  CredMan4LClassOnOpenWindow = true;
  return;
end;



global
function Boolean CredMan5LClassUpdateWindowSubset(Integer wn,var string subsetname)
begin
  record CredManVc CredManr;
  
  GetWindowRecord(wn,CredManr);
  subsetname = 5;

  CredMan5LClassUpdateWindowSubset = true;
  return;
end;

global
function Boolean CredMan5LClassOnOpenWindow(Integer wn)
begin
  record CredManVc CredManr;
  
  GetWindowRecord(wn,CredManr);
  SetWindowSubset(wn,5);

  CredMan5LClassOnOpenWindow = true;
  return;
end;


global
function Boolean CredMan6LClassUpdateWindowSubset(Integer wn,var string subsetname)
begin
  record CredManVc CredManr;
  
  GetWindowRecord(wn,CredManr);
  subsetname = 6;

  CredMan6LClassUpdateWindowSubset = true;
  return;
end;

global
function Boolean CredMan6LClassOnOpenWindow(Integer wn)
begin
  record CredManVc CredManr;
  
  GetWindowRecord(wn,CredManr);
  SetWindowSubset(wn,6);

  CredMan6LClassOnOpenWindow = true;
  return;
end;

global
function Boolean CredMan7LClassUpdateWindowSubset(Integer wn,var string subsetname)
begin
  record CredManVc CredManr;
  
  GetWindowRecord(wn,CredManr);
  subsetname = 7;

  CredMan7LClassUpdateWindowSubset = true;
  return;
end;

global
function Boolean CredMan7LClassOnOpenWindow(Integer wn)
begin
  record CredManVc CredManr;
  
  GetWindowRecord(wn,CredManr);
  SetWindowSubset(wn,7);

  CredMan7LClassOnOpenWindow = true;
  return;
end;

global
function Boolean CredMan8LClassUpdateWindowSubset(Integer wn,var string subsetname)
begin
  record CredManVc CredManr;
  
  GetWindowRecord(wn,CredManr);
  subsetname = 8;

  CredMan8LClassUpdateWindowSubset = true;
  return;
end;

global
function Boolean CredMan8LClassOnOpenWindow(Integer wn)
begin
  record CredManVc CredManr;
  
  GetWindowRecord(wn,CredManr);
  SetWindowSubset(wn,8);

  CredMan8LClassOnOpenWindow = true;
  return;
end;

global
procedure CredManLClassBtn()
begin
  record CredManVc CredManr;
  
  CloseWindow(CurWindow);
  OpenWindow("CredManLClass",0,0,"","",CredManr);

  return;
end;

global
procedure CredManLClass1Btn()
begin
  record CredManVc CredManr;
  
  CloseWindow(CurWindow);
  OpenWindow("CredMan1LClass",0,0,"1","",CredManr);

  return;
end;

global
procedure CredManLClass2Btn()
begin
  record CredManVc CredManr;
  
  CloseWindow(CurWindow);
  OpenWindow("CredMan2LClass",0,0,"2","",CredManr);

  return;
end;


global
procedure CredManLClass3Btn()
begin
  record CredManVc CredManr;
  
  CloseWindow(CurWindow);
  OpenWindow("CredMan3LClass",0,0,"3","",CredManr);

  return;
end;

global
procedure CredManLClass4Btn()
begin
  record CredManVc CredManr;
  
  CloseWindow(CurWindow);
  OpenWindow("CredMan4LClass",0,0,"4","",CredManr);

  return;
end;

global
procedure CredManLClass5Btn()
begin
  record CredManVc CredManr;
  
  CloseWindow(CurWindow);
  OpenWindow("CredMan5LClass",0,0,"5","",CredManr);

  return;
end;

global
procedure CredManLClass6Btn()
begin
  record CredManVc CredManr;
  
  CloseWindow(CurWindow);
  OpenWindow("CredMan6LClass",0,0,"6","",CredManr);

  return;
end;

global
procedure CredManLClass7Btn()
begin
  record CredManVc CredManr;
  
  CloseWindow(CurWindow);
  OpenWindow("CredMan7LClass",0,0,"7","",CredManr);

  return;
end;

global
procedure CredManLClass8Btn()
begin
  record CredManVc CredManr;
  
  CloseWindow(CurWindow);
  OpenWindow("CredMan8LClass",0,0,"8","",CredManr);

  return;
end;


global
function Boolean InvLegalInvSerieSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt,mwn,rw;
  record CredLegalInvNrBlock LegalInvNrRec;
  row CredLegalInvNrBlock LegalInvNrrw;

  mwn = MotherWindow(wn);
  GetWindowRecord(mwn,LegalInvNrRec);
  rw = WindowActiveRow(mwn);
  if (rw>=0) then begin
    MatRowGet(LegalInvNrRec,rw,LegalInvNrrw);

    threadremote.InvLegalInvSerieSClassRemote(LegalInvNrrw.StartDate,LegalInvNrrw.EndDate,astr);
    for (i=0;i<astr.length;i=i+1) begin
      SetListString(wn,len(astr[i]),astr[i],false);    
    end;
  end;

  InvLegalInvSerieSClassOnOpenWindow = true;
  return;
end;

global
function Boolean InvLegalInvSerieSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-2);
  InvLegalInvSerieSClassOnOKWindow = false;
  return;
end;

global
function LongInt CredManVcRecordDefaultsClient(LongInt wn,var record CredManVc CredManr,record CredManVc CredMan2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record CMInterfaceSetBlock ISb;
  Integer mwn,num;
  string 255 wstr;

  BlockLoad(ISb);
  if (CredManr.LoanType==0) then begin
    wstr = GetWindowClass(wn);
    if (wstr=="CredManDClass") then begin
      CredManr.LoanType = ISb.DefCredManLoanType;
    end else begin
      num = StringToInt(mid(wstr,7,1));
      if (num>0) then begin
        CredManr.LoanType = num;
      end;
    end;
  end;
  

  CredManVcRecordDefaultsClient = res; 
  return;
end;


global
function Boolean CredManDClassStatusButtonAction(Integer wn,Integer value)
begin
  record CredManVc CredManr;
  Boolean res;

  res = true;
  GetWindowRecord(wn,CredManr);
  if (value==3) then begin
    if (UserCanAction("AllowActivateCredMan",false)==false) then begin
      res = false;
    end;
  end;
  if (value==4) then begin
    if (UserCanAction("AllowDisburseCredMan",false)==false) then begin
      res = false;
    end;
  end;
  if (value==5) then begin
    if (ContractHasHistory(CredManr)) then begin
      res = false;
    end;
  end;


  CredManDClassStatusButtonAction = res;
  return;
end;

global
function Boolean CredManDClassHasChangesButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  CredManDClassHasChangesButtonAction = false;
  return;
end;

global
function Boolean CredManDClassLoanTypeButtonAction(Integer wn,Integer value)
begin
  record CredManVc CredManr;
  Boolean res;
  Integer mwn;

  res = true;
  GetWindowRecord(wn,CredManr);
  if (value==7 or value==8) then begin
    CredManr.InstalmentType = 3;
    PutWindowRecord(wn,CredManr);
  end;

  if (value>0) then begin
    mwn = MotherWindow(wn);
    CloseWindow(wn);
    OpenWindow("CredMan" & value & "DClass",1,mwn,"","",CredManr);
  end;


  CredManDClassLoanTypeButtonAction = res;
  return;
end;

global
function Integer CredManDClassSelectSetToPaste(Integer wn,string fieldname)
begin
  Integer res,rownr;
  record CredManVc CredManr;
  
  res = -1;
  GetWindowRecord(wn,CredManr);
  switch (fieldname) begin
    case "InstalmentType":
      if (CredManr.LoanType==7 or CredManr.LoanType==8) then begin
        res = 2031;
      end;
  end;
  CredManDClassSelectSetToPaste = res;
  return;
end;


global
function Boolean GenOverdueInvVClassArtModeButtonAction(Integer wn,Integer value)
begin
  record IPConVc PCr;

  NewTimedTask("rerun window def","rerunwindowdef","RerunWindowDefHAL",wn,CurrentDate,CurrentTime,"","");  

  GenOverdueInvVClassArtModeButtonAction = true;
  return;
end;

function Boolean BOESuretyDClassSuretyProviderEFAfter(Integer wn,Boolean changedf,Integer num)
begin
  record BOESuretyVc BSr;
  string 255 warning;

  if (changedf) then begin  
    GetWindowRecord(wn,BSr);
    PasteSuretyInBOESurety(BSr,GetFieldValueByName(BSr,"SuretyProvider" & num,-1),num);
    PutWindowRecord(wn,BSr);   
  end; 
  BOESuretyDClassSuretyProviderEFAfter = true;
  return;
end;

function Boolean BOESuretyDClassSuretySignerEFAfter(Integer wn,Boolean changedf,Integer num)
begin
  record BOESuretyVc BSr;
  record CUVc CUr;

  if (changedf) then begin  
    GetWindowRecord(wn,BSr);
    InsertBOESuretySignerName(BSr,num);
    PutWindowRecord(wn,BSr);   
  end; 
  BOESuretyDClassSuretySignerEFAfter = true;
  return;
end;

global
function Boolean BOESuretyDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;
  Integer num;

  if (left(fieldname,14)=="SuretyProvider") then begin
    num = StringToInt(right(fieldname,1));
    res = BOESuretyDClassSuretyProviderEFAfter(wn,changed!=0,num);
  end;
  
  if (left(fieldname,6)=="Surety" and right(fieldname,6)=="Signer") then begin
    num = StringToInt(mid(fieldname,6,1));
    res = BOESuretyDClassSuretySignerEFAfter(wn,changed!=0,num);
  end;

  BOESuretyDClassAfterEditField = res;
  return;
end;


function Boolean CredManTestDClassTypeEFAfter(Integer wn,Boolean changedf)
begin
  record CredManTestVc CredManTestr;
  record CredManTypeVc CMTr;

  if (changedf) then begin  
    GetWindowRecord(wn,CredManTestr);
    CMTr.Code = CredManTestr.Type;
    if (ReadFirstMain(CMTr,1,true)) then begin
      CredManTestr.Months = CMTr.InstalmentMonths;
      CredManTestr.IntRate = CMTr.IntRate;
    end;
    PutWindowRecord(wn,CredManTestr); 
  end; 
  CredManTestDClassTypeEFAfter = true;
  return;
end;


global
function Boolean CredManTestDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  if (changed==0) then begin
    goto LCredManTestDClassAfterEditField;
  end;
  if (fieldname=="Type") then begin
    res = CredManTestDClassTypeEFAfter(wn,changed!=0);
  end;

LCredManTestDClassAfterEditField:;
  CredManTestDClassAfterEditField = res;
  return;
end;


function Boolean CredManAccDClassTypeEFAfter(Integer wn,Boolean changedf)
begin
  record CredManAccVc CredManAccr;
  record CredManTypeVc CMTr;

  if (changedf) then begin  
    GetWindowRecord(wn,CredManAccr);
    CMTr.Code = CredManAccr.CredManType;
    if (ReadFirstMain(CMTr,1,true)) then begin
      CredManAccr.Comment = CMTr.Comment;
    end;
    PutWindowRecord(wn,CredManAccr); 
  end; 
  CredManAccDClassTypeEFAfter = true;
  return;
end;


global
function Boolean CredManAccDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  if (changed==0) then begin
    goto LCredManAccDClassAfterEditField;
  end;
  if (fieldname=="CredManType") then begin
    res = CredManAccDClassTypeEFAfter(wn,changed!=0);
  end;

LCredManAccDClassAfterEditField:;
  CredManAccDClassAfterEditField = res;
  return;
end;

global
procedure DblCredManTestVc(string dblstr,string l,Integer currepwn)
begin
  record CredManTestVc CredManTestr;

  if (nonblank(l)) then begin
    CredManTestr.UUID = StringToUUID(l);
  end else begin
    CredManTestr.UUID = StringToUUID(dblstr);
  end;
  if (ReadFirstMain(CredManTestr,1,true)) then begin
    OpenWindow("CredManTestDClass",1,0,"","",CredManTestr);
  end;
  return;
end;



function Boolean CredManMoneyRecDClassCustCodeEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record CredManMoneyRecVc MRr;
  row CredManMoneyRecVc MRrw;
  record CUVc CUr;

  if (changedf and rownr>-1) then begin  
    GetWindowRecord(wn,MRr);
    MatRowGet(MRr,rownr,MRrw);
    CUr.Code = MRrw.CustCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      MRrw.CustName = CUr.Name;
    end;
    MatRowPut(MRr,rownr,MRrw);
    PutWindowRecord(wn,MRr);   
  end; 
  CredManMoneyRecDClassCustCodeEFAfter = true;
  return;
end;

procedure SumupCredManReceivers(var record CredManMoneyRecVc MRr)
begin
  row CredManMoneyRecVc MRrw;
  Integer i,rwcnt;
  val tot;

  rwcnt = MatRowCnt(MRr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(MRr,i,MRrw);
    tot = tot + MRrw.AmountVal;
  end;
  MRr.Total = tot;

  return;
end;

function Boolean CredManMoneyRecDClassAmountValEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record CredManMoneyRecVc MRr;

  if (changedf and rownr>-1) then begin  
    GetWindowRecord(wn,MRr);
    SumupCredManReceivers(MRr);
    PutWindowRecord(wn,MRr);   
  end; 
  CredManMoneyRecDClassAmountValEFAfter = true;
  return;
end;

function Boolean CredManMoneyRecDClassAmountPrcEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record CredManMoneyRecVc MRr;
  row CredManMoneyRecVc MRrw;
  record CredManVc CredManr;

  if (changedf and rownr>-1) then begin  
    GetWindowRecord(wn,MRr);
    MatRowGet(MRr,rownr,MRrw);
    CredManr.SerNr = MRr.CredManNr;
    if (ReadFirstMain(CredManr,1,true)) then begin
      MRrw.AmountVal = CredManr.InvSum4*(MRrw.AmountPrc/100);
      MatRowPut(MRr,rownr,MRrw);
    end;
    SumupCredManReceivers(MRr);
    PutWindowRecord(wn,MRr);   
  end; 
  CredManMoneyRecDClassAmountPrcEFAfter = true;
  return;
end;

global
function Boolean CredManMoneyRecDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "CustCode": res = CredManMoneyRecDClassCustCodeEFAfter(wn,rownr,changed!=0);
    case "AmountPrc": res = CredManMoneyRecDClassAmountPrcEFAfter(wn,rownr,changed!=0);
    case "AmountVal": res = CredManMoneyRecDClassAmountValEFAfter(wn,rownr,changed!=0);
  end;
  
  CredManMoneyRecDClassAfterEditField = res;
  return;
end;


global
updating procedure CredManDClassMoneyReceivers()
begin
  record CredManVc CredManr;
  record CredManMoneyRecVc MRr;
  Integer wn,nwn,num;

  wn = CurWindow;
  if (WindowState(wn)==Rs_Normal) then begin
    GetWindowRecord(wn,CredManr);
    GetCredManMoneyReceiverRecord(CredManr,MRr);
    nwn = OpenWindow("CredManMoneyRecDClass",1,0,"","",MRr);
  end;
  return;
end;


global
function Boolean CMShowVATColumn()
begin
  record CMInterfaceSetBlock ISb;
  Boolean res;
  
  BlockLoad(ISb);
  if (ISb.ShowVAT==1) then begin
    res = true;
  end;

  CMShowVATColumn = res;
  return;
end;

global
function Boolean CMBalanceTransferVClassOnOKWindow(Integer wn)
begin
  Boolean res;
  record RcVc RepSpec;

  res = true;

  GetWindowRecord(wn,RepSpec);
  if (blank(RepSpec.d1)) then begin
    res = false;
    MessageBox(1058,"");
    WindowFieldGoto(wn,RepSpec,-1,"d1",true);
    goto LCMBalanceTransferVClassOnOKWindow;
  end;
  if (blank(RepSpec.d2)) then begin
    res = false;
    MessageBox(1058,"");
    WindowFieldGoto(wn,RepSpec,-1,"d2",true);
    goto LCMBalanceTransferVClassOnOKWindow;
  end;
  if (blank(RepSpec.RegDate)) then begin
    res = false;
    MessageBox(1058,"");
    WindowFieldGoto(wn,RepSpec,-1,"RegDate",true);
    goto LCMBalanceTransferVClassOnOKWindow;
  end;


LCMBalanceTransferVClassOnOKWindow:;
  CMBalanceTransferVClassOnOKWindow = res;
  return;
end;

global
procedure CredManDClassButtonFlags(Integer wn,var Boolean duplOK,var Boolean newOK,var Boolean saveOK,var Boolean restOK)
begin // Temporary fix for the RecordList
  saveOK = true;
  return;
end;

global
function Boolean CredManDClassOKFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record CredManVc CredManr;
 
  res = inner.CredManDClassOKFlagButtonAction(wn,value);
  if (res and WindowState(wn)==Rs_update) then begin
    GetWindowRecord(wn,CredManr);
    if (CredManr.Approved==0) then begin
      res = false;
    end;
  end;

  CredManDClassOKFlagButtonAction = res;
  RETURN;
END;

global
function Boolean CredManDClassApprovedButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record CredManVc CredManr;
 
  res = inner.CredManDClassApprovedButtonAction(wn,value);
  if (res and WindowState(wn)==Rs_update) then begin
    GetWindowRecord(wn,CredManr);
    if (CredManr.OKFlag==1) then begin
      res = false;
    end;
  end;

  CredManDClassApprovedButtonAction = res;
  RETURN;
END;

global
procedure CredManGracePeriodDsm()
begin
  record RcVc RepSpec;
  Date ed;
  
  RepSpec.d1 = CurrentDate;
  ed = AddMonth(CurrentDate,2);
  ed.Day = 1;
  ed = AddDay(ed,-1);
  RepSpec.d2 = ed;

  OpenWindow("CredManGracePeriodWClass",0,CurWindow,"","",RepSpec);

  return;
end;

global
updating procedure CredManGracePeriodWClassProceed()
begin
  Integer wn,mwn;
  record RcVc RepSpec;
  record CredManVc CredManr;
  string 255 errstr;

  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,RepSpec);
  mwn = MotherWindow(wn);
  GetWindowRecord(mwn,CredManr);
  CredManGracePeriodRemote(RepSpec,CredManr,errstr);
  if (nonblank(errstr)) then begin
    MessageBox(0,errstr);
  end else begin
    CloseWindow(wn);
    
  end;

  return;
end;

global
updating function Boolean CheckBuyoutValueOmegaWClassOnOpenWindow(Integer wn)
begin
  record ORVc ORr;
  record CredManVc CredManr;
  Integer mwn;

  GetWindowRecord(wn,ORr);
  ORr.OrdDate = CurrentDate;
  ORr.InvMark = 1;
  mwn = MotherWindow(wn);
  GetWindowRecord(mwn,CredManr);
  ORr.SumIncCom = CredManr.LetterOfDemand;
  //ORr.RvrsVAT = CredManr.InsuranceCost; open insurance invoices instead
  PutWindowRecord(wn,ORr);
  CalculateBuyOutValue;

  CheckBuyoutValueOmegaWClassOnOpenWindow = false;
  return;
end;

function Boolean CheckBuyoutValueOmegaWClassSumIncComEFAfter(Integer wn,integer changedf)
begin
  record ORVc ORr, oldORr;
  val oldval;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,ORr);
    GetPrevWindowRecord(wn,oldORr);
    oldval = StringToVal(WindEFstr(wn),M4Val);
    
    if (ORr.SumIncCom<oldval) then begin
      ORr.SumIncCom = oldval;
    end;    
    ORr.FrBase = ORr.FrBase - oldval + ORr.SumIncCom;
    PutWindowRecord(wn,ORr);
  end;
  CheckBuyoutValueOmegaWClassSumIncComEFAfter = true;
  return;
end;

function Boolean CheckBuyoutValueOmegaWClassRvrsVATEFAfter(Integer wn,integer changedf)
begin
  record ORVc ORr, oldORr;
  val oldval;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,ORr);
    GetPrevWindowRecord(wn,oldORr);
    oldval = StringToVal(WindEFstr(wn),M4Val);
    if (ORr.RvrsVAT<oldval) then begin
      ORr.RvrsVAT = oldval;
    end;    
    ORr.FrBase = ORr.FrBase - oldval + ORr.RvrsVAT;
    PutWindowRecord(wn,ORr);
  end;
  CheckBuyoutValueOmegaWClassRvrsVATEFAfter = true;
  return;
end;

global
function Boolean CheckBuyoutValueOmegaWClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;
  
  res = true;
  if (changed!=0) then begin
    switch (fieldname) begin
      case "SumIncCom": res = CheckBuyoutValueOmegaWClassSumIncComEFAfter(wn,changed);//"Letter of Demand"
      case "RvrsVAT": res = CheckBuyoutValueOmegaWClassRvrsVATEFAfter(wn,changed);//"Insurance cost"
    end;
  end;
  CheckBuyoutValueOmegaWClassAfterEditField = res;
  return;
end;

global
procedure ManualExtraFeeWClassOnOpenWindow(Integer wn)
begin
  record RcVc RepSpec;
  record CMInvoicingBlock CMIb;
  
  BlockLoad(CMIb);
  GetWindowRecord(wn,RepSpec);
  
  RepSpec.f2 = CMIb.FirstInvPayDeal;
  RepSpec.f3 = CurrentUser;
  PutWindowRecord(wn,RepSpec);
  return;
end;

global
procedure ManualExtraFeeWClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  record INVc INr;
  record RcVc RepSpec;
  
  if (changed==0) then begin
    goto LManualExtraFeeWClassAfterEditField;
  end;
  GetWindowRecord(wn,RepSpec);
  if (fieldname=="f1") then begin
    RepSpec.f4 = "";
    GetItemName(RepSpec.f1,RepSpec.f4);
  end;
  PutWindowRecord(wn,RepSpec);   
  LManualExtraFeeWClassAfterEditField:;
  return;
end;
