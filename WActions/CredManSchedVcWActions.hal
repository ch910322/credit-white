remote procedure TestInvoiceBasedOnScheduleRow(record CredManSchedVc,row CredManSchedVc,var record IVVc);
remote procedure CredManSchedRecalcInterestRemote(var record CredManSchedVc,var val);
remote function Boolean AgreementPaidOut(record CredManVc,var val);
remote function Integer GetInterestPaymentType(record CredManVc);

function val GetScheduleTotalVal(record CredManSchedVc CSr)
begin
  record CredManVc CredManr;
  Integer int_type;
  val res,paidval;
  
  CredManr.SerNr = CSr.CredManNr;
  if (ReadFirstMain(CredManr,1,true)) then begin
    int_type = GetInterestPaymentType(CredManr);
    AgreementPaidOut(CredManr,paidval);
    if (int_type==2) then begin
      res = paidval;
    end else begin
      res = CredManr.InvSum4 + paidval;
    end;
  end;

  GetScheduleTotalVal = res;
  return;
end;

global
procedure GetScheduleTotals(record CredManSchedVc CSr,var val princ,var val interest,var val fees,var val total,var val vat,var val credtotal,var Date sd,var Date ed)
begin  
  Integer rwcnt,i;
  row CredManSchedVc CSrw;

  princ = 0;
  interest = 0;
  fees = 0;
  total = 0;
  vat = 0;
  credtotal = GetScheduleTotalVal(CSr);

  rwcnt = MatRowCnt(CSr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CSr,i,CSrw);
    if (CSrw.Type!=5) then begin
      princ = princ + CSrw.Principle + CSrw.Deposit;
      interest = interest + CSrw.Interest;
      fees = fees + CSrw.Fees;
      total = total + CSrw.Total;
      if (CSrw.Type==4) then begin
        princ = princ + CSrw.Total;
      end;
      if (i==0) then begin
        sd = CSrw.InvDate;
      end;
      if (i==rwcnt-1) then begin
        ed = CSrw.InvDate;
      end;
    end;
    //vat = vat + CSrw.;
  end;

  return;
end;

procedure UpdateCredManSchedSoftFields(Integer wn)
begin
  record CredManSchedVc CSr;
  val princ,interest,fees,total,vat,credtotal;
  Date sd,ed;
  record CredManVc CredManr;

  GetWindowRecord(wn,CSr);
  GetScheduleTotals(CSr,princ,interest,fees,total,vat,credtotal,sd,ed);

  PutWindowString(wn,"period",sd & ":" & ed);
  PutWindowString(wn,"totprinc",princ);
  PutWindowString(wn,"totint",interest);
  PutWindowString(wn,"totfees",fees);
  PutWindowString(wn,"tot",total);
  CredManr.SerNr = CSr.CredManNr;
  if (ReadFirstMain(CredManr,1,true)) then begin
    PutWindowString(wn,"totrealprinc",credtotal);  
    PutWindowString(wn,"diff",credtotal-princ);
  end;

  return;
end;

global
procedure OpenCredFeesMatrixSchedDsm()
begin
  record CredFeesMatrixVc FMr;
  record CredManSchedVc CSr;
  row CredManSchedVc CSrw;
  longint nwn,wn,rowno;
  
  wn = CurWindow;
  GetWindowRecord(wn,CSr);
  rowno = WindowActiveRow(wn);
  
  if (rowno>=0) then begin
    MatRowGet(CSr,rowno,CSrw);
    UnpackRowFieldMatrix(CSrw,"FeesMatrix",FMr);
  end;
  
  if (CSrw.Invoiced==0 and rowno>=0) then begin
    nwn = OpenWindow("CredFeesMatrixVClass",0,wn,"","",FMr);
  
    PutWindowRecord(nwn,FMr);
    PutWindowPrevRecord(nwn,FMr);
    PutWindowString(nwn,"TaxMatrixActiveRow",rowno)
    SetWindowState(nwn,Rs_normal);
  end;
  return;
end;

global
procedure CredManSchedRecalcBalance(var record CredManSchedVc CSr)
begin
  record CredManVc CredManr;
  row CredManSchedVc CSrw;
  Integer i,rwcnt;
  val bal;

  CredManr.SerNr = CSr.CredManNr;
  if (ReadFirstMain(CredManr,1,true)) then begin
    bal = CredManr.InvSum4;
    rwcnt = MatRowCnt(CSr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(CSr,i,CSrw);
      switch (CSrw.Type) begin
        case 4:
          bal = bal - CSrw.Total;
        case 5:
          bal = bal + CSrw.Principle;
        otherwise
          bal = bal - CSrw.Principle - CSrw.Deposit;
      end;
      CSrw.Balance = bal;
      MatRowPut(CSr,i,CSrw);
    end;
  end;

  return;
end;

global
procedure SumupCredManSched(var record CredManSchedVc CSr,Integer rowno)
begin
  row CredManSchedVc CSrw;
  record CredFeesMatrixVc FMr;
  row CredFeesMatrixVc FMrw;
  Integer i,rwcnt;
  val fees;
  record IVVc IVr;
  
  MatRowGet(CSr,rowno,CSrw);
//  UnpackRowFieldMatrix(CSrw,"FeesMatrix",FMr);
/*
  rwcnt = MatRowCnt(FMr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(FMr,i,FMrw);
    fees = fees + FMrw.Sum;
  end;
*/
  TestInvoiceBasedOnScheduleRow(CSr,CSrw,IVr);

  CSrw.Total = IVr.Sum4;
  if(CSrw.Type==6)then begin
    CSrw.Total = CSrw.Principle;
  end;
  MatRowPut(CSr,rowno,CSrw);

  return;
end;

global
function Boolean CredFeesMatrixVClassOnOKWindow(Integer wn)
begin
  record CredFeesMatrixVc FMr;
  row CredFeesMatrixVc FMrw;
  record CredManSchedVc SCr;
  row CredManSchedVc SCrw;
  longint mwn,rowno;
  Integer i,rwcnt;
  val fees;
  
  //wn = CurWindow;
  mwn = MotherWindow(wn);
  DeselectWindow(wn,true);
  GetWindowRecord(wn,FMr);
  rwcnt = MatRowCnt(FMr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(FMr,i,FMrw);
    if (blank(FMrw.ArtCode)) then begin
      MessageBox(1058,"");
      WindowFieldGoto(wn,FMr,i,"ArtCode",true);
      goto LCredFeesMatrixVClassOnOKWindow;
    end else begin
      fees = fees + FMrw.Sum;
    end;
  end;
  GetWindowRecord(mwn,SCr);
  rowno = StringToInt(GetWindowString(wn,"TaxMatrixActiveRow"));
  if (rowno>=0) then begin
    MatRowGet(SCr,rowno,SCrw);
    PackRowFieldMatrix(SCrw,"FeesMatrix",FMr);
    SCrw.Fees = fees;
    MatRowPut(SCr,rowno,SCrw);
    SumupCredManSched(SCr,rowno);
  end;

  CloseWindow(wn);
  WindowFieldGoto(mwn,SCr,i,"Total",false);
  PutWindowRecord(mwn,SCr);
  if (WindowState(mwn)==Rs_normal) then begin
    SetWindowState(mwn,Rs_update);
  end;
  UpdateCredManSchedSoftFields(mwn);

LCredFeesMatrixVClassOnOKWindow:;
  CredFeesMatrixVClassOnOKWindow = false;
  return;
end;

global
procedure CredFeesMatrixVClassSave()
begin
  Integer wn;
  
  wn = CurWindow;
  DeselectWindow(wn,true);
  CredFeesMatrixVClassOnOKWindow(wn);

  return;
end;


global
function Boolean CredManSchedDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;

  res = true;

  switch (fieldname) begin
    case "Total": 
      res = false;
    case "Balance": 
      res = false;
    case "Fees": 
      //res = false;
  end;

  CredManSchedDClassActiveEditField = res;
  return;
end;


global
function Boolean CredManSchedDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;
  record CredManSchedVc CSr;
  
  if (rownr>=0 and changed!=0) then begin
    GetWindowRecord(wn,CSr);
    SumupCredManSched(CSr,rownr);
    if (fieldname=="Principle") then begin
      CredManSchedRecalcBalance(CSr);
      PutWindowString(wn,"RecalcMessage","true");
    end;
    PutWindowRecord(wn,CSr);
    UpdateCredManSchedSoftFields(wn);
  end;

  CredManSchedDClassAfterEditField = res;
  return;
end;

global
procedure CredManSchedDClassOnWindowRecordChange(Integer wn)
begin
  UpdateCredManSchedSoftFields(wn);
  return;
end;

global
function Boolean CredManSchedDClassOnOpenWindow(Integer wn)
begin
  Boolean res;
  UpdateCredManSchedSoftFields(wn);

  CredManSchedDClassOnOpenWindow = false;
  return;
end;


global
procedure CredManSchedRecalcInterestDsm()
begin
  record CredManSchedVc CSr;
  Integer wn;
  val calcbal;
  
  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,CSr);
  PutWindowString(wn,"RecalcMessage","");
  calcbal = StringToVal(GetWindowString(wn,"totprinc"),M4Val);
  CredManSchedRecalcInterestRemote(CSr,calcbal);
  PutWindowRecord(wn,CSr);
  SelectWindow(wn);

  return;
end;

global
updating procedure RecalcInterestWClassProceed()
begin
  Integer wn,mwn;
  
  wn = CurWindow;
  mwn = MotherWindow(wn);
  
  CloseWindow(wn);
  SelectWindow(mwn);
  CredManSchedRecalcInterestDsm;
  WindowDoOK(mwn,0);

  return;
end;

global
updating procedure RecalcInterestWClassSave()
begin
  Integer wn,mwn;
  
  wn = CurWindow;
  mwn = MotherWindow(wn);
  
  CloseWindow(wn);
  SelectWindow(mwn);
  PutWindowString(mwn,"RecalcMessage","");
  WindowDoOK(mwn,0);

  return;
end;
