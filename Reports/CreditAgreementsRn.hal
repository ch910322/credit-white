//<halrule>server-only</halrule>
external procedure BuildCredManPayPlanCust(record CredManVc,var record CredManPayPlanVc,record CredManSetBlock,Boolean,Boolean);
external inner function Boolean SetInSet2(string,string);
external procedure CheckBuyOutAgreement(record CredManVc,var record RcVc);
external procedure LoadAgreementRateToDate(record CredManVc,Date,var val,var Date);
external inner function LongInt MonthDiff(Date,Date);

function string 10 Checkbocout(boolean in)
begin
	string 10 res;
	res = "";
	
	if(in)then begin
		res = "Taip";
	end;
	Checkbocout = res;
return;
end;

global
function val GetFutureCredManBalance(record CredManVc CredManr,var record CredManPayPlanVc CredManPayr,Date baldate,record CredManSetBlock CredManSetb)
begin
	val res;
	row CredManPayPlanVc CredManPayrw;
	Integer rwcnt,i;
  val open;
  
	res = blankval;
	rwcnt = MatRowCnt(CredManPayr);
	for (i=rwcnt-1;i>=0;i=i-1) begin
  	MatRowGet(CredManPayr,i,CredManPayrw);
    open = open + CredManPayrw.OpenAmount;
		if (CredManPayrw.TransDate<=baldate and blank(res) and (CredManPayrw.ArtCode==CredManSetb.InstalmentItem)) then begin
  		res = CredManPayrw.Bal;
//			i = 0;
		end;
	end;
	if (blank(res)) then begin
    if (rwcnt==1) then begin
      res = CredManr.InvSum4;
    end else begin
      MatRowGet(CredManPayr,0,CredManPayrw);
      res = CredManPayrw.Bal;      
    end;
	end else begin
    res = res + open;
  end;

	GetFutureCredManBalance = res;
	return;
end;

function string 255 GetCustomerInvoicingEmails(record CUVc CUr)
begin
  record EmailRecipVc EmailRecipr;
  row EmailRecipVc EmailReciprw;
  Integer i,rwcnt;
  string 255 res;
  record CUVc CU2r;

  res = CUr.eMail;
  if (blank(res)) then begin
    EmailRecipr.MainContactCode = CUr.Code;
    if (ReadFirstMain(EmailRecipr,1,true)) then begin 
      rwcnt = MatRowCnt(EmailRecipr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(EmailRecipr,i,EmailReciprw);
        if (EmailReciprw.DocType==kMailInvoice) then begin
          CU2r.Code = EmailReciprw.ContactCode;
          if (ReadFirstMain(CU2r,1,true)) then begin
            if (nonblank(CU2r.eMail)) then begin
              res = CU2r.eMail;
              i = rwcnt;
            end;        
          end;
        end;
      end;
    end;
  end;

  GetCustomerInvoicingEmails = res;
  return;
end;

function Integer GetActualMonths(record CredManVc CredManr,record CredManPayPlanVc CredManPayr)
begin
  Integer rwcnt,res;
  row CredManPayPlanVc CredManPayrw;
  
  rwcnt = MatRowCnt(CredManPayr);
  if (rwcnt>0) then begin
    MatRowGet(CredManPayr,rwcnt-1,CredManPayrw);
    res = MonthDiff(CredManr.FirstInvDate,CredManPayrw.TransDate)+1;
  end;
  
  GetActualMonths = res;
  return;
end;

function string 255 GetCredManTypeClassifications(string type)
begin
  record CredManTypeVc CMTr;
  string 255 res;

  CMTr.Code = type;
  if (ReadFirstMain(CMTr,1,true)) then begin
    res = CMTr.Classifications;
  end;

  GetCredManTypeClassifications = res;
  return;
end;

global procedure CreditAgreementsRn(record RcVc RepSpec)
begin
	record CredManVc CredManr;
	boolean TrHs,testf;
	record CredManEventVc CMEventr;
	string 200 thekey,classifications;
	val curbal,totamount,totdep,totmonth,totbal,totalbuyout;
	record CredManSetBlock CredManSetb;
	record CUVc CUr;
  record RcVc tRepSpec;
  array Integer rp;
  Integer realmonths;
  val realrate;
  Date ratedate;
  record CredManPayPlanVc CredManPayr;

	BlockLoad(CredManSetb);
	startreportjob(USetStr(200280));
	
	endheader;

  if (blank(RepSpec.d1)) then begin
    RepSpec.d1 = CurrentDate;
  end;

  rp[2] = 50;
  rp[125] = 130;
  rp[3] = 200;
  rp[4] = 270;
  rp[5] = 400;
  rp[6] = 470;
  rp[7] = 540;
  rp[8] = 600;
  rp[9] = 660;//670
  rp[10] = 720;
  rp[11] = 770;
  rp[12] = 850;
  rp[13] = 910;
  rp[14] = 990;
  rp[15] = 1120;
  rp[16] = 1160;
  rp[17] = 1250;
  rp[18] = 1300;
  rp[19] = 1350;
  
	
	StartFormat(15);
		OutString(0,0,USetStr(200281),false);
		OutString(rp[2],0,USetStr(200282),false);
		if(RepSpec.Media==mtExcel)then begin
			OutString(70,0,USetStr(200285),false);
			OutString(70,0,USetStr(200286),false);
			OutString(70,0,USetStr(200287),false);
		end;
		OutString(rp[125],0,USetStr(200288),false);
		OutString(rp[3],0,USetStr(200289),false);
//		OutString(35,0,"Klientas",false);
		OutString(rp[4],0,USetStr(200290),false);
		OutString(rp[5],0,USetStr(200291),false);
		OutString(rp[6],0,USetStr(200292),false);
		OutString(rp[7],0,USetStr(200293),false);//totoals
    if (RepSpec.flags[6]==1) then begin
		  OutString(rp[8],0,USetStr(200294),false);//totoals
    end else begin
  		OutString(rp[8],0,USetStr(200295),false);//totals
  		OutString(rp[9],0,USetStr(200296),false);
    end;
		OutString(rp[10],0,USetStr(200297),false);//months
		OutString(rp[11],0,USetStr(200302),false);//real months
		OutString(rp[12],0,USetStr(200298),false);//rate
		OutString(rp[13],0,USetStr(200303),false);//real rate
		OutString(rp[14],0,USetStr(200304),false);//rate date
		OutString(rp[15],0,USetStr(200299),true);//totals
		OutString(rp[16],0,USetStr(200300),true);//totals
		OutString(rp[17],0,USetStr(200301),true);//buyout value
		OutString(rp[18],0,USetStr(200305),true);//order class
		OutString(rp[19],0,USetStr(200306),true);//classifications
	EndFormat;
	
	TrHs = true;
	CredManr.startDate = RepSpec.sStartDate;
	while(loopkey("startDate",CredManr,1,TrHs))begin
		testf = true;
		if(nonblank(RepSpec.f1) and CredManr.CustCode!=RepSpec.f1)then begin testf = false; end;
		if(nonblank(RepSpec.f2) and CredManr.Type!=RepSpec.f2)then begin testf = false; end;
		if(nonblank(RepSpec.f3) and CredManr.OrderClass!=RepSpec.f3)then begin testf = false; end;
		if(nonblank(RepSpec.f5) and CredManr.SalesMan!=RepSpec.f5)then begin testf = false; end;
		if(RepSpec.flags[7]==1) then begin
      if (CredManr.OKFlag==1)then begin testf = false; end;
    end else begin
      if(RepSpec.flags[3]==0 and CredManr.Approved==0)then begin testf = false; end;
      if(RepSpec.flags[4]==0 and CredManr.OKFlag==0)then begin testf = false; end;
    end;
		if(CredManr.startDate<RepSpec.sStartDate)then begin testf = false; end;
    if (nonblank(RepSpec.f4) and SetInSet2(RepSpec.f4,CredManr.Classifications)==false) then begin 
      testf = false; 
    end;
		if(CredManr.startDate>RepSpec.sEndDate)then begin testf = false; TrHs = false; end;
		if(nonblank(RepSpec.Period2Str2) and DateInRange(CredManr.FirstInvDate,RepSpec.sStartDate2,RepSpec.sEndDate2)==false)then begin testf = false; end;
		
		if (testf) then begin
      RecordClear(CredManPayr);
      BuildCredManPayPlanCust(CredManr,CredManPayr,CredManSetb,true,false);
  		curbal = GetFutureCredManBalance(CredManr,CredManPayr,RepSpec.d1,CredManSetb);
			if(RepSpec.flags[5]==0 and curbal<=0)then begin testf = false; end;
		end;
		
		if(testf)then begin
		  CUr.Code = CredManr.CustCode;
      tRepSpec.d1 = RepSpec.d1;
      CheckBuyOutAgreement(CredManr,tRepSpec);
      realmonths = GetActualMonths(CredManr,CredManPayr);
      realrate = CredManr.IntRate;
      LoadAgreementRateToDate(CredManr,RepSpec.sEndDate,realrate,ratedate);
      classifications = GetCredManTypeClassifications(CredManr.Type);

		  ReadFirstMain(CUr,1,true);
			StartFormat(15);
      OutString(0,"DblCredManVc",CredManr.SerNr,false);
      OutString(rp[2],"DblCredManTypeVc",CredManr.Type,false);
      if(RepSpec.Media==mtExcel)then begin
        OutString(70,0,Checkbocout(CredManr.Approved==0),false);
        OutString(70,0,Checkbocout(CredManr.OKFlag==0),false);
        OutString(70,0,Checkbocout(curbal==0),false);
      end;
      OutString(rp[125],"DblCUVc",CUr.Code,false);
      OutStringID(rp[3],"DblCUVc",CUr.RegNr1,false,CUr.Code);
//      OutString(35,"DblCUVc",CredManr.CustCode,false);
      OutString(rp[4],0,CredManr.Addr0,false);
      OutString(rp[5],0,CredManr.startDate,false);
      OutString(rp[6],0,CredManr.endDate,false);
      OutString(rp[7],0,CredManr.InvSum4,false);
      if (RepSpec.flags[6]==1) then begin
        OutString(rp[8],0,GetCustomerInvoicingEmails(CUr),false);//totoals
      end else begin
        OutString(rp[8],0,CredManr.DepositSum,false);
        OutString(rp[9],0,CredManr.DepositPrc,false);
      end;
      OutString(rp[10],0,CredManr.InstalmentMonths,false);
      OutString(rp[11],0,realmonths,false);
      OutString(rp[12],0,CredManr.IntRate,false);
      OutString(rp[13],0,realrate,false);
      OutString(rp[14],0,ratedate,false);
      
      OutString(rp[15],0,CredManr.MonthlySum,true);
      OutString(rp[16],0,curbal,true);
      OutString(rp[17],0,tRepSpec.vals2,true);
      OutString(rp[18],0,CredManr.OrderClass,true);
      OutString(rp[19],0,classifications,true);
      totamount = totamount + CredManr.InvSum4;
      totdep = totdep + CredManr.DepositSum;
      totmonth = totmonth + CredManr.MonthlySum;
      totbal = totbal + curbal;
      totalbuyout = totalbuyout + tRepSpec.vals2;
			EndFormat;
		end;
	end;
  StartFormat(1);
  Gray_divider(0,1);
  EndFormat;
  StartFormat(15);
  OutString(0,0,"",false);
  OutString(rp[2],0,"",false);
  OutString(rp[125],0,"",false);
  OutString(rp[3],0,"",false);
  OutString(rp[4],0,"",false);
  OutString(rp[5],0,"",false);
  OutString(rp[6],0,"",false);
  OutString(rp[7],0,totamount,false);
  OutString(rp[8],0,totdep,false);
  OutString(rp[9],0,"",false);
  OutString(rp[10],0,"",false);
  OutString(rp[11],0,"",false);
  OutString(rp[12],0,"",false);
  OutString(rp[13],0,"",false);
  OutString(rp[14],0,"",false);
  OutString(rp[15],0,totmonth,true);
  OutString(rp[16],0,totbal,true);
  OutString(rp[17],0,totalbuyout,true);
  EndFormat;
	
	endjob;

return;
end;