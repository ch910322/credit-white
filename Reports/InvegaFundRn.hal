external function string 255 GetCredManNr(Longint);
external function val GetFutureCredManBalance(record CredManVc,record CredManSetBlock,Date);
external function Boolean BuildCredManInfoMatrixOnSchedule(record CredManVc,record CredManSetBlock,var record SMVc);
external procedure BuildCredManInfoMatrix(record CredManVc,record CredManPayPlanVc,record CredManSetBlock,var record SMVc);
external inner function Integer GetCheck(string,string,LongInt,var string,var string,var string,var val,var Date,var Date);
external inner function LongInt DateDiff(Date,Date);
external inner function Boolean SetInSet2(string,string);
external inner procedure InvVat(Integer,Integer,Integer,Integer,string,val,var val,var val,var val,var val,var val);
external inner function roundmode SetRoundMOdeD(integer);
external inner function string 255 FindFirstContactPersonWithEmail(record CUVc);
external function Boolean IsNovitiCustomer;
external procedure BuildCredManPayPlanCust(record CredManVc,var record CredManPayPlanVc,record CredManSetBlock,Boolean,Boolean);
external inner procedure StripSpace(var string,string);

function string 255 GetCompanyType(record CUVc CUr,record InvegaReportBlock IRb)
begin
  record CClassVc CClassr;
  Longint pos;
  string 255 cls,res;
  
  if (nonblank(IRb.CompTypeClass)) then begin
    while (GetNextSubstring(CUr.Classification,pos,",",cls)) begin
      CClassr.Code = cls;
      if (ReadFirstMain(CClassr,1,true)) then begin
        if (CClassr.CType==IRb.CompTypeClass) then begin
          res = CClassr.Comment;
          goto LGetCompanyType;
        end;
      end;
    end;
  end;

LGetCompanyType:;
  GetCompanyType = res;
  return;
end;

function string 255 GetCompanyEVKRCode(record CUVc CUr,record InvegaReportBlock IRb)
begin
  record CClassVc CClassr;
  Longint pos;
  string 255 cls,res;
  
  if (nonblank(IRb.EVKRClassType)) then begin
    while (GetNextSubstring(CUr.Classification,pos,",",cls)) begin
      CClassr.Code = cls;
      if (ReadFirstMain(CClassr,1,true)) then begin
        if (CClassr.CType==IRb.EVKRClassType) then begin
          res = CClassr.Comment;
          goto LGetCompanyEVKRCode;
        end;
      end;
    end;
  end;

LGetCompanyEVKRCode:;
  GetCompanyEVKRCode = res;
  return;
end;

global
function val FindInvoicePaidAmount_OP(LongInt VISerNr,LongInt TransNr)
begin
  val res;
  record OPVc OPr;
  row OPVc OPrw;
  Integer i,rwcnt;
  Integer chktyp;
  string 255 tstr;
  Date td,regdate;
  val chkamount;

  OPr.SerNr = TransNr;
  if (ReadFirstMain(OPr,1,true)) then begin
    rwcnt = MatRowCnt(OPr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(OPr,i,OPrw);
      if (OPrw.VISerNr==VISerNr) then begin
        chktyp = GetCheck(OPr.PayMode,OPrw.PayMode,OPrw.ChequeNr,tstr,tstr,tstr,chkamount,td,regdate);
        switch (chktyp) begin
          case 0:
            res = res + OPrw.PInvVal;
          case 2:
            res = res + chkamount;
        end;
      end;
    end;
  end;
  FindInvoicePaidAmount_OP = res;
  return;
end;

function Boolean PaymentIsRecons(record OPrsVc OPrsr,record CredManVc CredManr,val paidval)
begin
  Boolean TrHs,res;
  record CredHistVc CredHistr;
  
  TrHs = true;
  CredHistr.CredManNr = CredManr.SerNr;
  while (LoopKey("CredManTypeDate",CredHistr,1,TrHs)) begin
    if (CredHistr.CredManNr!=CredManr.SerNr) then begin
      TrHs = false;
    end else begin
      if (CredHistr.TransDate<CredManr.FirstInvDate) then begin
        if (CredHistr.MainRecord==1 and CredHistr.InvSum==paidval) then begin
          res = true;
          TrHs = false;
        end;
      end else begin
        TrHs = false;
      end;
    end;
  end;

  PaymentIsRecons = res;
  return;
end;

function string 255 GetCredManTransactionList(record CredManVc CredManr,Date sd,Date ed,var val paid,var val princ,var val interest,var val overdues,Boolean invegaf)
begin
  string 255 res;
  record CredHistVc CredHistr,tCredHistr;
  Boolean TrHs;
  vector string 255 vDates;
  record OPrsVc OPrsr;
  array string 255 aDates;
  Integer i;
  val vatprc,vatval,vatexclprc,vatinclprc,rowtax,tmpval;
  record IVVc IVr;
  row IVVc IVrw;
  Integer rwcnt;
  string 255 vatcode;
  record ARPayHistVc ARPayHistr;
  record IPVc IPr;

  paid = 0;
  princ = 0;
  interest = 0;
  overdues = 0;
  TrHs = true;


  CredHistr.CredManNr = CredManr.SerNr;
  CredHistr.TransDate = sd;
  while (LoopKey("CredManTypeDate",CredHistr,2,TrHs)) begin
    if (CredHistr.CredManNr!=CredManr.SerNr or CredHistr.TransDate>ed) then begin
      TrHs = false;
    end else begin
      if (CredHistr.RecordType==1 or CredHistr.RecordType==2) then begin
        if (CredHistr.RecordType==1) then begin
          vDates[DateToString(CredHistr.TransDate,"YYYY-MM-DD")] = true;
        end;
        tCredHistr.SerNr = CredHistr.PreviousNr;
        if (ReadFirstMain(tCredHistr,1,true)) then begin
          IVr.SerNr = tCredHistr.RecordNr;
          if (ReadFirstMain(IVr,1,true)) then begin
            rwcnt = MatRowCnt(IVr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(IVr,i,IVrw);
              if (IVrw.stp==kInvoiceRowTypeNormal) then begin
                if (IVrw.CredHistNr==tCredHistr.SerNr) then begin
                  vatcode = IVrw.VATCode;
                  i = rwcnt;
                end;
              end else begin
                if (IVrw.stp==kInvoiceRowTypePrepayment) then begin
                  ARPayHistr.CUPNr = IVrw.CUPNr;  
                  ARPayHistr.FileName = "IPVc";  
                  if (ReadFirstMain(ARPayHistr,2,true)) then begin
                    IPr.SerNr = ARPayHistr.SerNr;
                    if (ReadFirstMain(IPr,1,true)) then begin
                      if (DateInRange(IPr.TransDate,sd,ed)) then begin
                        vDates[DateToString(IPr.TransDate,"YYYY-MM-DD")] = true;
                      end;
                    end;
                  end;
                end;        
              end;
            end;
          end;

          switch (tCredHistr.ChargeType) begin
            case 5:
              princ = princ + CredHistr.Sum;
            case 6:
              InvVat(1,1,IVr.NoTAXonVAT,IVr.ExportFlag,vatcode,CredHistr.Sum,vatprc,vatval,vatexclprc,vatinclprc,rowtax);
              interest = interest + (CredHistr.Sum-vatval);
            case 9:
              overdues = overdues + CredHistr.Sum;
          end;
        end;
      end;
    end;
  end;

  if (CredManr.VINr>0) then begin
    OPrsr.TransType = kOPrsTransTypePayment;
    OPrsr.VINr = CredManr.VINr;
    TrHs = true;
    while (LoopKey("VIKey",OPrsr,2,TrHs)) begin
      if (OPrsr.VINr!=CredManr.VINr or OPrsr.TransType!=kOPrsTransTypePayment) then begin
        TrHs = false;
      end else begin
        if (invegaf) then begin
          if (DateInRange(OPrsr.TransDate,sd,ed)) then begin
            vDates[DateToString(OPrsr.TransDate,"YYYY-MM-DD")] = true;
            paid = paid + FindInvoicePaidAmount_OP(OPrsr.VINr,OPrsr.TransNr);
          end;
        end else begin
          if (OPrsr.TransDate<=ed) then begin
            tmpval = FindInvoicePaidAmount_OP(OPrsr.VINr,OPrsr.TransNr);
            if (PaymentIsRecons(OPrsr,CredManr,tmpval)==false) then begin
              vDates[DateToString(OPrsr.TransDate,"YYYY-MM-DD")] = true;
            end;
            paid = paid + tmpval;
          end;          
        end;
      end;
    end;
  end;

  GetVectorTags(vDates,aDates);
  SortArray(aDates,M4Date);
  for (i=0;i<aDates.length;i=i+1) begin
    if (i>0) then begin
      res = res & ", ";
    end;
    res = res & aDates[i];
  end;

  GetCredManTransactionList = res;
  return;
end;

function Integer GetLateDaysInPeriod(record CredHistVc CredHistr,Date sd,Date ed,var val dueamount)
begin
  Boolean TrHs;
  record CredHistVc CredPayr;
  val paysum;
  Integer res;
  val vatprc,vatval,vatexclprc,vatinclprc,rowtax;
  record IVVc IVr;
  row IVVc IVrw;
  Integer i,rwcnt;
  string 255 vatcode;

  paysum = CredHistr.Sum;
  IVr.SerNr = CredHistr.RecordNr;
  if (ReadFirstMain(IVr,1,true)) then begin
    rwcnt = MatRowCnt(IVr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVr,i,IVrw);
      if (IVrw.CredHistNr==CredHistr.SerNr) then begin
        InvVat(1,1,IVr.NoTAXonVAT,IVr.ExportFlag,IVrw.VATCode,CredHistr.Sum,vatprc,vatval,vatexclprc,vatinclprc,rowtax);
        paysum = paysum - vatval;
        vatcode = IVrw.VATCode;
        i = rwcnt;
      end;
    end;
  end;

  TrHs = true;
  CredPayr.PreviousNr = CredHistr.SerNr;
  while (LoopKey("PreviousNr",CredPayr,1,TrHs)) begin
    if (CredPayr.PreviousNr!=CredHistr.SerNr) then begin
      TrHs = false;
    end else begin
      if (CredPayr.TransDate<=ed) then begin
        InvVat(1,1,IVr.NoTAXonVAT,IVr.ExportFlag,vatcode,CredPayr.Sum,vatprc,vatval,vatexclprc,vatinclprc,rowtax);
        paysum = paysum - (CredPayr.Sum - vatval);
      end;
    end;
  end;
  if (paysum>0) then begin
    res = DateDiff(ed,CredHistr.PayDate);
  end;
  dueamount = dueamount + paysum;

  GetLateDaysInPeriod = res;
  return;
end;

function Integer MAX(Longint v1,Longint v2)
begin
  Longint res;

  if (v1>v2) then begin
    res = v1;
  end else begin
    res = v2;
  end;

  MAX = res;
  return;
end;

procedure GetCredManLateAmounts(record CredManVc CredManr,Date sd,Date ed,Integer chargetype,var Longint maxlatedays,var val dueamount)
begin
  string 255 res;
  record CredHistVc CredHistr;
  Boolean TrHs;
  Longint latedays;

  dueamount = 0;
  maxlatedays = 0;
  TrHs = true;
  CredHistr.CredManNr = CredManr.SerNr;
  CredHistr.ChargeType = chargetype;
  while (LoopKey("CredManChargeType",CredHistr,2,TrHs)) begin
    if (CredHistr.CredManNr!=CredManr.SerNr or CredHistr.ChargeType!=chargetype) then begin
      TrHs = false;
    end else begin
      if (CredHistr.RecordType==0 and CredHistr.PayDate<ed) then begin
        latedays = GetLateDaysInPeriod(CredHistr,sd,ed,dueamount);
        maxlatedays = MAX(maxlatedays,latedays);
      end;
    end;
  end;

  return;
end;

function string 255 GetCustomerEmail(record CUVc CUr)
begin
  string 255 res;
  
  res = CUr.eMail;
  if (blank(res)) then begin
    res = FindFirstContactPersonWithEmail(CUr);
  end;


  GetCustomerEmail = res;
  return;
end;

function string 255 FindFirstContactPersonWithPhone(record CUVc CUr)
begin
  record ContactRelVc CRr;
  record CUVc ContactCUr;
  string 255 res;
  Boolean Trhs;

  TrHs = true;
  CRr.CustCode = CUr.Code;
  while (LoopMain(CRr,1,TrHs)) begin
    if (CRr.CustCode!=CUr.Code) then begin
      TrHs = false;
    end else begin
      if (CRr.Invalid==0) then begin
        ContactCUr.Code = CRr.ContactCode;
        if (ReadFirstMain(ContactCUr,1,true)) then begin
          if (nonblank(ContactCUr.Phone)) then begin
            res = ContactCUr.Phone;
            goto LFindFirstContactPersonWithPhone;
          end else begin
            if (nonblank(ContactCUr.Mobile)) then begin
              res = ContactCUr.Mobile;
              goto LFindFirstContactPersonWithPhone;
            end;
          end;
        end;
      end;
    end;
  end;

LFindFirstContactPersonWithPhone:;
  FindFirstContactPersonWithPhone = res;
  return;
end;

function string 255 GetCustomerPhone(record CUVc CUr)
begin
  string 255 res;
  
  res = CUr.Phone;
  if (blank(res)) then begin
    res = CUr.Mobile;
  end;
  if (blank(res)) then begin
    res = FindFirstContactPersonWithPhone(CUr);
  end;


  GetCustomerPhone = res;
  return;
end;

procedure DisplayInvegaReport(record RcVc RepSpec)
begin
  record InvegaReportBlock IRb;
  record CredManVc CredManr;
  record CUVc CUr;
  Boolean TrHs,testf;
  record CredManSetBlock CredManSetb;
  array Integer p;
  Integer i,num;
  Longint principlelatedays,interestlatedays,overdueslatedays;
  val principlelateamount,interestlateamount,overdueslateamount;
  val princ,interest,overdues,startbal,endbal,paidval,rate;
  string 255 translist,overduesign;
  Longint cnt;
  Boolean novitif;
  vector string 255 vClass;
  record CredManTypeVc CMTr;
  string 255 tmp;
  Longint pos;


  num = 0;
  for (i=0;i<26;i=i+1) begin
    p[i] = num;
    num = num + 50;
  end;
  cnt = 1;

  novitif = IsNovitiCustomer;

  StartFormat(15);
  OutString(0,0,1,false);
  OutString(p[1],0,2,false);
  OutString(p[2],0,3,false);
  OutString(p[3],0,4,false);
  OutString(p[4],0,5,false);
  OutString(p[5],0,6,false);
  OutString(p[6],0,7,false);
  OutString(p[7],0,8,false);
  OutString(p[8],0,9,false);
  OutString(p[9],0,10,false);
  OutString(p[10],0,11,false);
  OutString(p[11],0,12,false);
  OutString(p[12],0,13,false);
  OutString(p[13],0,14,false);
  OutString(p[14],0,15,false);
  OutString(p[15],0,16,false);
  OutString(p[16],0,17,false);
  OutString(p[17],0,18,false);
  OutString(p[18],0,19,false);
  OutString(p[19],0,20,false);
  OutString(p[20],0,21,false);
  OutString(p[21],0,22,false);
  OutString(p[22],0,23,false);
  OutString(p[23],0,24,false);
  OutString(p[24],0,25,false);
  OutString(p[25],0,26,false);

  EndFormat;

  while (LoopMain(CMTr,1,true)) begin
    vClass[CMTr.Code] = CMTr.Classifications;
  end;

  BlockLoad(IRb);
  BlockLoad(CredManSetb);
  while (LoopMain(CredManr,1,true)) begin
    testf = true;
    if (nonblank(RepSpec.f1) and SetInSet(CredManr.Type,RepSpec.f1)==false) then begin
      testf = false;
    end;
    if (nonblank(RepSpec.f2) and RepSpec.f2!=CredManr.CustCode) then begin
      testf = false;
    end;
    if (nonblank(RepSpec.f3) and SetInSet2(RepSpec.f3,CredManr.Classifications)) then begin
      testf = false;
    end;
    if (nonblank(RepSpec.f4) and RepSpec.f4!=CredManr.SalesMan) then begin
      testf = false;
    end;
    if (nonblank(RepSpec.f5) and SetInSet2(RepSpec.f5,vClass[CredManr.Type])) then begin
      testf = false;
    end;
    
    if (testf) then begin
      CUr.Code = CredManr.CustCode;
      rate = CredManr.IntRate;
      if (CredManr.AnnualRate==0) then begin
        rate = rate * 12;
      end;
      startbal = GetFutureCredManBalance(CredManr,CredManSetb,RepSpec.sStartDate);
      endbal = GetFutureCredManBalance(CredManr,CredManSetb,RepSpec.sEndDate);
      translist = GetCredManTransactionList(CredManr,RepSpec.sStartDate,RepSpec.sEndDate,paidval,princ,interest,overdues,true);
      GetCredManLateAmounts(CredManr,RepSpec.sStartDate,RepSpec.sEndDate,5,principlelatedays,principlelateamount);
      GetCredManLateAmounts(CredManr,RepSpec.sStartDate,RepSpec.sEndDate,6,interestlatedays,interestlateamount);
      GetCredManLateAmounts(CredManr,RepSpec.sStartDate,RepSpec.sEndDate,9,overdueslatedays,overdueslateamount);
      
      overduesign = "Ne";
      if (principlelatedays>90 or interestlatedays>90 or overdueslatedays>90 or CUr.OnHoldFlag==1) then begin
        overduesign = "Taip";
      end;

      ReadFirstMain(CUr,1,true);
      StartFormat(15);
      OutString(0,0,cnt,false);
      OutString(p[1],0,CredManr.Addr0,false);
      OutString(p[2],0,CUr.RegNr1,false);
      if (novitif) then begin
        OutString(p[3],0,GetCustomerEmail(CUr),false);
      end else begin
        OutString(p[3],0,CUr.eMail,false);
      end;
      if (novitif) then begin
        OutString(p[4],0,"\"" & GetCustomerPhone(CUr) & "\"",false);
      end else begin
        OutString(p[4],0,"\"" & CUr.Phone & "\"",false);
      end;
      OutString(p[5],0,GetCompanyType(CUr,IRb),false);
      OutString(p[6],0,GetCompanyEVKRCode(CUr,IRb),false);
      OutString(p[7],0,CUr.InvAddr3,false);
      if (novitif) then begin
        OutString(p[8],0,DateToString(CredManr.startDate,"YYYY-MM-DD"),false);
      end else begin
        OutString(p[8],0,DateToString(CredManr.TransDate,"YYYY-MM-DD"),false);
      end;
      OutString(p[9],0,GetCredManNr(CredManr.SerNr),false);
      OutString(p[10],0,CredManr.InvSum4,false);
      OutVal(p[11],0,Round(rate,SetRoundModeD(2)),M4Val,false);
      OutString(p[12],0,DateToString(CredManr.endDate,"YYYY-MM-DD"),false);
      OutString(p[13],0,startbal,false);
      pos = 0;
      if (GetNextSubString(translist,pos,",",tmp)) begin
        OutString(p[14],0,tmp,false);
      end;
      OutString(p[15],0,paidval,false);
      OutString(p[16],0,princ,false);
      OutString(p[17],0,interest,false);
      OutString(p[18],0,overdues,false);
      OutString(p[19],0,endbal,false);
      OutString(p[20],0,principlelatedays,false);
      OutString(p[21],0,interestlatedays,false);
      OutString(p[22],0,interestlateamount,false);
      OutString(p[23],0,overdueslateamount,false);
      OutString(p[24],0,"",false);
      OutString(p[25],0,overduesign,false);

      EndFormat;
      cnt = cnt + 1;
      if (GetNextSubString(translist,pos,",",tmp)) begin
        StartFormat(15);       
        for (i=0;i<14;i=i+1) begin  
          OutString(p[i],0,"",false);
        end;
        StripSpace(tmp,tmp);
        OutString(p[14],0,tmp,false);
        EndFormat;
      end;
    end;
  end; 

  return;
end;

function string 255 GetCurrencyCode(record CredManVc CredManr)
begin
  string 255 res;
  record CUVc CUr;
  record BaseCurBlock BCb;
  
  res = CredManr.CurncyCode;
  if (blank(res)) then begin
    CUr.Code = CredManr.CustCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      res = CUr.CurncyCode;
    end;
  end;
  if (blank(res)) then begin
    BlockLoad(BCb);
    res = BCb.BaseCur1;
  end;

  GetCurrencyCode = res;
  return;
end;

procedure GetPeriodBalances(record CredManVc CredManr,record CredManSetBlock CredManSetb,Date sd,Date ed,var val unpaidstartbal,var val periodbal,var val paidstartbal,var val paidperiodbal)
begin
	val res;
	record CredManPayPlanVc CredManPayr;
	row CredManPayPlanVc CredManPayrw;
	Integer rwcnt,i;
  val open;
  
	res = blankval;
	BuildCredManPayPlanCust(CredManr,CredManPayr,CredManSetb,true,false);
	rwcnt = MatRowCnt(CredManPayr);
	for (i=0;i<rwcnt;i=i+1) begin
		MatRowGet(CredManPayr,i,CredManPayrw);
    if (CredManPayrw.PlanType==5) then begin
      if (CredManPayrw.TransDate<=sd) then begin
        unpaidstartbal = unpaidstartbal + CredManPayrw.OpenAmount;
        paidstartbal = paidstartbal + (CredManPayrw.Sum-CredManPayrw.OpenAmount);
      end;
      if (DateInRange(CredManPayrw.TransDate,sd,ed)) then begin
        periodbal = periodbal + CredManPayrw.Sum;
        paidperiodbal = paidperiodbal + (CredManPayrw.Sum-CredManPayrw.OpenAmount);
      end;
    end;
  end;
  
  

  return;
end;

procedure DisplayGarfondasReport(record RcVc RepSpec)
begin
  record InvegaReportBlock IRb;
  record CredManVc CredManr;
  record CUVc CUr;
  Boolean TrHs,testf;
  record CredManSetBlock CredManSetb;
  array Integer p;
  Integer i,num;
  Longint principlelatedays,interestlatedays,overdueslatedays,pos;
  val principlelateamount,interestlateamount,overdueslateamount;
  val princ,interest,overdues,startbal,endbal,paidval,rate;
  string 255 translist,overduesign,tmp;
  Longint cnt;
  Boolean novitif;
  vector string 255 vClass;
  record CredManTypeVc CMTr;
  Boolean checkf;
  Integer transcnt;
  val totinterest,totprinciplelateamount,totinterestlateamount,totendbal,totpaid,totsum;
  val unpaidstartbal,periodbal,paidstartbal,paidperiodbal,totunpaidstartbal,totperiodbal,totpaidstartbal,totpaidperiodbal;

  num = 0;
  for (i=0;i<26;i=i+1) begin
    p[i] = num;
    num = num + 50;
  end;
  cnt = 1;

  novitif = IsNovitiCustomer;

  StartFormat(15);
  OutString(0,0,1,false);
  OutString(p[1],0,2,false);
  OutString(p[2],0,3,false);
  OutString(p[3],0,4,false);
  OutString(p[4],0,5,false);
  OutString(p[5],0,6,false);
  OutString(p[6],0,7,false);
  OutString(p[7],0,8,false);
  OutString(p[8],0,9,false);
  OutString(p[9],0,10,false);
  OutString(p[10],0,11,false);
  OutString(p[11],0,12,false);
  OutString(p[12],0,13,false);
  OutString(p[13],0,14,false);
  OutString(p[14],0,15,false);
//  OutString(p[15],0,16,false);
  OutString(p[16],0,17,false);
  OutString(p[17],0,18,false);
  OutString(p[18],0,19,false);
  OutString(p[19],0,20,false);
  OutString(p[20],0,21,false);
  OutString(p[21],0,22,false);
  OutString(p[22],0,23,false);
  OutString(p[23],0,24,false);
  OutString(p[24],0,25,false);

  EndFormat;

  while (LoopMain(CMTr,1,true)) begin
    vClass[CMTr.Code] = CMTr.Classifications;
  end;

  BlockLoad(IRb);
  BlockLoad(CredManSetb);
  while (LoopMain(CredManr,1,true)) begin
    testf = true;
    if (nonblank(RepSpec.f1) and SetInSet(CredManr.Type,RepSpec.f1)==false) then begin
      testf = false;
    end;
    if (nonblank(RepSpec.f2) and RepSpec.f2!=CredManr.CustCode) then begin
      testf = false;
    end;
    if (nonblank(RepSpec.f3) and SetInSet2(RepSpec.f3,CredManr.Classifications)) then begin
      testf = false;
    end;
    if (nonblank(RepSpec.f4) and RepSpec.f4!=CredManr.SalesMan) then begin
      testf = false;
    end;
    if (nonblank(RepSpec.f5) and SetInSet2(RepSpec.f5,vClass[CredManr.Type])) then begin
      testf = false;
    end;
    if (CredManr.TransDate>RepSpec.sEndDate) then begin
      testf = false;
    end;
    
    if (testf) then begin
      CUr.Code = CredManr.CustCode;
      rate = CredManr.IntRate;
      if (CredManr.AnnualRate==0) then begin
        rate = rate * 12;
      end;
      startbal = GetFutureCredManBalance(CredManr,CredManSetb,RepSpec.sStartDate);
      endbal = GetFutureCredManBalance(CredManr,CredManSetb,RepSpec.sEndDate);
      translist = GetCredManTransactionList(CredManr,RepSpec.sStartDate,RepSpec.sEndDate,paidval,princ,interest,overdues,false);
      GetCredManLateAmounts(CredManr,RepSpec.sStartDate,RepSpec.sEndDate,5,principlelatedays,principlelateamount);
      unpaidstartbal = 0;
      periodbal = 0;
      paidstartbal = 0;
      paidperiodbal = 0;
      GetCredManLateAmounts(CredManr,RepSpec.sStartDate,RepSpec.sEndDate,6,interestlatedays,interestlateamount);
      GetCredManLateAmounts(CredManr,RepSpec.sStartDate,RepSpec.sEndDate,9,overdueslatedays,overdueslateamount);
      GetPeriodBalances(CredManr,CredManSetb,RepSpec.sStartDate,RepSpec.sEndDate,unpaidstartbal,periodbal,paidstartbal,paidperiodbal);

      overduesign = "Ne";
      if (principlelatedays>90 or interestlatedays>90 or overdueslatedays>90 or CUr.OnHoldFlag==1) then begin
        overduesign = "Taip";
      end;

      ReadFirstMain(CUr,1,true);
      StartFormat(15);
      OutString(0,0,cnt,false);
      OutString(p[1],0,CredManr.Addr0,false);
      OutString(p[2],0,CUr.RegNr1,false);
      OutString(p[3],0,GetCredManNr(CredManr.SerNr),false);
      if (novitif) then begin
        OutString(p[4],0,DateToString(CredManr.startDate,"YYYY-MM-DD"),false);
      end else begin
        OutString(p[4],0,DateToString(CredManr.TransDate,"YYYY-MM-DD"),false);
      end;
      OutString(p[5],0,DateToString(AddDay(CredManr.startDate,180),"YYYY-MM-DD"),false);
      OutString(p[6],0,DateToString(CredManr.endDate,"YYYY-MM-DD"),false);//GetCompanyEVKRCode(CUr,IRb),false);
      OutString(p[7],0,GetCurrencyCode(CredManr),false);
      OutString(p[8],0,CredManr.InvSum4,false);
      totsum = totsum + CredManr.InvSum4;
      OutString(p[9],0,paidval,false);
      totpaid = totpaid + paidval;
      checkf = false;
      pos = 0;
      if (GetNextSubString(translist,pos,",",tmp)) begin
        OutString(p[10],0,tmp,false);
      end;
//what about these 4?
      OutString(p[11],0,unpaidstartbal,false);
      OutString(p[12],0,periodbal,false);
      OutString(p[13],0,paidstartbal,false);
      OutString(p[14],0,paidperiodbal,false);
      totunpaidstartbal = totunpaidstartbal + unpaidstartbal;
      totperiodbal = totperiodbal + periodbal;
      totpaidstartbal = totpaidstartbal + paidstartbal;
      totpaidperiodbal = totpaidperiodbal + paidperiodbal;

      OutString(p[16],0,endbal,false);
      totendbal = totendbal + endbal;
      OutVal(p[17],0,Round(rate,SetRoundModeD(2)),M4Val,false);
      OutString(p[18],0,interest,false);
      OutString(p[19],0,principlelateamount,false);
      OutString(p[20],0,principlelatedays,false);
      OutString(p[21],0,interestlateamount,false);
      OutString(p[22],0,interestlatedays,false);
      OutString(p[23],0,overduesign,false);
      OutString(p[24],0,"",false);
      OutString(p[25],0,"",false);
      totinterest = totinterest + interest;
      totprinciplelateamount = totprinciplelateamount + principlelateamount;
      totinterestlateamount = totinterestlateamount + interestlateamount;
      EndFormat;
      cnt = cnt + 1;
      if (GetNextSubString(translist,pos,",",tmp)) begin
        StartFormat(15);       
        for (i=0;i<10;i=i+1) begin  
          OutString(p[i],0,"",false);
        end;
        StripSpace(tmp,tmp);
        OutString(p[10],0,tmp,false);
        EndFormat;
      end;
    end;
  end; 

  StartFormat(15);//9; 10; 12; 13; 14; 15; 17; 19; 20; 22;
  OutString(0,0,"",false);
  OutString(p[1],0,"",false);
  OutString(p[2],0,"",false);
  OutString(p[3],0,"",false);
  OutString(p[4],0,"",false);
  OutString(p[5],0,"",false);
  OutString(p[6],0,"",false);
  OutString(p[7],0,"",false);
  OutString(p[8],0,totsum,false);
  OutString(p[9],0,totpaid,false);
  OutString(p[10],0,"",false);
  OutString(p[11],0,totunpaidstartbal,false);
  OutString(p[12],0,totperiodbal,false);
  OutString(p[13],0,totpaidstartbal,false);
  OutString(p[14],0,totpaidperiodbal,false);
  OutString(p[16],0,totendbal,false);
  OutString(p[17],0,"",false);
  OutString(p[18],0,totinterest,false);
  OutString(p[19],0,totprinciplelateamount,false);
  OutString(p[20],0,"",false);
  OutString(p[21],0,totinterestlateamount,false);
  EndFormat;


  return;
end;

global
procedure InvegaFundRn(record RcVc RepSpec)
begin

  StartReportJob(UsetStr(200266));

  EndHeader;

  if (RepSpec.ArtMode==0) then begin
    DisplayInvegaReport(RepSpec);
  end else begin
    DisplayGarfondasReport(RepSpec);
  end;

  EndJob;

  return;
end;