//<halrule>server-only</halrule>
external  procedure CredManSetDatesCust(var record CredManVc,Boolean);
external updating procedure RecreateAgreementSchedule2(record CredManVc,Boolean);

global
function LongInt CredHistVcRecordInIndex(record CredHistVc CredHistr,string indexname)
begin
  LongInt res;
  
  res = 1;
  if (indexname=="CredManTransDate") then begin 
    res = 0; 
    if (CredHistr.MainRecord==1) then begin 
      res = 1;
    end;
  end;
  CredHistVcRecordInIndex = res;
  return;
end; 

global
updating procedure CreatePauseRecord(Longint sernr,Date td,Integer months,Integer okflag)
begin
  record CredManChangeVc Changer;
  
  RecordNew(Changer);
  Changer.SerNr = NextSerNr("CredManChangeVc",td,-1,false,"");
  Changer.TransDate = td;
  Changer.PauseMonths = months;
  Changer.OKFlag = okflag;
  Changer.CredManNr = sernr;
  RecordStore(Changer,true);

  return;
end;

global
updating procedure CreateProlongRecord(Longint sernr,Date td,Integer months,Integer okflag)
begin
  record CredManChangeVc Changer;
  
  RecordNew(Changer);
  Changer.SerNr = NextSerNr("CredManChangeVc",td,-1,false,"");
  Changer.TransDate = td;
  Changer.ProlongMonths = months;
  Changer.OKFlag = okflag;
  Changer.CredManNr = sernr;
  RecordStore(Changer,true);

  return;
end;

global
updating procedure ApprovePauseRecord(Longint sernr,Date td,Date nd,Integer months)
begin
  record CredManChangeVc Changer,oldChanger;
  Boolean TrHs;

  TrHs = true;
  Changer.CredManNr = sernr;
  Changer.TransDate = td;
  while (LoopKey("CredManDate",Changer,2,TrHs)) begin
    if (Changer.CredManNr!=sernr or Changer.TransDate!=td) then begin
      TrHs = false;
    end else begin
      if (Changer.PauseMonths==months) then begin
        RecordCopy(oldChanger,Changer);
        Changer.OKFlag = 1;
        if (nonblank(nd) and Changer.TransDate<nd) then begin
          Changer.TransDate = nd;
        end;
        RecordUpdate(oldChanger,Changer,false);
      end;
    end;
  end;

  return;
end;

global
updating procedure ApproveProlongRecord(Longint sernr,Date td,Date nd,Integer months)
begin
  record CredManChangeVc Changer,oldChanger;
  Boolean TrHs;

  TrHs = true;
  Changer.CredManNr = sernr;
  Changer.TransDate = td;
  while (LoopKey("CredManDate",Changer,2,TrHs)) begin
    if (Changer.CredManNr!=sernr or Changer.TransDate!=td) then begin
      TrHs = false;
    end else begin
      if (Changer.ProlongMonths==months) then begin
        RecordCopy(oldChanger,Changer);
        Changer.OKFlag = 1;
        if (nonblank(nd) and Changer.TransDate<nd) then begin
          Changer.TransDate = nd;
        end;
        RecordUpdate(oldChanger,Changer,false);
      end;
    end;
  end;

  return;
end;

global
function Integer GetProlongMonths(record CredManVc CredManr)
begin
  record CredManChangeVc Changer;
  Boolean TrHs;
  Integer res;
  
  Changer.CredManNr = CredManr.SerNr;
  TrHs = true;
  while (LoopKey("CredManDate",Changer,1,TrHs)) begin
    if (CredManr.SerNr!=Changer.CredManNr) then begin
      TrHs = false;
    end else begin
      if (Changer.OKFlag==1) then begin
        if (Changer.ProlongMonths>0) then begin
          res = res + Changer.ProlongMonths;
        end;
      end;
    end;
  end;

  GetProlongMonths = res;
  return;
end;

function Date GetInvoicePaidDate(Longint histnr)
begin
  record CredHistVc CredHistr;
  Boolean TrHs;
  Date res;
  
  TrHs = true;
  CredHistr.PreviousNr = histnr;
  while (LoopKey("PreviousNr",CredHistr,1,TrHs)) begin
    if (CredHistr.PreviousNr!=histnr) then begin
      TrHs = false;
    end else begin
      if (CredHistr.RecordType!=0) then begin
        if (CredHistr.TransDate>res) then begin
          res = CredHistr.TransDate;
        end;
      end;
    end;
  end;

  GetInvoicePaidDate = res;
  return;
end;

updating procedure FinishProlongSession(Longint sernr,Longint histnr)
begin
  record ProlongSessionVc PSr,oldPSr;
  record CredManVc CredManr,oldCredManr;
  record AgreementDocVc ADr;
  Date ndate;
  
  PSr.CredManNr = sernr;
  PSr.PaidFlag = 0;
  if (ReadFirstKey("CredManPaid",PSr,2,true)) then begin
    if (PSr.ProlongWhenPaid==1) then begin
      CredManr.SerNr = sernr;
      if (ReadFirstMain(CredManr,1,true)) then begin
        ndate = GetInvoicePaidDate(histnr);
        RecordCopy(oldCredManr,CredManr);
        if (PSr.PauseMonths>0) then begin
          ApprovePauseRecord(CredManr.SerNr,PSr.PauseDate,ndate,PSr.PauseMonths);
        end;
        if (PSr.ProlongMonths>0) then begin
          ApproveProlongRecord(CredManr.SerNr,PSr.ProlongDate,ndate,PSr.ProlongMonths);
        end;
        CredManSetDatesCust(CredManr,false);
        if (RecordUpdate(oldCredManr,CredManr,true)==0) then begin
          if (PSr.RecalcSchedule==1) then begin
            RecreateAgreementSchedule2(CredManr,true);
          end;
        end;
      end;
    end;
    RecordCopy(oldPSr,PSr);
    PSr.PaidFlag = 1;
    RecordUpdate(oldPSr,PSr,true);
  end;

  return;
end;

updating procedure UpdateInvoicedCredHist(Longint prevnr)
begin
  record CredHistVc CredHistr,pCredHistr,oldCredHistr,CredHist2r;
  Boolean TrHs;
  val sum,due;
  Integer pdf;
  record ARVc ARr;

  CredHistr.SerNr = prevnr;
  if (ReadFirstMain(CredHistr,1,true)) then begin
    CredHist2r.MainRecord = 1;
    CredHist2r.RecordNr = CredHistr.RecordNr;
    CredHist2r.RecordType = 0;
    if (ReadFirstKey("MainRecord",CredHist2r,3,true)) then begin
      ARr.InvoiceNr = CredHist2r.RecordNr;
      if (ReadFirstMain(ARr,1,true)) begin
        due = ARr.RVal;
      end;
      RecordCopy(oldCredHistr,CredHist2r);
      CredHist2r.PaidSum = CredHist2r.InvSum - ARr.RVal;
      if (ARr.RVal==0) then begin
        CredHist2r.PaidFlag = 1;
      end else begin
        CredHist2r.PaidFlag = 0;
      end;
      RecordUpdate(oldCredHistr,CredHist2r,true);
    end;

  end;
/*
    TrHs = true;
    pCredHistr.PreviousNr = prevnr;
    while (LoopKey("PreviousNr",pCredHistr,1,TrHs)) begin
      if (pCredHistr.PreviousNr!=prevnr) then begin
        TrHs = false;
      end else begin
        sum = sum + pCredHistr.Sum;
      end;
    end;
    if (CredHistr.Sum==sum) then begin
      pdf = 1;
    end;
    RecordCopy(oldCredHistr,CredHistr);
    CredHistr.PaidFlag = pdf;
    CredHistr.PaidSum = sum;
    RecordUpdate(oldCredHistr,CredHistr,true);
*/


  return;
end;

global
updating function LongInt CredHistVcRecordSaveAfter(var record CredHistVc CredHistr,record CredHistVc CredHist2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record CredManVc CredManr,oldCredManr;

  res = 0;

  //if this is payment then we have to check invoice records and if it is fully paid
  if (CredHistr.RecordType==1 or CredHistr.RecordType==2 or CredHistr.RecordType==3) then begin
    UpdateInvoicedCredHist(CredHistr.PreviousNr);
  end;
  if (CredHistr.PaidFlag==1) then begin
    CredManr.SerNr = CredHistr.CredManNr;
    if (ReadFirstMain(CredManr,1,true)) then begin
      if (CredManr.startDate==CredHistr.TransDate) then begin
        RecordCopy(oldCredManr,CredManr);
        CredManr.Status = 3;
        RecordUpdate(oldCredManr,CredManr,true);
      end;
    end;
  end;

  CredHistVcRecordSaveAfter = res;
  return;
end;

global
updating function LongInt CredHistVcRecordUpdateAfter(var record CredHistVc CredHistr,record CredHistVc CredHist2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record CredManVc CredManr,oldCredManr;

  res = 0;
  
  if (CredHistr.PaidFlag==1 and CredHist2r.PaidFlag==0) then begin
    if (CredHist2r.ChargeType==14) then begin//prolong session
      FinishProlongSession(CredHistr.CredManNr,CredHistr.SerNr);
    end;
    CredManr.SerNr = CredHistr.CredManNr;
    if (ReadFirstMain(CredManr,1,true)) then begin
      if (CredManr.startDate==CredHistr.TransDate) then begin
        RecordCopy(oldCredManr,CredManr);
        CredManr.Status = 3;
        RecordUpdate(oldCredManr,CredManr,true);
      end;
    end;
  end;

  CredHistVcRecordUpdateAfter = res;
  return;
end;

global
updating function LongInt CredHistVcRecordRemoveAfter(var record CredHistVc CredHistr,record CredHistVc CredHist2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record ProlongSessionVc PSr;

  res = 0;

  //if this is payment then we have to update invoice history as well
  if (CredHistr.RecordType==1 or CredHistr.RecordType==2 or CredHistr.RecordType==3) then begin
    UpdateInvoicedCredHist(CredHistr.PreviousNr);
  end;
  if (CredHistr.ChargeType==14) then begin
    PSr.CredManNr = CredHistr.CredManNr;
    PSr.PaidFlag = 0;
    if (ReadFirstKey("CredManPaid",PSr,2,true)) then begin
      RecordRemove(PSr);
    end;
  end;

  CredHistVcRecordRemoveAfter = res;
  return;
end;