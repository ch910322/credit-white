//<halrule>server-only</halrule>
external updating procedure SplitLoanPaymentsInReceipt(record IPVc,Boolean);
external updating procedure UpdateFactoringInvoiceReceipt(record IPVc,Boolean);
external updating procedure UpdatePmtGrntReportReceipt(record IPVc,Boolean);
external updating procedure CheckCredManFinished2(record IPVc);
external procedure DistributeCredHistValues(var record IPVc,Integer);

global
updating function LongInt IPVcRecordUpdateAfter(var record IPVc IPr,record IPVc IP2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  logtext(0,"IPVcRecordUpdateAfter start");
  
  res = inner.IPVcRecordUpdateAfter(IPr,IP2r,stat,long4);

  if (IPr.OKFlag==1 and IP2r.OKFlag==0) then begin
    logtext(0,"IPVcRecordUpdateAfter start SplitLoanPaymentsInReceipt");
    SplitLoanPaymentsInReceipt(IPr,true);
    logtext(0,"IPVcRecordUpdateAfter start UpdateFactoringInvoiceReceipt");
    UpdateFactoringInvoiceReceipt(IPr,true);
    logtext(0,"IPVcRecordUpdateAfter start UpdatePmtGrntReportReceipt");
    UpdatePmtGrntReportReceipt(IPr,true);
    logtext(0,"IPVcRecordUpdateAfter start CheckCredManFinished2");
    CheckCredManFinished2(IPr);
  end;
  if (IPr.OKFlag==0 and IP2r.OKFlag==1) then begin
    logtext(0,"IPVcRecordUpdateAfter start SplitLoanPaymentsInReceipt");
    SplitLoanPaymentsInReceipt(IPr,false);
    logtext(0,"IPVcRecordUpdateAfter start UpdateFactoringInvoiceReceipt");
    UpdateFactoringInvoiceReceipt(IPr,false);
    logtext(0,"IPVcRecordUpdateAfter start UpdatePmtGrntReportReceipt");
    UpdatePmtGrntReportReceipt(IPr,false);
  end;
  
  logtext(0,"IPVcRecordUpdateAfter end;");
  
  IPVcRecordUpdateAfter = res;
  return;
end;

global
updating function LongInt IPVcRecordCheck(var record IPVc IPr,record IPVc IP2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record BankTRVc BTr;
  Integer i,rwcnt;
  row IPVc IPrw;
  record CredHistVc CredHistr;
  
  logtext(0,"IPVcRecordCheck cust start");
  
  if (UserCanAction("ReceiptBankTRDiffAmounts",false)==false) then begin
    BTr.FileName = "IPVc";
    BTr.TransNr = IPr.SerNr;
    logtext(0,"IPVcRecordCheck BTr check");
    if (ReadFirstKey("FileName",BTr,2,true)) then begin
      if (BTr.Sum!=IPr.CurPayVal) then begin
        RecordCheckError(200260,"",-1,"CurPayVal");
        res = -1;
        goto LIPVcRecordCheck;
      end;
    end;
  end;
  rwcnt = MatRowCnt(IPr);
  logtext(0,"IPVcRecordCheck for start");
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IPr,i,IPrw);
    if (IPrw.CredHistNr>0) then begin
      CredHistr.SerNr = IPrw.CredHistNr;
      if (ReadFirstMain(CredHistr,1,true)==false) then begin
        logtext(0,"IPVcRecordCheck DistributeCredHistValues call");
        DistributeCredHistValues(IPr,i);
        rwcnt = MatRowCnt(IPr);
      end;
    end;
  end;
  
  logtext(0,"IPVcRecordCheck level0 call");
  res = inner.IPVcRecordCheck(IPr,IP2r,stat,long4);

LIPVcRecordCheck:;
  
  logtext(0,"IPVcRecordCheck cust start");
  
  IPVcRecordCheck = res;
  return;
end;

global
updating function LongInt IPVcRecordRemoveTest(var record IPVc IPr,record IPVc IP2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record BankTRVc BTr;

  res = 1;
  if (UserCanAction("ReceiptBankTRDiffAmounts",false)==false) then begin
    BTr.FileName = "IPVc";
    BTr.TransNr = IPr.SerNr;
    if (ReadFirstKey("FileName",BTr,2,true)) then begin
      res = 0;
      MessageBox(200267,"");
      goto LIPVcRecordRemoveTest;
    end;
  end;

  res = inner.IPVcRecordRemoveTest(IPr,IP2r,stat,long4);

LIPVcRecordRemoveTest:;
  IPVcRecordRemoveTest = res;
  return;
end;


global
updating function LongInt IPVcRecordSaveAfter(var record IPVc IPr,record IPVc IP2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  res = inner.IPVcRecordSaveAfter(IPr,IP2r,stat,long4);

  if (IPr.OKFlag==1) then begin
    SplitLoanPaymentsInReceipt(IPr,true);
    UpdateFactoringInvoiceReceipt(IPr,true);
    UpdatePmtGrntReportReceipt(IPr,true);
    CheckCredManFinished2(IPr);
  end;

  IPVcRecordSaveAfter = res;
  return;
end;