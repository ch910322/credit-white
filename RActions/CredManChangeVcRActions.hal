//<halrule>server-only</halrule>
external procedure BuildCredManPayPlanCust(record CredManVc,var record CredManPayPlanVc,record CredManSetBlock,Boolean,Boolean);
external  procedure CredManSetDatesCust(var record CredManVc,Boolean);
external updating procedure RecreateAgreementSchedule2(record CredManVc,Boolean);
external inner function string 255 CheckTrans(var record TRVc,Integer,Boolean);
external inner updating procedure SaveTrans(record TRVc);
external inner function string 60 AddObjectToObjectList(string,string);
external outer function string 255 CM_GetTransactionDebtorsAcc(record CredManVc,string);
external inner updating procedure DeleteTransaction(LongInt,Integer);
external inner function Boolean TransInFiscal(Date);
external inner procedure AddTransAutoTransRows(record TRVc);
external inner procedure TRSumup(var record TRVc,var val);
external inner procedure AddEuroCurncyTrRow(record TRVc,string,string,string,string,val,Boolean,Boolean,var val,string,val,val,val,val,val,val,val,LongInt,Boolean,string);
external inner function Boolean CheckTTRPerRow(string,string,string,Boolean,var string,Integer);
external inner function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external inner procedure GetFullCurncyRate(var string,Date,var val,var val,var val,var val,var val);
external outer procedure AddCMTransactionControlAccounts(record CredManVc,var string,var string,var val,var val);
external procedure GetPrinciplePartsLeft(record CredManVc,var val,var val);
external procedure CM_GetTransactionControlAcc(record CredManVc,var string,var string);


global
function Integer MakeTransFromCredManChange(record TRVc gTRp,record CredManChangeVc CredManChanger,Boolean rpt,var string errfield)
BEGIN
  Integer res;
  record TRGenBlock TRGenRec;
  record IVVc IVr;
  record CredManSetBlock CredManSetb;
  record AccVc Accr;
  record TRVc lTRr;
  string 255 ftxt,otxt,taccnumber;
  string 255 tstr;
  val t,v;
  Boolean dc1,dc2;
  val rs,totsum;
  string 10 controlacc,aracc;
  Boolean invfound;
  val shortval,longval;
  string 255 shortacc,longacc;
  Boolean addf;
  record CMBuyOutBlock CMBOb;
  record CredManVc CredManr;
    
  res = 1085;
  BlockLoad(TRGenRec);
  BlockLoad(CredManSetb);
  BlockLoad(CMBOb);
  
  if(CMBOb.CredManChangeTran==0)then begin
    res = 0;
    goto LMakeTransFromCredManChange;
  end;
  
  RecordNew(gTRp);
  
  CredManr.SerNr = CredManChanger.CredManNr;
  if(readfirstmain(CredManr,1,true)==false)then begin
    res = 0;
    goto LMakeTransFromCredManChange;
  end;
  
  gTRp.IntYc = 300;//300 For CredManChange IntYc
  gTRp.Number = CredManChanger.SerNr;
  gTRp.RefStr = "";
  
  gTRp.RegDate = CredManChanger.TransDate;
  gTRp.RegTime = CurrentTime;
  gTRp.TransDate = CredManChanger.TransDate;
  
  if (TransInFiscal(gTRp.TransDate)==false) then begin
    res = 0;
    goto LMakeTransFromCredManChange;
  end;
  
  IVr.SerNr = CredManr.IVNr;
  invfound = ReadFirstMain(IVr,1,true);
  
  if (invfound) then begin
    ftxt = "" & CredManr.IVNr & " " & CredManr.Addr0;
  end else begin
    ftxt = CredManr.Addr0;
  end;
  gTRp.Comment = ftxt;
  
  
  
  dc1 = false;
  dc2 = true;
  v = CredManChanger.RemPrincPart;
  rs = MulRateToBase1(CredManr.CurncyCode,v,CredManr.FrRate,CredManr.ToRateB1,CredManr.ToRateB2,CredManr.BaseRate1,CredManr.BaseRate2,DefaultCurRoundOff);
  controlacc = CredManr.CredManAcc;
  if (blank(controlacc)) then begin
    controlacc = CredManSetb.CredManAcc;
  end;
  otxt = CredManr.Objects;
  
  //BEFORE
  
  CM_GetTransactionControlAcc(CredManr,shortacc,longacc);
  shortval = CredManChanger.ShortRemPrincPart;
  longval = CredManChanger.RemPrincPart - CredManChanger.ShortRemPrincPart;
  
  if (nonblank(shortacc) and shortval>0) then begin
    rs = shortval;
    controlacc = shortacc;
  end else begin
    if (nonblank(longacc) and longval>0) then begin
      rs = longval;
      controlacc = longacc;
      addf = true;
    end;
  end;
LAddAccount:;
  Accr.AccNumber = controlacc;
  if (ReadFirstMain(Accr,1,true)==false) then begin
    res = 1007;
    errfield = "CredManAcc";
    goto LMakeTransFromCredManChange;
  end;
  if (nonblank(Accr.Curncy)) then begin
    if (Accr.Curncy!=CredManr.CurncyCode) then begin
      res = 1217;
      errfield = "CredManAcc";
      goto LMakeTransFromCredManChange;
    end;
  end;
  if (CheckTTRPerRow("CredManVc",controlacc,otxt,dc1,taccnumber,1)) then begin end;
  AddEuroCurncyTrRow(gTRp,controlacc,otxt,"",ftxt,rs,false,dc1,totsum,CredManr.CurncyCode,CredManr.FrRate,CredManr.ToRateB1,CredManr.ToRateB2,CredManr.BaseRate1,CredManr.BaseRate2,v,blankval,-1,false,taccnumber);
  if (addf==false and nonblank(longacc) and longval>0) then begin
    rs = longval;
    controlacc = longacc;
    addf = true;
    goto LAddAccount;
  end;
  rs = MulRateToBase1(CredManr.CurncyCode,v,CredManr.FrRate,CredManr.ToRateB1,CredManr.ToRateB2,CredManr.BaseRate1,CredManr.BaseRate2,DefaultCurRoundOff);

  aracc = CredManr.ARAcc;
  if (blank(controlacc)) then begin
    controlacc = CredManSetb.ARAcc;
  end;
  otxt = CredManr.ARAccObject;
  otxt = AddObjectToObjectList(otxt,CredManr.Objects);
  if (invfound) then begin
    ftxt = "" & CredManr.IVNr & " " & CredManr.Addr0;
  end;
  aracc = CM_GetTransactionDebtorsAcc(CredManr,aracc);
  Accr.AccNumber = aracc;
  if (ReadFirstMain(Accr,1,true)==false) then begin
    res = 1007;
    errfield = "ARAccObject";
    goto LMakeTransFromCredManChange;
  end;
  if (nonblank(Accr.Curncy)) then begin
    if (Accr.Curncy!=CredManr.CurncyCode) then begin
      res = 1217;
      errfield = "ARAccObject";
      goto LMakeTransFromCredManChange;
    end;
  end;
  if (CheckTTRPerRow("CredManVc",aracc,otxt,dc2,taccnumber,1)) then begin end;
  AddEuroCurncyTrRow(gTRp,aracc,otxt,"",ftxt,rs,false,dc2,totsum,Accr.Curncy,CredManr.FrRate,CredManr.ToRateB1,CredManr.ToRateB2,CredManr.BaseRate1,CredManr.BaseRate2,v,blankval,-1,false,taccnumber);
  
  //=====================================AFTER
  
  dc1 = true;
  dc2 = false;
  
  GetPrinciplePartsLeft(CredManr,shortval,longval);
  
  
  
  v = shortval + longval;
  
  logtext(0,"shortval " & shortval);
  logtext(0,"longval " & longval);
  logtext(0,"v " & v);
  addf = false;
  if (nonblank(shortacc) and shortval>0) then begin
    rs = shortval;
    controlacc = shortacc;
  end else begin
    if (nonblank(longacc) and longval>0) then begin
      rs = longval;
      controlacc = longacc;
      addf = true;
    end;
  end;
LAddAccount1:;
  Accr.AccNumber = controlacc;
  if (ReadFirstMain(Accr,1,true)==false) then begin
    res = 1007;
    errfield = "CredManAcc";
    goto LMakeTransFromCredManChange;
  end;
  if (nonblank(Accr.Curncy)) then begin
    if (Accr.Curncy!=CredManr.CurncyCode) then begin
      res = 1217;
      errfield = "CredManAcc";
      goto LMakeTransFromCredManChange;
    end;
  end;
  if (CheckTTRPerRow("CredManVc",controlacc,otxt,dc1,taccnumber,1)) then begin end;
  AddEuroCurncyTrRow(gTRp,controlacc,otxt,"",ftxt,rs,false,dc1,totsum,CredManr.CurncyCode,CredManr.FrRate,CredManr.ToRateB1,CredManr.ToRateB2,CredManr.BaseRate1,CredManr.BaseRate2,v,blankval,-1,false,taccnumber);
  if (addf==false and nonblank(longacc) and longval>0) then begin
    rs = longval;
    controlacc = longacc;
    addf = true;
    logtext(0,"add long val");
    goto LAddAccount1;
  end;
  rs = MulRateToBase1(CredManr.CurncyCode,v,CredManr.FrRate,CredManr.ToRateB1,CredManr.ToRateB2,CredManr.BaseRate1,CredManr.BaseRate2,DefaultCurRoundOff);

  aracc = CredManr.ARAcc;
  if (blank(controlacc)) then begin
    controlacc = CredManSetb.ARAcc;
  end;
  otxt = CredManr.ARAccObject;
  otxt = AddObjectToObjectList(otxt,CredManr.Objects);
  if (invfound) then begin
    ftxt = "" & CredManr.IVNr & " " & CredManr.Addr0;
  end;
  aracc = CM_GetTransactionDebtorsAcc(CredManr,aracc);
  Accr.AccNumber = aracc;
  if (ReadFirstMain(Accr,1,true)==false) then begin
    res = 1007;
    errfield = "ARAccObject";
    goto LMakeTransFromCredManChange;
  end;
  if (nonblank(Accr.Curncy)) then begin
    if (Accr.Curncy!=CredManr.CurncyCode) then begin
      res = 1217;
      errfield = "ARAccObject";
      goto LMakeTransFromCredManChange;
    end;
  end;
  if (CheckTTRPerRow("CredManVc",aracc,otxt,dc2,taccnumber,1)) then begin end;
  AddEuroCurncyTrRow(gTRp,aracc,otxt,"",ftxt,rs,false,dc2,totsum,Accr.Curncy,CredManr.FrRate,CredManr.ToRateB1,CredManr.ToRateB2,CredManr.BaseRate1,CredManr.BaseRate2,v,blankval,-1,false,taccnumber);
  
  
  
  //AFTER
  
  
  
  TRSumup(gTRp,t);
  AddTransAutoTransRows(gTRp);
  
  
  
  res = 0;
LMakeTransFromCredManChange:;
  MakeTransFromCredManChange = res;
  RETURN;
END;


global
function LongInt CredManChangeVcRecordDuplicate(var record CredManChangeVc Changer,record CredManChangeVc Change2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record BaseCurBlock BCb;
  record CredManSetBlock CMb;
  val t;

  BlockLoad(BCb);
  BlockLoad(CMb);
  Changer.SerNr = -1;
  

  CredManChangeVcRecordDuplicate = res;
  return;
END;

function Boolean PeriodAlreadyInvoiced(Longint sernr,Date td)
begin
  record CredManPayPlanVc CredManPayPlanr;
  row CredManPayPlanVc CredManPayPlanrw;
  Integer i,rwcnt;
  record CredManSetBlock CMb;
  Date td3,lastinv;
  Boolean res;
  record CredManVc CredManr;
  
  CredManr.SerNr = sernr;
  if (ReadFirstMain(CredManr,1,true)) then begin
    BlockLoad(CMb);
    BuildCredManPayPlanCust(CredManr,CredManPayPlanr,CMb,true,false);
    rwcnt = MatRowCnt(CredManPayPlanr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(CredManPayPlanr,i,CredManPayPlanrw);
      if (CredManPayPlanrw.PlanType>=5) then begin
        if (td<=CredManPayPlanrw.TransDate) then begin
          res = true;
          i = rwcnt;
        end else begin
          i = rwcnt;
        end;
      end;
    end;
  end;

  PeriodAlreadyInvoiced = res;
  return;
end;

global
updating function LongInt CredManChangeVcRecordCheck(var record CredManChangeVc Changer,record CredManChangeVc Change2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record CredManVc CredManr;
  Boolean transf,gentrans,unokf;
  record TRVc gTRp;
  string 255 errstr;
  Integer errcode;
  Integer insertmode,updatemode;
 
  res = 0;
  insertmode = 1;
  updatemode = 2;
  if (Changer.PauseMonths>0 or Changer.ProlongMonths>0) then begin
    if (Changer.TransDate!=Change2r.TransDate) then begin
      RecordCheckError(28615,"",-1,"TransDate");
      res = -1;
      goto LCredManChangeVcRecordCheck;
    end;
  end;
  if (Changer.SerNr==-1) then begin
    Changer.SerNr = NextSerNr("CredManChangeVc",Changer.TransDate,-1,false,"");
  end;
  if (blank(Changer.TransDate)) then begin
    RecordCheckError(1058,"",-1,"TransDate");
    res = -1;
    goto LCredManChangeVcRecordCheck;
  end;
  if (Changer.CredManNr<0) then begin
    RecordCheckError(1058,"",-1,"CredManNr");
    res = -1;
    goto LCredManChangeVcRecordCheck;
  end else begin
    CredManr.SerNr = Changer.CredManNr;
    if (ReadFirstMain(CredManr,1,true)==false) then begin
      RecordCheckError(31402,"",-1,"CredManNr");
      res = -1;
      goto LCredManChangeVcRecordCheck;
    end;
  end;
  if (Changer.IntRate!=Change2r.IntRate or Changer.MonthlyPaymentDay!=Change2r.MonthlyPaymentDay) then begin
    if (PeriodAlreadyInvoiced(Changer.CredManNr,Changer.TransDate)) then begin
      RecordCheckError(200271,"",-1,"TransDate");
      res = -1;
      goto LCredManChangeVcRecordCheck;
    end;
  end;
  
  
  transf = false;
  if (Changer.OKFlag==1) then begin
    if (stat==insertmode) then begin transf = true; end;
    if (stat==updatemode) then begin
      if (Change2r.OKFlag==0) then begin transf = true; end;
    end;
  end;
  
  gentrans = true;
  if (gentrans==false) then begin transf = false; end;
  if (transf) then begin
    errcode = MakeTransFromCredManChange(gTRp,Changer,false,errstr);
    if (errcode!=0) then begin
      RecordCheckError(errcode,"",-1,errstr);
      res = -1;
      goto LCredManChangeVcRecordCheck;
    end;
    if ((gTRp.Number>0) and (gTRp.IntYc==300)) then begin
      errstr = CheckTrans(gTRp,2,true);
      if (nonblank(errstr)) then begin
        RecordCheckError(1085,errstr,-1,"SerNr");
        res = -1;
        goto LCredManChangeVcRecordCheck;
      end;
      SaveTrans(gTRp);
    end;
  end;

LCredManChangeVcRecordCheck:;
  CredManChangeVcRecordCheck = res;
  return;
END;

global
function LongInt CredManChangeVcRecordRemoveTest(var record CredManChangeVc Changer,record CredManChangeVc Change2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  res = 1;
  if (Changer.OKFlag!=0) then begin
    res = 0;
  end;
  
  CredManChangeVcRecordRemoveTest = res;
  return;
END;


global
updating function LongInt CredManChangeVcRecordUpdateAfter(var record CredManChangeVc Changer,record CredManChangeVc Change2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record CredManVc CredManr,oldCredManr;

  res = 0;

  if ((Changer.OKFlag==1 and Change2r.OKFlag==0) or (Changer.OKFlag==0 and Change2r.OKFlag==1)) then begin
    CredManr.SerNr = Changer.CredManNr;
    if (ReadFirstMain(CredManr,1,true)) then begin
      RecordCopy(oldCredManr,CredManr);
      CredManSetDatesCust(CredManr,false);
      if (RecordUpdate(oldCredManr,CredManr,true)==0) then begin
        RecreateAgreementSchedule2(CredManr,false);
      end;
    end;
  end;
  
  if(Changer.OKFlag==0 and Change2r.OKFlag!=0)then begin
    DeleteTransaction(Changer.SerNr,300);//300 - CredManChangr IntYc
  end;

  CredManChangeVcRecordUpdateAfter = res;
  return;
end;