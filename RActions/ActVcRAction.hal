external inner function string 60 AddObjectToObjectList(string,string);
external inner procedure ExtractObj(string,var Integer,var string);

global
function string 255 GetReplacementManager(string persons,date transdate)
begin
  record ManagerReplacementVc MRr;
  string 255 tstr,usercode;
  Integer pos;
  boolean TrHs,foundf;
  
  pos = 0;
  ExtractObj(persons,pos,usercode);
  while (nonblank(usercode)) begin
    ResetLoop(MRr);
    MRr.ManagerFrom = usercode;
    TrHs = true;
    while (LoopKey("ManagerFrom",MRr,1,TrHs)) begin
      foundf = false;
      if (MRr.ManagerFrom!=usercode) then begin
        TrHs = false;
      end;
      if (TrHs) then begin
        if ((transdate>=MRr.DateFrom) and (transdate<=MRr.DateTo)) then begin
          usercode = MRr.ManagerTo;
          goto LWhile;
        end;
      end;
    end;  
    LWhile:;
    tstr = AddObjectToObjectList(tstr,usercode);
    ExtractObj(persons,pos,usercode);
  end;
  GetReplacementManager = tstr;
  return;
end;

global
updating function LongInt ActVcRecordSave(var record ActVc Actr,record ActVc Act2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  if ((Actr.OKFlag==0) and (Actr.TodoFlag==kTodoFlagTodo)) then begin
    Actr.MainPersons = GetReplacementManager(Actr.MainPersons,Actr.TransDate);
  end;
  res = inner.ActVcRecordSave(Actr,Act2r,stat,long4);
  return;
END;

global
updating function LongInt ActVcRecordUpdate(var record ActVc Actr,record ActVc Act2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  if ((Actr.OKFlag==0) and (Actr.TodoFlag==kTodoFlagTodo)) then begin
    Actr.MainPersons = GetReplacementManager(Actr.MainPersons,Actr.TransDate);
  end;
  res = inner.ActVcRecordUpdate(Actr,Act2r,stat,long4);
  return;
END;