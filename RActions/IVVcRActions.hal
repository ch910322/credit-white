//<halrule>server-only</halrule>
external updating procedure UpdateCredHistInvoice(var record IVVc,record IVVc);
external updating procedure UpdateSMSReminderQueue(record IVVc,record IVVc);
external updating procedure UpdateFactoringInvoicesSL(record IVVc,Boolean);
external updating procedure CheckAndCreateFactoringFeeInvoicePL(record IVVc);
external updating procedure UpdateCredManScheduleFromInvoice(record IVVc,Boolean);
external updating procedure CheckCredManFinished(Longint);

global
updating function LongInt IVVcRecordUpdate(var record IVVc IVr,record IVVc IV2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  res = inner.IVVcRecordUpdate(IVr,IV2r,stat,long4);
  UpdateCredHistInvoice(IVr,IV2r);
  if (IVr.OKFlag==1 and IV2r.OKFlag==0) then begin
    UpdateCredManScheduleFromInvoice(IVr,true);
  end;
  if (IVr.OKFlag==0 and IV2r.OKFlag==1) then begin
    UpdateCredManScheduleFromInvoice(IVr,false);
  end;

  IVVcRecordUpdate = res; 
  return;
end;

global
updating function LongInt IVVcRecordSave(var record IVVc IVr,record IVVc IV2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record IVVc IV3r;

  res = inner.IVVcRecordSave(IVr,IV2r,stat,long4);
  UpdateCredHistInvoice(IVr,IV3r);
  if (IVr.OKFlag==1) then begin
    UpdateCredManScheduleFromInvoice(IVr,true);
  end;
  
  IVVcRecordSave = res; 
  return;
end;

global
updating function LongInt IVVcRecordUpdateAfter(var record IVVc IVr,record IVVc IV2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  res = inner.IVVcRecordUpdateAfter(IVr,IV2r,stat,long4);
  UpdateSMSReminderQueue(IVr,IV2r);
  if (IVr.OKFlag==1 and IV2r.OKFlag==0) then begin
    UpdateFactoringInvoicesSL(IVr,true);
    CheckAndCreateFactoringFeeInvoicePL(IVr);
    CheckCredManFinished(IVr.CustCredManNr);
  end;
  if (IVr.OKFlag==0 and IV2r.OKFlag==1) then begin
    UpdateFactoringInvoicesSL(IVr,false);
  end;

  IVVcRecordUpdateAfter = res; 
  return;
end;

global
updating function LongInt IVVcRecordSaveAfter(var record IVVc IVr,record IVVc IV2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record IVVc IV3r;

  RecordCopy(IV3r,IVr);
  IV3r.OKFlag = 0;
  res = inner.IVVcRecordSaveAfter(IVr,IV2r,stat,long4);
  UpdateSMSReminderQueue(IVr,IV3r);
  if (IVr.OKFlag==1) then begin
    UpdateFactoringInvoicesSL(IVr,true);
    CheckAndCreateFactoringFeeInvoicePL(IVr);
    CheckCredManFinished(IVr.CustCredManNr);
  end;

  IVVcRecordSaveAfter = res; 
  return;
end;


global
updating function LongInt IVVcVcRecordRemoveAfter(var record IVVc IVr,record IVVc IV2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record ProlongSessionVc PSr;
  row IVVc IVrw;
  Integer i,rwcnt;

  res = inner.IVVcVcRecordRemoveAfter(IVr,IV2r,stat,long4);
  
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    if (IVrw.ChargeType==14) then begin
      PSr.CredManNr = IVr.CustCredManNr;
      PSr.PaidFlag = 0;
      if (ReadFirstKey("CredManPaid",PSr,2,true)) then begin
        RecordRemove(PSr);
        goto LIVVcVcRecordRemoveAfter; 
      end;
    end;
  end;

LIVVcVcRecordRemoveAfter:;
  IVVcVcRecordRemoveAfter = res;
  return;
end;

