//<halrule>server-only</halrule>
external function Integer IVTestApprovalStatus(record IVVc);
external updating function Integer CreateMailFromIVD(record IVVc,var record MailVc,var string,Boolean,string);
external updating function Integer CreateMailFromIVArray(array LongInt,var record MailVc,var string,Boolean,string);
external updating procedure IVCreateHtmlFile(record IVVc,record MailVc,Boolean);
//CUST-BEGIN
external function Date DateFromString(string,string);
//CUST-END

procedure AddInvoiceToArea(record IVVc IVr,var array string custcodes,var vector LongInt custindexes,var vector LongInt custinvcnt,var area invoices)
begin
  LongInt i,pos;
  area a1,a2;
  
  if (custindexes[IVr.CustCode]==-1) then begin
    custcodes[custcodes.length] = IVr.CustCode;
    custindexes[IVr.CustCode] = GetAreaLength(invoices);
    custinvcnt[IVr.CustCode] = 1;
    AddLongToArea(IVr.SerNr,invoices);
  end else begin
    pos = custindexes[IVr.CustCode] + custinvcnt[IVr.CustCode] * 4;
    if (pos<GetAreaLength(invoices)) then begin
      GetAreaFromArea(invoices,0,pos,a1);
      GetAreaFromArea(invoices,pos,GetAreaLength(invoices) - pos,a2);
      SetAreaZeroSize(invoices);
      AddAreaToArea(a1,invoices);
      AddLongToArea(IVr.SerNr,invoices);
      AddAreaToArea(a2,invoices);
    end else begin
      AddLongToArea(IVr.SerNr,invoices);
    end;
    custinvcnt[IVr.CustCode] = custinvcnt[IVr.CustCode] + 1;
    
    pos = -1;
    for (i = 0; i<custcodes.length; i = i + 1) begin
      if (custcodes[i]==IVr.CustCode) then begin
        pos = i;
        i = custcodes.length;
      end;
    end;
    
    if (pos>=0) then begin
      for (i = pos + 1; i<custcodes.length; i = i + 1) begin
        custindexes[custcodes[i]] = custindexes[custcodes[i]] + 4;
      end;
    end;
  end;
end;

//CUST-BEGIN
global
updating procedure CreateSingleCustomerInvoiceMails(array LongInt IVSerNrs,Boolean sendf,var array record MailVc aMailr)
begin
  record IVVc IVr;
  record IVVc oldIVr;
  record MailVc Mailr,OldMailr;
  LongInt i,i2;
  string 255 tstr;

  RecordNew(Mailr);
  if (CreateMailFromIVArray(IVSerNrs,Mailr,tstr,false,"")==0) then begin
    for (i2 = 0; i2<IVSerNrs.length; i2 = i2 + 1) begin
      IVr.SerNr = IVSerNrs[i2];
      if (ReadFirstMain(IVr,1,true)) then begin
        RecordCopy(oldIVr,IVr);
        IVr.Prntdf = 1;
        RecordUpdate(oldIVr,IVr,false);
      end;
    end;
    /*
    if (sendf) then begin
      RecordCopy(OldMailr,Mailr);
      Mailr.SendFlag = 1;
      RecordUpdate(OldMailr,Mailr,true);
    end;
    */
    aMailr[aMailr.length] = Mailr;
  end;

  return;
end;
//CUST-END

procedure CreateMailsFromInvoiceArea(array string custcodes,vector LongInt custindexes,vector LongInt custinvcnt,area invoices,Boolean sendf,var array record MailVc aMailr)//cust
begin
  record IVVc IVr;
  record IVVc oldIVr;
  record MailVc Mailr,OldMailr;
  LongInt i,i2;
  string 255 tstr;
  array LongInt IVSerNrs;
  
  for (i = 0; i<custcodes.length; i = i + 1) begin
    ClearArray(IVSerNrs);
    for (i2 = 0; i2<custinvcnt[custcodes[i]]; i2 = i2 + 1) begin
      IVSerNrs[IVSerNrs.length] = GetLongFromArea(invoices,custindexes[custcodes[i]] + i2 * 4);
    end;
    
    qupdating.CreateSingleCustomerInvoiceMails(IVSerNrs,sendf,aMailr);//CUST
  end;
end;

//CUST-BEGIN
global
updating procedure SendSingleInvoiceEmail(record IVVc IVr,record RcVc RepSpec,var array record MailVc aMailr)
begin
  record MailVc Mailr,oldMailr;
  string 255 tstr;
  record IVVc oldIVr;

  if (ReadFirstMain(IVr,1,true)) then begin
    RecordNew(Mailr);
    if (CreateMailFromIVD(IVr,Mailr,tstr,false,"")==0) then begin
      RecordCopy(oldIVr,IVr);
      IVr.Prntdf = 1;
      RecordUpdate(oldIVr,IVr,false);
      aMailr[aMailr.length] = Mailr;
      /*
      if (RepSpec.flags[1] != 0) then begin
        RecordCopy(OldMailr,Mailr);
        Mailr.SendFlag = 1;
        RecordUpdate(OldMailr,Mailr,true);
      end;
      */
    end;
  end;
  
  return;
end;

global
updating function Boolean PreviousEmailQueueCreated(Longint sernr)
begin
  record EMailQueVc EQr;
  Boolean res;
  
  EQr.FileName = "MailVc";
  EQr.OrgSerNr = sernr;
  if (ReadFirstKey("OrgSerNr",EQr,2,true)) then begin
    res = true;
  end;

  PreviousEmailQueueCreated = res;
  return;
end;

global
updating function Longint MarkSingleMailAsSent(record MailVc Mailr)
begin
  record MailVc oldMailr;
  Longint res;

  if (ReadFirstMain(Mailr,1,true)) then begin
    RecordCopy(OldMailr,Mailr);
    Mailr.SendFlag = 1;
    if (RecordUpdate(OldMailr,Mailr,true)==0) then begin
      if (ReadFirstMain(Mailr,1,true) and Mailr.LockedFlag==1) then begin
        res = Mailr.SerNr;
      end;
    end;
  end;
  
  MarkSingleMailAsSent = res;
  return;
end;

global
procedure MarkAllMailsAsSent(array record MailVc aMailr)
begin
  record MailVc Mailr,oldMailr;
  Integer i;
  Longint prev;
  Boolean testf;

  for (i=0;i<aMailr.length;i=i+1) begin
    Mailr = aMailr[i];
    testf = false;
    while (testf==false) begin
      if (prev==-1 or qupdating.PreviousEmailQueueCreated(prev)) then begin
        prev = qupdating.MarkSingleMailAsSent(Mailr);
        testf = true;
      end else begin
        sleep(1);
      end;
    end;
  end;

  return;
end;

global
updating procedure ChangeSenderOfAllMailqueue(record MailVc Mailr,string user)
begin
  row MailVc MArw;
  Integer i;
  Longint prev;
  Boolean testf;
  record UserVc USr;
  string 100 tstr1,tstr;
    
  USr.Code = user;
  if(readfirstmain(USr,1,true))then begin
    if(nonblank(USr.emailAddr))then begin
      if(readfirstmain(Mailr,1,true))then begin
        matrowget(Mailr,0,MArw);
        MArw.AddrCode = USr.emailAddr;
        matrowput(Mailr,0,MArw);
        recordstore(Mailr,true);
      end;
    end;
  end;

  return;
end;


global
procedure ChangeSenderOfAllMail(array record MailVc aMailr,string user)
begin
  record MailVc Mailr,oldMailr;
  row MailVc MArw;
  Integer i;
  Longint prev;
  Boolean testf;
  record UserVc USr;
  string 100 tstr1,tstr;

  for (i=0;i<aMailr.length;i=i+1) begin
    Mailr = aMailr[i];
    qupdating.ChangeSenderOfAllMailqueue(Mailr,user);
  end;

  return;
end;

//CUST-END

global
procedure IVToMailMnRun(record RcVc RepSpec)//CUST updating
begin
  record IVVc IVr;
  record IVVc oldIVr;
  Boolean found,testf;
  LongInt friv,toiv;
  string 255 frcu,tocu;
  record CUVc CUr;
  string 255 ckey,tstr;
  record MailVc Mailr,OldMailr;
  record ARVc ARr;
  string 255 fname,docname;
  array string 255 custcodes;
  vector LongInt custindexes;
  vector LongInt custinvcnt;
  area invoices;
  array record MailVc aMailr;//CUST
    
  friv = FirstInRange(RepSpec.f2,10);
  toiv = LastInRange(RepSpec.f2,10);
  frcu = FirstInRange(RepSpec.f1,10);
  tocu = LastInRange(RepSpec.f1,10);
  if (nonblank(RepSpec.f2)) then begin
    ckey = "SerNr";
    IVr.SerNr = friv;
  end else begin
    ckey = "TransDate";
    IVr.TransDate = RepSpec.sStartDate;
  end;
  found = true;
  while (LoopKey(ckey,IVr,1,found)) begin
    if (nonblank(RepSpec.f2)) then begin
      if (IVr.SerNr>toiv) then begin found = false; end;
    end else begin
      if (DateInRange(IVr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin found = false; end;
    end;
    if (found) then begin
      testf = true;
      if (DateInRange(IVr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin testf = false; end;
      if (nonblank(RepSpec.f1)) then begin
        if (IVr.CustCode<frcu) then begin testf = false; end;
        if (IVr.CustCode>tocu) then begin testf = false; end;
      end;
      if (RepSpec.flags[8]==0 and IVr.OKFlag==0) then begin testf = false; end;
      if (IVr.Invalid!=0) then begin testf = false; end;
      if (testf and RepSpec.flags[0]!=0) then begin
        ARr.InvoiceNr = IVr.SerNr;
        testf = ReadFirstMain(ARr,1,true);
      end;
      if (testf) then begin
        CUr.Code = IVr.CustCode;
        if (ReadFirstMain(CUr,1,true)) then begin
        end;
        if (nonblank(RepSpec.f3)) then begin
          if (CUr.JobDesc!=RepSpec.f3) then begin testf = false; end;
        end;
        if (nonblank(RepSpec.FirstAcc) and (RepSpec.FirstAcc!=CUr.CustCat)) then begin testf = false; end;
        if (nonblank(RepSpec.f4)) then begin
          if (SetInSet(RepSpec.f4,CUr.Classification)==false) then begin testf = false; end;
        end;  
      end;
      if (IVr.InvType==kInvoiceTypeCash or IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
        if (RepSpec.flags[4]==0) then begin
          testf = false;
        end;
      end;
      if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
        if (RepSpec.flags[5]==0) then begin
          testf = false;
        end;
      end;
      if (IVr.InvType==kInvoiceTypeInterest) then begin
        if (RepSpec.flags[6]==0) then begin
          testf = false;
        end;
      end;
      if ((IVr.InvType!=kInvoiceTypeCash and IVr.InvType!=kInvoiceTypeCashInvoiceReceiptPRT) and (IVr.InvType!=kInvoiceTypeCredit and IVr.InvType!=kInvoiceTypeCreditSpecialSales) and (IVr.InvType!=kInvoiceTypeInterest)) then begin
        if (RepSpec.flags[3]==0) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        testf = IVTestApprovalStatus(IVr)==0;
      end;
//CUST-BEGIN
      if (testf and IVr.NoEmailFlag==1) then begin
        testf = false;
      end;
//CUST-END
      if (testf) then begin
        if (RepSpec.flags[7]!=0) then begin
          AddInvoiceToArea(IVr,custcodes,custindexes,custinvcnt,invoices);
        end else begin
        /*CUST-BEGIN
          RecordNew(Mailr);
          if (CreateMailFromIVD(IVr,Mailr,tstr,false,"")==0) then begin
            RecordCopy(oldIVr,IVr);
            IVr.Prntdf = 1;
            RecordUpdate(oldIVr,IVr,false);
            if (RepSpec.flags[1] != 0) then begin
              RecordCopy(OldMailr,Mailr);
              Mailr.SendFlag = 1;
              RecordUpdate(OldMailr,Mailr,true);
            end;
          end;
        */
        qupdating.SendSingleInvoiceEmail(IVr,RepSpec,aMailr);
        //CUST-END
        end;
      end;
    end;
  end;
  if (RepSpec.flags[7]!=0) then begin
    CreateMailsFromInvoiceArea(custcodes,custindexes,custinvcnt,invoices,RepSpec.flags[1]!=0,aMailr);
  end;
  
  if(nonblank(RepSpec.f10))then begin
    ChangeSenderOfAllMail(aMailr,RepSpec.f10);
  end;

  if (RepSpec.flags[1]==1) then begin
    MarkAllMailsAsSent(aMailr);
    sleep(5);
    MarkAllMailsAsSent(aMailr);
  end;
  return;
end;

//CUST-BEGIN
global
procedure IVToMailMnTask(string args)
begin
  Longint pos;
  string 255 arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,compno;
  record RcVc RepSpec;
  Integer oldcomp;

  oldcomp = CurrentCompany;
  GetNextSubString(args,pos,"|",compno);
  SetCompany(StringToInt(compno),false);

  GetNextSubString(args,pos,"|",arg1);
  GetNextSubString(args,pos,"|",arg13);
  
  GetNextSubString(args,pos,"|",arg2);
  GetNextSubString(args,pos,"|",arg3);
  GetNextSubString(args,pos,"|",arg4);
  GetNextSubString(args,pos,"|",arg5);
  GetNextSubString(args,pos,"|",arg6);
  GetNextSubString(args,pos,"|",arg7);
  GetNextSubString(args,pos,"|",arg8);
  GetNextSubString(args,pos,"|",arg9);
  GetNextSubString(args,pos,"|",arg10);
  GetNextSubString(args,pos,"|",arg11);
  GetNextSubString(args,pos,"|",arg12);
  GetNextSubString(args,pos,"|",arg14);
  GetNextSubString(args,pos,"|",arg15);


  RepSpec.sStartDate = DateFromString(arg1,"YYYY-MM-DD");
  RepSpec.sEndDate = DateFromString(arg13,"YYYY-MM-DD");
  RepSpec.f1 = arg2;
  RepSpec.f2 = arg3;
  RepSpec.flags[0] = StringToInt(arg4);
  RepSpec.flags[1] = StringToInt(arg5);
  RepSpec.flags[2] = StringToInt(arg6);
  RepSpec.flags[3] = StringToInt(arg7);
  RepSpec.flags[4] = StringToInt(arg8);
  RepSpec.flags[5] = StringToInt(arg9);
  RepSpec.flags[6] = StringToInt(arg10);
  RepSpec.flags[7] = StringToInt(arg11);
  RepSpec.flags[8] = StringToInt(arg12);
  RepSpec.f10 = arg15;
  RepSpec.FirstAcc = arg14;
  
  
  IVToMailMnRun(RepSpec);

  if (oldcomp!=CurrentCompany) then begin
    ResetCompany(oldcomp);
  end;
  return;
end;

global
procedure IVToMailMn(record RcVc RepSpec)
begin
  
  if(RepSpec.flags[9]==1)then begin
    RepSpec.f10 = currentuser;
  end;
  
  NewTimedTask2("IVToMailMnTask","IVToMailMnTask","IVToMailMnTask",CurrentCompany & "|" & DateToString(RepSpec.sStartDate,"YYYY-MM-DD") & "|" & DateToString(RepSpec.sEndDate,"YYYY-MM-DD") & "|" & RepSpec.f1 & "|" & RepSpec.f2 & "|" & RepSpec.flags[0] & "|" & RepSpec.flags[1] & "|" & RepSpec.flags[2] & "|" & RepSpec.flags[3] & "|" & RepSpec.flags[4] & "|" & RepSpec.flags[5] & "|" & RepSpec.flags[6] & "|" & RepSpec.flags[7] & "|" & RepSpec.flags[8] & "|" & RepSpec.FirstAcc & "|" & RepSpec.f10,CurrentDate,AddSeconds(CurrentTime,1),"","");

  return;
end;
//CUST-END
