//<halrule>server-only</halrule>
external inner function Boolean PasteCuInAct(var record ActVc,var string);
external inner function Boolean PasteActTypeInAct2(string,var record ActVc,var string);
external inner procedure IVToMailMn(record RcVc);
external updating function Boolean LoopAndGenLoanAgreementInvoice(var record RcVc,var record IVVc);
external function string 255 CM_SetCompanyLanguage();
external procedure CM_ResetCompanyLanguage(string);
external inner function LongInt TimeToMinutes(Time);
external inner procedure FindUserMailboxName(string,var string,var string);
external inner function Boolean FindCustomerRelation(string,string,var record CUVc);
external inner function boolean AddEMailRecipients(var record MailVc,string,string,integer);

global
updating procedure CreateTaskActivityCredMan(record CredManVc CredManr,string person,string acttype,string acttext,date TransDate,time StartTime)
begin
  record ActVc Actr;
  string 255 warning;
  record CredManVc oldCredManr;

  if (ReadFirstMain(CredManr,1,true)) then begin
    Actr.SerNr = NextSerNr("ActVc",TransDate,-1,false,"");
    Actr.TransDate = TransDate;
    Actr.StartTime = StartTime;
    Actr.Value = CredManr.InvSum4;
    Actr.CUCode = CredManr.CustCode;
    PasteCuInAct(Actr,warning);
    Actr.ActType = acttype;
    PasteActTypeInAct2("",Actr,warning);
    Actr.MainPersons = person;
    Actr.Comment = acttext;
    Actr.TodoFlag = kTodoFlagTodo;
    if (RecordInsert(Actr,true)) then begin
      CreateRecordLink(Actr,CurrentCompany,CredManr,CurrentCompany);
      CreateRecordLink(CredManr,CurrentCompany,Actr,CurrentCompany);
      RecordCopy(oldCredManr,CredManr);
      CredManr.StateNotified = 1;
      RecordUpdate(oldCredManr,CredManr,true);
    end;
  end;

  return;
end;

global
updating procedure CreateTaskActivityLoanApp(record B2BLoanApplicationVc LAr,string person,string acttype,string acttext,date TransDate,time StartTime)
begin
  record ActVc Actr;
  string 255 warning;
  record B2BLoanApplicationVc oldLAr;

  if (ReadFirstMain(LAr,1,true)) then begin
    Actr.SerNr = NextSerNr("ActVc",TransDate,-1,false,"");
    Actr.TransDate = TransDate;
    Actr.StartTime = StartTime;
    Actr.Value = LAr.Sum;
    Actr.CUCode = LAr.CustCode;
    PasteCuInAct(Actr,warning);
    Actr.ActType = acttype;
    PasteActTypeInAct2("",Actr,warning);
    Actr.MainPersons = person;
    Actr.Comment = acttext;
    Actr.TodoFlag = kTodoFlagTodo;
    if (RecordInsert(Actr,true)) then begin
      CreateRecordLink(Actr,CurrentCompany,LAr,CurrentCompany);
      CreateRecordLink(LAr,CurrentCompany,Actr,CurrentCompany);
      RecordCopy(oldLAr,LAr);
      LAr.StateNotified = 1;
      RecordUpdate(oldLAr,LAr,true);
    end;
  end;

  return;
end;

global
updating procedure CreateTaskActivityPropertyInsurance(record CMPropertyVc CMpr,string person,string acttype,string acttext,date TransDate,time StartTime)
begin
  record ActVc Actr;
  string 255 warning;
  record CMPropertyVc oldCMpr;

  if (ReadFirstMain(CMpr,1,true)) then begin
    Actr.SerNr = NextSerNr("ActVc",TransDate,-1,false,"");
    Actr.TransDate = TransDate;
    Actr.StartTime = StartTime;
    Actr.Value = CMpr.InsuredVal;
    Actr.CUCode = CMpr.InsuranceCompany;
    PasteCuInAct(Actr,warning);
    Actr.ActType = acttype;
    PasteActTypeInAct2("",Actr,warning);
    Actr.MainPersons = person;
    Actr.Comment = acttext;
    Actr.TodoFlag = kTodoFlagTodo;
    if (RecordInsert(Actr,true)) then begin
      CreateRecordLink(Actr,CurrentCompany,CMpr,CurrentCompany);
      CreateRecordLink(CMpr,CurrentCompany,Actr,CurrentCompany);
      RecordCopy(oldCMpr,CMpr);
      CMpr.StateNotified = 1;
      RecordUpdate(oldCMpr,CMpr,true);
    end;
  end;

  return;
end;

function boolean GetManagerApplicationCount(string user,string apporderclass,var longint ev)
begin
  boolean res;
  longint pos;
  record B2BLoanApplicationVc LAr;
  string 255 tstr;
  boolean found;
  
  ev = 0;
  res = false;
  while (GetNextSubString(apporderclass,pos,",",tstr)) begin
    ResetLoop(LAr);
    LAr.OrderClass = tstr;
    found = true;
    while (LoopKey("OrderClass",LAr,1,found)) begin
      if (LAr.OrderClass!=tstr) then begin
        found = false;
      end;
      if ((found) and (LAr.Manager==user)) then begin
        res = true;
        ev = ev + 1;
      end;
    end;
  end;
  GetManagerApplicationCount = res;
  return;
end;

function boolean GetManagerWorkLoadEvaluation(string user,Integer EvaluationType,string apporderclass,date d,var longint ev)
begin
  record ActVc Actr;
  boolean testf,foundf,res;
  string 255 keystr;

  ev = 0;
  res = false;
  if (EvaluationType==3) then begin
    res = GetManagerApplicationCount(user,apporderclass,ev);
  end else begin
  keystr = "OKFlagUserMain:" & user;
  Actr.OKFlag = 0;
  Actr.MainPersons = user;
  foundf = true;
  while (LoopKey(keystr,Actr,1,foundf)) begin
    if (!SetInSet(user,Actr.MainPersons)) then begin
      foundf = false;
    end; 
    if (Actr.OKFlag != 0) then begin
      foundf = false;
    end;
    if (foundf) then begin
      switch (EvaluationType) begin
        case 0: 
          if (Actr.TransDate == d) then begin
            ev = ev + TimeToMinutes(Actr.CostTime);
            res = true;
          end;
        case 1:
          if (Actr.TransDate == d) then begin
            ev = ev +1;
            res = true;
          end;    
        case 2:
          ev = ev +1;  
          res = true;          
      end;  
    end;  
  end;  
  end;
  GetManagerWorkLoadEvaluation = res;
  return;
end;

global
function string 10 GetLeastWorkLoadManager(string ActType,string CredManType,date d)
begin
  record ManagerWorkloadVc MWr;
  record CredManTypeVc CMTyper;
  boolean foundf,TrHs;
  string 10 res;
  record SMVc SMr;
  row SMVc SMrw; 
  record UserVc Userr;
  longint ev, prevev;
  string 255 tstr;
  Longint pos;

  foundf=false;
  res = "";
  prevev = -1;
  if (nonblank(CredManType)) then begin
    MWr.ActType = ActType;
    MWr.CredManType = CredManType;
    foundf = ReadFirstKey("ActTypeCredManType",MWr,2,true);
  end;
  if (!foundf) then begin
    //2. exact match of activity type and agreement type classification;
    CMTyper.Code = CredManType;
    if (ReadFirstMain(CMTyper,1,true)) then begin 
      while (GetNextSubString(CMTyper.Classifications,pos,",",tstr)) begin
        MWr.ActType = ActType;
        MWr.CredManClass = tstr;
        foundf = ReadFirstKey("ActTypeCMClassType",MWr,2,true);
        if (foundf) then begin 
          goto LWEnd; 
        end;
      end;  
      LWEnd:;
    end;
  end;
  if (!foundf) then begin
    //3. exact match of activity type and blank agreement type and agreement type classification fields;
    MWr.ActType = ActType;
    MWr.CredManType = "";
    MWr.CredManClass = "";
    foundf=ReadFirstKey("ActTypeCMTCMCType",MWr,3,true);
  end;
  if (!foundf) then begin
    //4.Managers Workload record with blank activity type, blank agreement type and blank agreement type classification fields
    MWr.ActType = "";
    MWr.CredManType = "";
    MWr.CredManClass = "";
    foundf=ReadFirstKey("ActTypeCMTCMCType",MWr,3,true);
  end;
  if (!foundf) then begin
    //if neither of previously described are found, should not create any tasks  
  end;
  if (foundf) then begin
    Userr.SalesGroup = MWr.SalesGroup;
    TrHs = true;
    while (LoopKey("SalesGroup",Userr,1,TrHs)) begin
      if (Userr.SalesGroup!=MWr.SalesGroup) then begin
         TrHs = false;
      end;
      if (TrHs) then begin
        if (GetManagerWorkLoadEvaluation(Userr.Code,MWr.EvaluationType,MWr.OrderClass,d,ev)) then begin
          if ((prevev==-1) or (ev <= prevev)) then begin
            res = Userr.Code;
            prevev = ev;  
          end;  
        end;
      end;  
    end;
  end;
  GetLeastWorkLoadManager = res;
  return;
end;

//based on SendEmailWithStdTextFromUser
updating procedure CreateEmailWithStdText(string stdtxt,string fromuser,string emailto,var record MailVc Mailr)
begin
  row MailVc Mailrw;
  string 255 tstr;
  LongInt pos,l;
  Integer i;
  area a;
  record LTxtVc LTxtr;
  string 255 mailboxnr,mailboxname;
  LongInt rwcnt;
  
  LTxtr.Code = stdtxt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    RecordNew(Mailr);
    Mailr.Header = LTxtr.Comment;    
    FindUserMailboxName(fromuser,mailboxnr,mailboxname);
    if (nonblank(mailboxname)) then begin
      ClearRow(Mailr,Mailrw,1);
      Mailrw.RowTyp = kMailRowTypeFrom;
      Mailrw.AddrCode = mailboxname;
      mailrw.Mailbox = StringToLongInt(mailboxnr);
      MatRowPut(Mailr,0,Mailrw);
    end;
    if (nonblank(emailto)) then begin
      ClearRow(Mailr,Mailrw,1);
      Mailrw.RowTyp = kMailRowTypeTo;
      Mailrw.AddrCode = emailto;
      MatRowPut(Mailr,1,Mailrw);
    end;  

    /* TODO: specs to be defined
    if (LTxtr.HtmlFlag==0) then begin
      ParseTextField(a,LTxtr,RepSpec,"LtxtVcReplaceToken");
      l = GetAreaLength(a);
      pos = 0;
      while (pos<l) begin
        tstr = GetStringFromArea(a,pos,255);
        AddToText(tstr,Mailr); 
        pos = pos+255;
      end;
    end else begin
      Mailr.HtmlFlag = 1;
    end;
    */
    if (Mailr.HtmlFlag==0) then begin
      rwcnt = LineTextCnt(LTxtr);
      for (i=0;i<rwcnt;i=i+1) begin
        tstr = LineTextGet(LTxtr,i);
        LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
      end;    
      AddCRToText(Mailr);
    end else begin
      if (LTxtr.HtmlFlag==0) then begin
        AddToHtmlRecord(Ltxtr,false,Mailr,true,true);
      end else begin
        AddHtmlRecordToHtmlRecord(Ltxtr,Mailr,true);
      end;
      LineTextPutToHtmlRecord(Mailr,chr(13),false,true);
    end;
    
    Mailr.SerNr = NextSerNr("MailVc",CurrentDate,-1,false,"");
    if (RecordInsert(Mailr,true)) then begin
    end;
  end;
  
  return;
end;

//copy-paste
procedure RemoveDuplicateRecipients(var record MailVc Mailr)
begin
  row MailVc Mailrw,Mail2rw;
  Integer i,j,rwcnt;

  rwcnt = MatRowCnt(Mailr);
  for (i=1;i<rwcnt;i=i+1) begin
    MatRowGet(Mailr,i,Mailrw);
    for (j=i+1;j<rwcnt;j=j+1) begin
      MatRowGet(Mailr,j,Mail2rw);
      if (Mail2rw.AddrCode==Mailrw.AddrCode) then begin
        MatRowDelete(Mailr,j);
        j = j - 1;
        rwcnt = rwcnt -1;
      end;
    end;
  end;

  return;
end;

procedure AddSingleRecipient(var record MailVc Mailr,string email)
begin
  row MailVc Mailrw;
  Integer i,rwcnt;
  Boolean foundf;
  
  if (nonblank(email)) then begin 
    rwcnt = MatRowCnt(Mailr);
    for (i=1;i<rwcnt;i=i+1) begin
      MatRowGet(Mailr,i,Mailrw);
      if (Mailrw.AddrCode==email) then begin
        foundf = true;
        i = rwcnt;
      end;
    end;
    if (!foundf) then begin
      ClearRow(Mailr,Mailrw,1);
      Mailrw.RowTyp = 0;
      Mailrw.AddrCode = email;
      MatRowPut(Mailr,MatRowCnt(Mailr),Mailrw);
    end;
  end; 

  return;
end;

procedure AddContactsByJobDescription(record MailVc Mailr,record CUVc CUr,string jobdescr)
begin
  record CUVc ContactCUr;
  record ContactRelVc CRr;
  while (LoopKey("CustContactCode:" & CUr.Code,CRr,1,true)) begin
    if (CRr.Invalid==0) then begin
      ContactCUr.Code = CRr.ContactCode;
      if (ReadFirstMain(ContactCUr,1,true)) then begin
        if(nonblank(ContactCUr.JobDesc))then begin
          if (SetInSet(ContactCUr.JobDesc,jobdescr)) then begin
            AddSingleRecipient(Mailr,ContactCUr.eMail);
          end;
        end;
      end;
    end;
  end;

  return;
end;

//could be used in Ext_AddCustomMailRecipients()
function Boolean AddCredManInvoiceMailRecipients(string custcode,var record MailVc Mailr)
begin
  record CMInvoicingBlock CIb;
  record CUVc CUr;
  record CUVc ContactCUr;
  Boolean res;

  res = false;
  BlockLoad(CIb);
  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin
    if (CIb.SendToMainContact==1) then begin
      if (nonblank(CUr.Person)) then begin
        if (FindCustomerRelation(CUr.Code,CUr.Person,ContactCUr)) then begin
          if (nonblank(ContactCUr.eMail)) then begin
            AddSingleRecipient(Mailr,ContactCUr.eMail);
            res = true;
          end;
        end;
      end;
    end;
    if (CIb.SendToCompany==1) then begin
      if ((CIb.SendToCompNoContact==0) or (blank(CUr.Person))) then begin
        AddSingleRecipient(Mailr,Cur.eMail);
        res = true;
      end;
    end;
    if (CIb.SendToAddRecip==1) then begin
      AddEMailRecipients(Mailr,CUr.Code,"",kMailInvoice); 
      res = true;
    end;
    if (nonblank(CIb.SendToJobDescr)) then begin
      AddContactsByJobDescription(Mailr,CUr,CIb.SendToJobDescr);
      res = true;
    end;
    RemoveDuplicateRecipients(Mailr);
  end;
  
  AddCredManInvoiceMailRecipients = res;
  return;
end;

global 
updating procedure SendAutoEmailWithStdText(string stdtext,string fromuser,string custcode)
begin
  record MailVc Mailr,oldMailr;
  
  CreateEmailWithStdText(stdtext,fromuser,"",Mailr);
  if (AddCredManInvoiceMailRecipients(custcode,Mailr)) then begin
    RecordCopy(OldMailr,Mailr);
    Mailr.SendFlag = 1;
    RecordUpdate(OldMailr,Mailr,true);
  end;
  
  return;
end;

global
procedure CredManToolsCheckRecord(string args)
begin
  record CredmanAutoTaskBlock ATb;
  row CredmanAutoTaskBlock ATbrw;
  record CredManVc CredManr;
  record B2BLoanApplicationVc LAr;
  record CMPropertyVc CMpr;
  Integer i,rwcnt;
  Date td;
  Time tt;
  Boolean TrHs;
  string 255 person;
  Integer j,comp,compcnt,oldcomp;
  record CompaniesBlock Compb;
  Date actdate;
  Time acttime;
  
  oldcomp = CurrentCompany;
  BlockLoad(Compb);
  compcnt = MatRowCnt(Compb);
  for (j=0;j<compcnt;j=j+1) begin
    comp = j+1;
    SetCompany(comp,false);
    BlockLoad(ATb);
    rwcnt = MatRowCnt(ATb);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(ATb,i,ATbrw);
      td = AddDay(CurrentDate,-ATbrw.DelayDays);
      tt = CurrentTime;
      actdate = AddDay(CurrentDate,ATbrw.DelayDays);
      acttime = CurrentTime;
      if (ATbrw.DelayHours>0) then begin
        tt = AddHours(tt,-ATbrw.DelayHours);
        acttime = AddHours(acttime,ATbrw.DelayHours);
        if (tt>CurrentTime) then begin
          td = AddDay(td,-1);
        end;
      end;
      if (nonblanktime(ATbrw.AtTime)) then begin
        if (acttime>ATbrw.AtTime) then begin
          actdate = AddDay(actdate,1);
          acttime = ATbrw.AtTime;
        end else begin
          acttime = ATbrw.AtTime;
        end;
      end;
  //LogText(0,"Checking agreements older than " & td & ":" & tt);
      switch (ATbrw.Type) begin
        case 0://agreements
          RecordClear(CredManr);
          ResetLoop(CredManr);
          TrHs = true;
          CredManr.OrderClass = ATbrw.OrderClass;
          CredManr.StateNotified = 0;
          CredManr.StateChangeDate = td;
          CredManr.StateChangeTime = tt;
          while (LoopBackKey("OrderClassChange",CredManr,4,TrHs)) begin
            if (CredManr.OrderClass!=ATbrw.OrderClass or CredManr.StateNotified!=0) then begin
              TrHs = false;
            end else begin
              person = CredManr.SalesMan;
              if (ATBrw.PersonType==1) then begin
                person = ATbrw.Manager;
              end;
              if (ATBrw.PersonType==2) then begin
                person = GetLeastWorkLoadManager(ATbrw.ActType,CredManr.Type,actdate);
                if (blank(person)) then begin
                  LogText(0,"GetLeastWorkLoadManager " & ATbrw.ActType & " failed");
                end; 
              end;  
              qupdating.CreateTaskActivityCredMan(CredManr,person,ATbrw.ActType,ATbrw.ActText,actdate,acttime);
            end;
          end;
        case 1://loan applications
          RecordClear(LAr);
          ResetLoop(LAr);
          TrHs = true;
          LAr.OrderClass = ATbrw.OrderClass;
          LAr.StateNotified = 0;
          LAr.StateChangeDate = td;
          LAr.StateChangeTime = tt;
          while (LoopBackKey("OrderClassChange",LAr,4,TrHs)) begin
            if (LAr.OrderClass!=ATbrw.OrderClass or LAr.StateNotified!=0) then begin
              TrHs = false;
            end else begin
              person = LAr.Manager;
              if (ATBrw.PersonType==1) then begin
                person = ATbrw.Manager;
              end;
              if (ATBrw.PersonType==2) then begin
                person = GetLeastWorkLoadManager(ATbrw.ActType,CredManr.Type,actdate);
                if (blank(person)) then begin
                  LogText(0,"GetLeastWorkLoadManager " & ATbrw.ActType & " failed");
                end; 
              end;
              qupdating.CreateTaskActivityLoanApp(LAr,person,ATbrw.ActType,ATbrw.ActText,actdate,acttime);
              qupdating.SendAutoEmailWithStdText(ATbrw.EmailStdText,person,LAr.CustCode);
            end;
          end;
        case 2: //property insurance
          ResetLoop(CMpr);
          CMpr.StateNotified = 0;
          //CMpr.StateChangeDate = td;
          //CMpr.StateChangeTime = tt;
          TrHs = true;
          while (LoopBackKey("StateNotified",CMpr,1,TrHs)) begin
            if (CMpr.StateNotified!=0) then begin
              TrHs = false;
            end else begin
              if (nonblankdate(CMpr.InsuredUntil)) then begin
                actdate = AddDay(CMpr.InsuredUntil,-ATbrw.DelayDays);
                acttime = CurrentTime;
                if (ATbrw.DelayHours>0) then begin
                  acttime = AddHours(acttime,-ATbrw.DelayHours);
                end;
                if (nonblanktime(ATbrw.AtTime)) then begin
                  if (acttime>ATbrw.AtTime) then begin
                    actdate = AddDay(actdate,-1);
                    acttime = ATbrw.AtTime;
                  end else begin
                    acttime = ATbrw.AtTime;
                  end;
                end;
                if (ATBrw.PersonType==1) then begin
                  person = ATbrw.Manager;
                end;
                if (ATBrw.PersonType==2) then begin
                  person = GetLeastWorkLoadManager(ATbrw.ActType,CredManr.Type,actdate);
                  if (blank(person)) then begin
                    LogText(0,"GetLeastWorkLoadManager " & ATbrw.ActType & " failed");
                  end; 
                end;
                qupdating.CreateTaskActivityPropertyInsurance(CMpr,person,ATbrw.ActType,ATbrw.ActText,actdate,acttime);
              end;
            end;
          end;
          
      end;
    end;
  end;
  ResetCompany(oldcomp);
  return;
end;

global
procedure InitCredManAutoTasks()
begin
  
  NewPeriodicTask2("CredManAutoTask","CredManAutoTask","CredManToolsCheckRecord","",300,"")

  return;
end;

function Boolean GetInvoiceSequence(array record IVVc aIVr,var Longint invfr,var Longint invto,var Date datefr,var Date dateto)
begin
  Boolean res;
  Integer i;
  record IVVc IVr;
  Longint lastsernr;

  res = true;
  for (i=0;i<aIVr.length;i=i+1) begin
    IVr = aIVr[i];
    if (lastsernr!=-1) then begin
      if (IVr.SerNr-1!=lastsernr) then begin
        res = false;
        goto LGetInvoiceSequence;
      end;
    end;
    if (datefr>IVr.TransDate or blank(datefr)) then begin
      datefr = IVr.TransDate;
    end;
    if (dateto<IVr.TransDate or blank(dateto)) then begin
      dateto = IVr.TransDate;
    end;
    lastsernr = IVr.SerNr;
  end;

  IVr = aIVr[0];
  invfr = IVr.SerNr;
  if (aIVr.length>0) then begin
    IVr = aIVr[aIVr.length-1];
  end;
  invto = IVr.SerNr;

LGetInvoiceSequence:;
  GetInvoiceSequence = res;
  return;
end;

global
procedure CredManSendAutoInvoices(array record IVVc aIVr)
begin
  record IVVc nIVr,IVr;
  record CMInvoicingBlock CIb;
  Date td,datefr,dateto;
  Longint invfr,invto;
  record RcVc RepSpec;
  Integer i,oldcomp,ncomp;
  string 255 oldlang;

  BlockLoad(CIb);
  RecordClear(RepSpec);
  ReportDefaults(RepSpec,"IVToMailVClass");
  oldlang = CM_SetCompanyLanguage;

  if (GetInvoiceSequence(aIVr,invfr,invto,datefr,dateto)) then begin
    RepSpec.f2 = invfr & ":" & invto;
    RepSpec.sStartDate = datefr;
    RepSpec.sEndDate = dateto;
    RepSpec.ArtMode = 0;
    if (CIb.AutoInvoiceSend==1) then begin
      RepSpec.flags[1] = 1;
    end else begin
      RepSpec.flags[1] = 0;
    end;
    RepSpec.flags[4] = 1;
    RepSpec.flags[5] = 1;
    RepSpec.flags[6] = 1;
    RepSpec.flags[7] = 1;
    RepSpec.flags[3] = 1;
    IVToMailMn(RepSpec);
  end else begin
    RepSpec.ArtMode = 0;
    if (CIb.AutoInvoiceSend==1) then begin
      RepSpec.flags[1] = 1;
    end else begin
      RepSpec.flags[1] = 0;
    end;
    RepSpec.flags[4] = 1;
    RepSpec.flags[5] = 1;
    RepSpec.flags[6] = 1;
    RepSpec.flags[7] = 1;
    RepSpec.flags[3] = 1;
    for (i=0;i<aIVr.length;i=i+1) begin
      IVr = aIVr[i];
      RepSpec.sStartDate = IVr.TransDate;
      RepSpec.sEndDate = IVr.TransDate;

      RepSpec.f2 = IVr.SerNr;
      IVToMailMn(RepSpec);
    end;
  end;

  CM_ResetCompanyLanguage(oldlang);

  return;
end;

global
procedure CredManAutoInvoiceTask(string args)
begin
  record RcVc RepSpec;
  array record IVVc aIVr;
  Integer i,oldcomp,ncomp;
  Longint invfr,invto;
  record IVVc nIVr,IVr;
  record CMInvoicingBlock CIb;
  Date td,datefr,dateto;
  Time tt;
  
  ncomp = StringToLongint(args);
  oldcomp = CurrentCompany;
  if (oldcomp!=ncomp) then begin
    SetCompany(ncomp,false);
  end;
  RepSpec.d1 = CurrentDate;
  while (qupdating.LoopAndGenLoanAgreementInvoice(RepSpec,nIVr)) begin//nIVr is needed for auto invoicing
    if (nIVr.SerNr>-1) then begin
      aIVr[aIVr.length] = nIVr;
    end;
  end;
/*
  for (i=0;i<aIVr.length;i=i+1) begin
    
  end;
*/
  if (aIVr.length>0) then begin
    threadasync.CredManSendAutoInvoices(aIVr);
  end;
  BlockLoad(CIb);
  if (CIb.AutoInvoiceFlag==1) then begin
    td = CurrentDate;
    tt = CIb.AutoInvoiceTime;
    if (tt<CurrentTime) then begin
      td = AddDay(td,1);
    end;
    RemoveTask("CredManAutoInvoiceTask_comp" & CurrentCompany);
    NewTimedTask2("CredManAutoInvoiceTask_comp" & CurrentCompany,"CredManAutoInvoiceTask","CredManAutoInvoiceTask",CurrentCompany,td,tt,"","");
  end;
  if (CurrentCompany!=oldcomp) then begin
    ResetCompany(oldcomp);
  end;

  return;
end;

global
procedure InitAutoInvoiceTask(string args)
begin
  record CMInvoicingBlock CIb;
  Date td;
  Time tt;
  Integer i,rwcnt,oldcomp,comp;
  record CompaniesBlock Compb;

  oldcomp = CurrentCompany;  
  BlockLoad(Compb);
  rwcnt = MatRowCnt(Compb);    
  for (i=0;i<rwcnt;i=i+1) begin
    comp = i + 1;
    SetCompany(comp,false);
    BlockLoad(CIb);
    if (CIb.AutoInvoiceFlag==1) then begin
      RemoveTask("CredManAutoInvoiceTask");
      td = CurrentDate;
      tt = CIb.AutoInvoiceTime;
      if (tt<CurrentTime) then begin
        td = AddDay(td,1);
      end;
      NewTimedTask2("CredManAutoInvoiceTask_comp" & comp,"CredManAutoInvoiceTask","CredManAutoInvoiceTask",comp,td,tt,"","");
    end;
  end;
  ResetCompany(oldcomp);

  return;
end;

global
updating procedure CheckAndCreateAutoMailFromInvoice(record IVVc IVr)
begin
  record RcVc RepSpec;
  record CMInvoicingBlock CIb;

  BlockLoad(CIb);
  if (CIb.AutoMailsFromInvoices==1) then begin
    RecordClear(RepSpec);
    ReportDefaults(RepSpec,"IVToMailVClass");
    RepSpec.ArtMode = 0;
    RepSpec.flags[1] = 1;
    RepSpec.flags[4] = 1;
    RepSpec.flags[5] = 1;
    RepSpec.flags[6] = 1;
    RepSpec.flags[7] = 0;
    RepSpec.flags[3] = 1;
    RepSpec.sStartDate = IVr.TransDate;
    RepSpec.sEndDate = IVr.TransDate;

    RepSpec.f2 = IVr.SerNr;
    IVToMailMn(RepSpec);
  end;

  return;
end;