remote inner procedure CredManVc_PasteType(var record CredManVc);
external inner function roundmode SetRoundModeD(Integer);
external  procedure CredManSetDatesCust(var record CredManVc,Boolean);
external procedure CalculateSuretyAge(record B2BLoanApplicationVc,Integer);
external inner updating function Boolean AddContactCUDsmRemote(record CUVc,string);
external inner updating procedure SendCustomerLetterWithDetails(record RCVc,string,string,string);
external inner function Boolean GetNextCustNr(var string);
external inner function string 255 CredManCustEmail(record CUVc);
external procedure BuildCredManPayPlanCust(record CredManVc,var record CredManPayPlanVc,record CredManSetBlock,Boolean,Boolean);
external procedure BuildCredManInfoMatrix(record CredManVc,record CredManPayPlanVc,record CredManSetBlock,var record SMVc);
external inner function string 255 StrReplace(string,string,string);
external inner function string 255 LetVcDoReplaceToken(record RcVc,string);
external function string 255 NovitiGetEmailSender();
external inner function Boolean CheckAttachedFilesSizeToLetter(record LetVc);
external inner procedure FindUserMailboxName(string,var string,var string);

global
function Boolean InsertContactName(var record B2BLoanApplicationVc LAr)
begin
  Boolean res;
  record CUVc CUr;
  record ContactRelVc CRr;
  
  CRr.ContactName = LAr.ContactName;
  CRr.CustCode = LAr.CustCode;
  if (ReadFirstKey("Contact",CRr,2,true)) then begin
    CUr.Code = CRr.ContactCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      LAr.ContactPhoneNo = CUr.Phone;
      LAr.ContactMobile = CUr.Mobile;
      LAr.ContacteMail = CUr.eMail;
      res = true;
    end;
  end;

  InsertContactName = res;
  return;
end;

procedure InsertAdditionalContacts(var record B2BLoanApplicationVc LAr)
begin
  record CUVc CUr;
  record ContactRelVc CRr;
  record CMApplicationSetBlock ASb;
  
  BlockLoad(ASb);
  if (nonblank(ASb.CEOTitle) or nonblank(ASb.OwnerTitle)) then begin
    while (LoopKey("CustContactCode:" & LAr.CustCode,CRr,1,true)) begin
      if (SetInSet(ASb.OwnerTitle,CRr.JobTitle)) then begin
        LAr.OwnerCustCode = CRr.ContactCode;
        LAr.OwnerName = CRr.ContactName;
      end;
      if (SetInSet(ASb.CEOTitle,CRr.JobTitle)) then begin
        LAr.CEOCustCode = CRr.ContactCode;
        LAr.CEOName = CRr.ContactName;
      end;
    end;
  end;  

  return;
end;

global
function Boolean InsertCustomerInB2BApplication(var record B2BLoanApplicationVc LAr,var string warning)
begin
  record CUVc CUr;
  Boolean res;
  record BankVc Bankr;

  CUr.Code = LAr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    LAr.CustName = CUr.Name;
    LAr.PhoneNo = CUr.Phone;
    LAr.eMail = CUr.eMail;
    LAr.ContactName = CUr.Person;
    LAr.Addr0 = CUr.InvAddr0;
    LAr.Addr1 = CUr.InvAddr1;
    LAr.Addr2 = CUr.InvAddr2;
    LAr.Addr3 = CUr.InvAddr3;
    LAr.Addr4 = CUr.InvAddr4;
    LAr.BankCode = CUr.AccOperator;
    Bankr.Code = CUr.AccOperator;
    if (ReadFirstMain(Bankr,1,true)) then begin
      LAr.BankName = Bankr.Name;
    end;
    LAr.BankAccount = CUr.BankAccount;
    warning = CUr.WarnText1;
    InsertContactName(LAr);
    InsertAdditionalContacts(LAr);
    res = true;
  end;
  
  InsertCustomerInB2BApplication = res;
  return;
end;

global
function Boolean InsertSuretyInB2BApplication(var record B2BLoanApplicationVc LAr,Integer num,var string warning)
begin
  record CUVc CUr;
  Boolean res;

  CUr.Code = GetFieldValueByName(LAr,"SuretyProvider" & num,-1);
  if (ReadFirstMain(CUr,1,true)) then begin
    SetFieldValueByName(LAr,"Surety" & num & "Name",CUr.Name,-1);
    SetFieldValueByName(LAr,"Surety" & num & "Position",CUr.JobDesc,-1);
    SetFieldValueByName(LAr,"Surety" & num & "Phone",CUr.Phone,-1);
    SetFieldValueByName(LAr,"Surety" & num & "eMail",CUr.eMail,-1);
    if (num<4) then begin
      SetFieldValueByName(LAr,"Surety" & num & "ID",CUr.RegNr1,-1);
      SetFieldValueByName(LAr,"Surety" & num & "AccessToDataUntil",CUr.AccessToDataUntil,-1);
      SetFieldValueByName(LAr,"Surety" & num & "Addr0",CUr.InvAddr0,-1);
      SetFieldValueByName(LAr,"Surety" & num & "Addr1",CUr.InvAddr1,-1);
      SetFieldValueByName(LAr,"Surety" & num & "Addr2",CUr.InvAddr2,-1);
      SetFieldValueByName(LAr,"Surety" & num & "Addr3",CUr.InvAddr3,-1);
      SetFieldValueByName(LAr,"Surety" & num & "Addr4",CUr.InvAddr4,-1);
      CalculateSuretyAge(LAr,num);
    end;
    warning = CUr.WarnText1;
    //UpdateSuretyScoring(LAr,CUr.Code);

    res = true;
  end;
  
  InsertSuretyInB2BApplication = res;
  return;
end;

global
function Boolean InsertManagerInB2BApplication(var record B2BLoanApplicationVc LAr)
begin
  record UserVc Userr;
  record GlobalUserVc GlobalUserr;
  Boolean res;
  
  Userr.Code = LAr.Manager;
  if (ReadFirstMain(Userr,1,true)) then begin
    LAr.ManagerName = Userr.Name;
    res = true;
  end else begin
    GlobalUserr.Code = LAr.Manager;
    if (ReadFirstMain(GlobalUserr,1,true)) then begin
      LAr.ManagerName = Userr.Name;
      res = true;
    end;
  end;

  InsertManagerInB2BApplication = res;
  return;
end;

global
procedure B2BLoanApp_ContactSClassOnOpenRemote(string custcode,var Array string acontact,var Integer acnt)
begin
  Boolean found;
  string 255 tstr,maincontact,spacertstr;
  record CUVc CUr;
  record CUVc ContactCUr;
  record ContactRelVc ContactRelr;

  spacertstr = "#";
/*
  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin
    if (nonblank(CUr.Person)) then begin
      tstr = CUr.Person;
      maincontact = CUr.Person;
//       M4PadString(CUr.Person,60," ",false,tstr);
      tstr = CUr.Person;
      if (FindCustomerRelation(CUr.Code,CUr.Person,ContactCUr)) then begin
        tstr = tstr & spacertstr & ContactCUr.Title;
      end else begin
        tstr = tstr & spacertstr & CUr.Title;
      end;
      acontact[acnt] = tstr;
      acnt = acnt + 1;
    end;
  end;
*/
  ContactRelr.CustCode = custcode;
  found = true;
  while (LoopKey("CompKey",ContactRelr,1,found)) begin
    if ((ContactRelr.CustCode==custcode) or (blank(custcode))) then begin
      if (ContactRelr.ContactName!=maincontact) then begin
        if (ContactRelr.Invalid==0) then begin
          ContactCUr.Code = ContactRelr.ContactCode;
          if (ReadFirstMain(ContactCUr,1,true)) then begin
            if (ContactCUr.blockedFlag==0) then begin
//               M4PadString(ContactCUr.Name,60," ",false,tstr);
              tstr = ContactCUr.Code & spacertstr;
              tstr = tstr & ContactCUr.Name;
              if (nonblank(ContactCUr.Title)) then begin 
                tstr = tstr & spacertstr & ContactCUr.Title;
              end; 
              acontact[acnt] = tstr;
              acnt = acnt + 1;
            end;
          end;
        end;
      end;
    end else begin
      found = false;
    end;
  end;
  return;
end;

global
procedure PasteSuretyInCredMan(var record CredManVc CredManr,string code,Integer num,var string warning)
begin
  record CUVc CUr;
  
  warning = "";
  CUr.Code = code;
  if (ReadFirstMain(CUr,1,true)) then begin

    SetFieldValueByName(CredManr,"SuretyProvider" & num,CUr.Code,-1);
    SetFieldValueByName(CredManr,"Surety" & num & "Name",CUr.Name,-1);
    SetFieldValueByName(CredManr,"Surety" & num & "Position",CUr.JobDesc,-1);
    SetFieldValueByName(CredManr,"Surety" & num & "Phone",CUr.Phone,-1);
    SetFieldValueByName(CredManr,"Surety" & num & "eMail",CUr.eMail,-1);
    if (num<4) then begin
      SetFieldValueByName(CredManr,"Surety" & num & "Mobile",CUr.Mobile,-1);
      SetFieldValueByName(CredManr,"Surety" & num & "ID",CUr.RegNr1,-1);
      SetFieldValueByName(CredManr,"Surety" & num & "Addr0",CUr.InvAddr0,-1);
      SetFieldValueByName(CredManr,"Surety" & num & "Addr1",CUr.InvAddr1,-1);
      SetFieldValueByName(CredManr,"Surety" & num & "Addr2",CUr.InvAddr2,-1);
      SetFieldValueByName(CredManr,"Surety" & num & "Addr3",CUr.InvAddr3,-1);
      SetFieldValueByName(CredManr,"Surety" & num & "Addr4",CUr.InvAddr4,-1);
    end;
    warning = CUr.WarnText1;
  end;

  return;
end;

global
procedure PasteBOEInCredMan(var record CredManVc CredManr,string code,Integer num)
begin
  record CUVc CUr;
  
  CUr.Code = code;
  if (ReadFirstMain(CUr,1,true)) then begin
    SetFieldValueByName(CredManr,"BOE" & num & "Code",CUr.Code,-1);
    SetFieldValueByName(CredManr,"BOE" & num & "Name",CUr.Name,-1);
    SetFieldValueByName(CredManr,"BOE" & num & "Position",CUr.JobDesc,-1);
    SetFieldValueByName(CredManr,"BOE" & num & "Phone",CUr.Phone,-1);
    SetFieldValueByName(CredManr,"BOE" & num & "eMail",CUr.eMail,-1);
  end;

  return;
end;

global
procedure PasteBOESignerInCredMan(var record CredManVc CredManr,string code,Integer num)
begin
  record CUVc CUr;
  record ContactRelVc CRr;
  
  CRr.ContactName = GetFieldValueByName(CredManr,"BOE" & num & "Signer",-1);
  CRr.CustCode = GetFieldValueByName(CredManr,"BOE" & num & "Code",-1);
  if (ReadFirstKey("Contact",CRr,2,true)) then begin
    CUr.Code = CRr.ContactCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      SetFieldValueByName(CredManr,"BOE" & num & "Position",CUr.JobDesc,-1);
    end;
  end;

  return;
end;

global
procedure PasteSuretyInBOESurety(var record BOESuretyVc BSr,string code,Integer num)
begin
  record CUVc CUr;
  
  CUr.Code = code;
  if (ReadFirstMain(CUr,1,true)) then begin
    SetFieldValueByName(BSr,"SuretyProvider" & num,CUr.Code,-1);
    SetFieldValueByName(BSr,"Surety" & num & "Name",CUr.Name,-1);
    SetFieldValueByName(BSr,"Surety" & num & "Position",CUr.JobDesc,-1);
    SetFieldValueByName(BSr,"Surety" & num & "Phone",CUr.Phone,-1);
    SetFieldValueByName(BSr,"Surety" & num & "eMail",CUr.eMail,-1);
  end;

  return;
end;


global
updating function Boolean B2BLoanAppCreateCredMan(var record B2BLoanApplicationVc LAr,var record CredManVc CredManr,Boolean storef)
begin
  record CUVc CUr;
  Boolean res;
  record CMOrderClassBlock OCb;
  record CredManTypeVc CMTr;
  string 255 warning;

  CUr.Code = LAr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    BlockLoad(OCb);
    RecordNew(CredManr);
    CredManr.SerNr = NextSerNr("CredManVc",CurrentDate,-1,false,"");
    CredManr.Type = LAr.Type;
    CredManVc_PasteType(CredManr);
    CredManr.IntRate = LAr.InterestRate;
    CredManr.PrincipleDelayInterest = CredManr.IntRate;
    CredManr.CustCode = LAr.CustCode;
    CredManr.Addr0 = LAr.CustName;
    CredManr.SalesMan = LAr.Manager;
    CredManr.InvSum4 = LAr.Sum;
    CredManr.OrderClass = OCb.CMDefOrderClass;
    CredManr.startDate = CurrentDate;//LAr.StartDate;
    CredManr.InstalmentMonths = LAr.Months;
    CMTr.Code = LAr.Type;
    if (ReadFirstMain(CMTr,1,true)) then begin
      CredManr.AnnualRate = CMTr.AnnualRate;
      CredManr.PayDeal = CMTr.PayDeal;
      CredManr.Classifications = CMTr.Classifications;
      CredManr.OverdueRateType = CMTr.OverdueRateType;
      Credmanr.LoanType = CMTr.LoanType;
      CredManr.RealInterestFlag = CMTr.RealInterestFlag;
    end else begin  
      CredManr.PayDeal = CUr.PayDeal;
    end;
    CredManr.ClientContact = LAr.ContactName;
    CredManr.MonthlyPaymentDay = LAr.MonthlyPaymentDay;
    CredManr.DepositSum = Round(CredManr.DepositPrc/100 * CredManr.InvSum4,SetRoundModeD(2));
    CredManSetDatesCust(CredManr,true);
    CredManr.BankCode = LAr.BankCode;
    CredManr.BankName = LAr.BankName;
    CredManr.BankAccount = LAr.BankAccount;
    CredManr.PrincipleDelayMonths = LAr.PrincipleDelayMonths;
    CredManr.PrincipleDelayInterest = LAr.PrincipleDelayInterest;
    if (CredManr.PrincipleDelayInterest==0) then begin
      CredManr.PrincipleDelayInterest = CredManr.IntRate;
    end;
    CredManr.MaxMonthlyPayment = LAr.MaxMonthlyPayment;
    CredManr.LoanApplication = LAr.SerNr;
//Pasting sureties
    PasteSuretyInCredMan(CredManr,GetFieldValueByName(LAr,"SuretyProvider" & 1,-1),1,warning);
    PasteSuretyInCredMan(CredManr,GetFieldValueByName(LAr,"SuretyProvider" & 2,-1),2,warning);
    PasteSuretyInCredMan(CredManr,GetFieldValueByName(LAr,"SuretyProvider" & 3,-1),3,warning);
    if (storef) then begin
      if (RecordInsert(CredManr,true)) then begin
        LAr.OrderClass = OCb.AcceptedAppOrderClass;

        res = true;
        CreateRecordLink(LAr,CurrentCompany,CredManr,CurrentCompany);
        CreateRecordLink(CredManr,CurrentCompany,LAr,CurrentCompany);
      end;
    end else begin
      res = true;
    end;
  end;

  B2BLoanAppCreateCredMan = res;
  return;
end;

global
updating function Boolean MakeActFromB2BLoanApp(var record B2BLoanApplicationVc LAr,var record ActVc Actr)
begin
  Integer curcomp;
  Boolean res;

  if (ReadFirstMain(LAr,0,true)) then begin end;  
  curcomp = CurrentCompany;
  Actr.Invalid = 0;
  Actr.TodoFlag = 1;
  Actr.CUCode = LAr.CustCode;
  Actr.Contact = LAr.ContactName;
  Actr.CUName = LAr.CustName;
  Actr.Phone = LAr.PhoneNo;
  Actr.TransDate = CurrentDate;
  Actr.MainPersons = LAr.Manager;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");  
  if (RecordStore(Actr,false)) then begin 
    CreateRecordLink(Actr,curcomp,LAr,curcomp);  
    CreateRecordLink(LAr,curcomp,Actr,curcomp);  
    res = true;
  end;  
  MakeActFromB2BLoanApp = res;
  return;
end;

procedure AddBankAccountToArr(string bankcode,string bankaccount,var array string arr_bankaccount)
begin
  string 255 tstr;

  tstr = bankcode & "#";
  tstr = tstr & bankaccount;
  arr_bankaccount[arr_bankaccount.length] = tstr;

  return;
end;

global
procedure BankAccountSClassOnOpenWindowRemote(string custcode,var array string arr_bankaccount)
begin
  record CUVc CUr;
  record CUBankAccVc BAr;
  row CUBankAccVc BArw;
  Integer i,rwcnt;

  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin
    AddBankAccountToArr(CUr.AccOperator,CUr.BankAccount,arr_bankaccount);
  end;
  BAr.CustCode = custcode;
  if (ReadFirstMain(BAr,1,true)) then begin
    rwcnt = MatRowCnt(BAr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(BAr,i,BArw);
      AddBankAccountToArr(BArw.BankCode,BArw.BankAccount,arr_bankaccount);
    end;
  end;
  return;
end;

updating function Boolean CreateAndLinkContactPerson(string custcode,string email,var string contactcode)
begin
  record CUVc CUr,ContactCUr;
  string 255 tstr;
  Boolean res;
 
  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin
    RecordNew(ContactCUr);
    if (GetNextCustNr(tstr)) then begin end;
    ContactCUr.Code = tstr;
    ContactCUr.eMail = email;
    if (RecordInsert(ContactCUr,true)) then begin
      if (AddContactCUDsmRemote(CUr,ContactCUr.Code)) then begin
        res = true;
        contactcode = ContactCUr.Code;
      end;
    end;
  end;

  CreateAndLinkContactPerson = res;
  return;
end;

updating function Boolean AddSuretyToApplication(var record B2BLoanApplicationVc LAr,string contactcode)
begin
  Boolean res;
  Integer scnt;
  record CMOrderClassBlock OCb;
  string 255 warning;
  
  if (nonblank(contactcode)) then begin
    scnt = 1;
    while (nonblank(GetFieldValueByName(LAr,"SuretyProvider" & scnt,-1))) begin
      scnt = scnt + 1;
    end;
    if (scnt<7) then begin
      BlockLoad(OCb);//loading this block twice....sorry, I know
      SetFieldValueByName(LAr,"SuretyProvider" & scnt,contactcode,-1);
      InsertSuretyInB2BApplication(LAr,scnt,warning);
      LAr.SuretyCnt = scnt;
      LAr.OrderClass = OCb.OtherWebAppClass;
      res = true;
    end;
  end;

  AddSuretyToApplication = res;
  return;
end;

updating procedure SendSuretyInvitationMail(Longint sernr,string email,string contactcode)
begin
  record InvitationRequestVc IRr;
  record CMApplicationSetBlock CMb;
  record RcVc RepSpec;
  
  BlockLoad(CMb);
  RecordNew(IRr);
  IRr.UUID = MakeUUID;
  IRr.TransDate = CurrentDate;
  IRr.TransTime = CurrentTime;
  IRr.LoanAppNr = sernr;
  IRr.ContactCode = contactcode;
  if (RecordInsert(IRr,true)) then begin
    RepSpec.searchstr = "?sess=" & IRr.UUID & "&cc=" & contactcode;
    RepSpec.f1 = contactcode;
    SendCustomerLetterWithDetails(RepSpec,CMb.SuretyInviteLetter,"",email);
  end;

  return;
end;

global
updating function Boolean SendSuretyInvitation(record RcVc RepSpec,var record B2BLoanApplicationVc LAr)
begin
  Boolean res;
  string 255 contactcode;
  record B2BLoanApplicationVc oldLAr;

  LAr.SerNr = RepSpec.long1;
  if (ReadFirstMain(LAr,1,true)) then begin
    if (CreateAndLinkContactPerson(LAr.CustCode,RepSpec.f1,contactcode)) then begin
      RecordCopy(oldLAr,LAr);
      //add surety
      if (AddSuretyToApplication(LAr,contactcode)) then begin
        //if (RecordUpdate(oldLAr,LAr,true)==0) then begin
          SendSuretyInvitationMail(LAr.SerNr,RepSpec.f1,contactcode);
          res = true;
        //end;
      end;
    end;
  end;


  SendSuretyInvitation = res;
  return;
end;

function string 255 GetLoanAppField(record RcVc RepSpec,string field)
begin
  record B2BLoanApplicationVc LAr;
  string 255 res;
  record CredManVc CredManr;
    
  LAr.SerNr = RepSpec.long1;
  if (ReadFirstMain(LAr,1,true)) then begin
    switch (field) begin
      case "Sum":        res = LAr.Sum;
      case "Months":     res = LAr.Months;
      case "CurncyCode": res = RepSpec.f3;
    end;
  end;

  GetLoanAppField = res;
  return;
end;


function string 255 ConvertScheduleRow(record RcVc RepSpec,string token)
begin
  string 255 templ,line,res;
  record B2BLoanApplicationVc LAr;
  record CredManVc CredManr;
  record CredManSetBlock CredManSetb;
  record CredManPayPlanVc CredManPayPlanr;
  LongInt i,rwcnt;
  record SMVc SMr;
  row SMVc SMrw;
  val curbal;
  record CMApplicationSetBlock CMb;
  Longint pos;
  record LTxtVc LTxtr;

  BlockLoad(CMb);
  LTxtr.Code = CMb.EmailOfferTextRow;
  pos = 0;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    while (pos<SizeTextCnt(LTxtr)) begin
      templ = templ & StringFromText(LTxtr,pos,255);
      pos = pos + 255;
    end;
  end;
  if (nonblank(templ)) then begin
    LAr.SerNr = RepSpec.long1;
    if (ReadFirstMain(LAr,1,true)) then begin
      if (qupdating.B2BLoanAppCreateCredMan(LAr,CredManr,false)) then begin
        BlockLoad(CredManSetb);
        BuildCredManPayPlanCust(CredManr,CredManPayPlanr,CredManSetb,true,true);
        curbal = CredManr.InvSum4;
        BuildCredManInfoMatrix(CredManr,CredManPayPlanr,CredManSetb,SMr);
        rwcnt = MatRowCnt(SMr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(SMr,i,SMrw);
          curbal = curbal - SMrw.DebVal;
          line = StrReplace(templ,"F_ROWNR",i+1);
          line = StrReplace(templ,"F_INVDATE",SMrw.TransDate);
          line = StrReplace(line,"F_CREDBAL",curbal);
          line = StrReplace(line,"F_CREDINSTAL",SMrw.DebVal);
          line = StrReplace(line,"F_CREDFEES",SMrw.DebVal2);
          line = StrReplace(line,"F_CREDINTEREST2",SMrw.CredVal);
          line = StrReplace(line,"F_CREDINVTOT",SMrw.CurDebVal);
          res = res & line;
        end;
      end;
    end;
  end;
  ConvertScheduleRow = res;
  return;
end;

function string 255 GetScheduleTotalAmount(record RcVc RepSpec,string token)
begin
  string 255 templ,line,res;
  
  templ = right(token,len(token)-11);
  switch (token) begin
    case "interest": res = RepSpec.vals1;
    case "fees":     res = RepSpec.vals0;
    case "tot":      res = RepSpec.vals2;
  end;

  GetScheduleTotalAmount = res;
  return;
end;

function string 255 LetVcReplaceTokenCust(record RcVc RepSpec,string token)
begin
  string 255 res;

  switch (token) begin
    case "F_PERIODLENGTH":     res = GetLoanAppField(RepSpec,"Months");
    case "F_VALUTA":           res = GetLoanAppField(RepSpec,"CurncyCode");
    case "F_SUMMA":            res = GetLoanAppField(RepSpec,"Sum");
    case "F_CREDTOTINT":       res = GetScheduleTotalAmount(RepSpec,"interest");
    case "F_CREDTOTPAY":       res = GetScheduleTotalAmount(RepSpec,"tot");
    case "F_CREDTOTFEES":      res = GetScheduleTotalAmount(RepSpec,"fees");
    case "schedulerow":        res = ConvertScheduleRow(RepSpec,token);
    case "F_NUMMER":           res = RepSpec.f8;
    
  otherwise
    res = LetVcDoReplaceToken(RepSpec,token);
  end;

  LetVcReplaceTokenCust = res;
  return;
end;

global
function string 255 LtxtVcReplaceToken(record LTxtVc LTxtr,record RcVc RepSpec,string token)
begin
  LtxtVcReplaceToken = LetVcReplaceTokenCust(RepSpec,token);
end;

global
function string 255 EMailQueVcReplaceToken(record EMailQueVc EMailQuer,record RcVc RepSpec,string token)
begin
  EMailQueVcReplaceToken = LetVcReplaceTokenCust(RepSpec,token);
end;
global
function string 255 MailVcReplaceToken(record MailVc Mailr,record RcVc RepSpec,string token)
begin
  MailVcReplaceToken = LetVcReplaceTokenCust(RepSpec,token);
end;

global
function string 255 InvLtxtVcReplaceToken(record LTxtVc LTxtr,record RcVc RepSpec,string token)
begin
  string 255 res;

  switch (token) begin
    case "F_DATUM": res = RepSpec.sStartDate;
    case "F_NUMMER": res = RepSpec.f8;
    case "F_OFFICIALSERNO": res = RepSpec.f9;
    case "F_ORGATTBETALA": res = RepSpec.vals0;
    case "F_VALUTA": res = RepSpec.f1;
    case "F_FAKTURANUMMER": res = RepSpec.long2;
    case "F_EGENEMAIL": res = RepSpec.f2;
    case "F_EGENTEL": res = RepSpec.f3;
    case "F_EGETNAMN": res = RepSpec.f4;
    case "F_EGETORGNR": res = RepSpec.f5;
    case "F_EGETMOMSNR": res = RepSpec.f6;
    case "F_EGENADRESS": res = RepSpec.f7;
    case "F_RATEVAL": res = RepSpec.vals1;
    case "F_PRINCVAL": res = RepSpec.vals2;
    case "F_LATEFEEVAL": res = RepSpec.vals3;
    case "F_ABOVEHIDDENFULL": res = RepSpec.vals4;
    case "F_TOPAY": res = RepSpec.f10;
    case "F_OPENAMOUNT": res = RepSpec.f11;
    case "F_TOPAY2": res = RepSpec.f12;
    case "F_TOPAY2_TEXT": res = RepSpec.f13;
    case "F_CREDITIVNO": res = RepSpec.f14;
    case "F_SALESMANJOB": res = RepSpec.f15;
    otherwise
      res = LetVcReplaceTokenCust(RepSpec,token);
  end;

  InvLtxtVcReplaceToken = res;
end;

global
function string 255 InvMailVcReplaceToken(record MailVc Mailr,record RcVc RepSpec,string token)
begin
  record LTxtVc LTxtr;
  InvMailVcReplaceToken = InvLtxtVcReplaceToken(LTxtr,RepSpec,token);
end;


global
updating function Boolean StoreEmailRecord(record LTxtVc LTxtr,var record MailVc Mailr,record RcVc RepSpec)
begin
  Boolean res;
  record Attach2Vc Attachr;
  record RLinkVc RLr;
  area htmlarea,html1,html2,reshtml;
  record LTxtVc LTxt2r;
  Longint pos;
  
  Mailr.SerNr = NextSerNr("MailVc",CurrentDate,-1,false,"");
  if (RecordInsert(Mailr,true)) then begin
    if (ReadFirstMain(Mailr,1,true)) then begin
      if (ReadRecordLink(Mailr,1,Attachr,RLr)) begin
        //RecordRemove(RLr);
      end;    
      //CopyRecordLinks(LTxtr,Mailr);
      if (Mailr.HtmlFlag==1) then begin
        if (ReadRecordLink(LTxtr,1,Attachr,RLr)) begin
          AddAttachFileToArea(Attachr,htmlarea,false);
        //AddHtmlRecordToText(LTxtr,LTxt2r);
          pos = FindStringInArea("<!--schedulerow-->",htmlarea);
          if (pos>0) then begin
            GetAreaFromArea(htmlarea,0,pos,html1);
            GetAreaFromArea(htmlarea,pos+18,GetAreaLength(htmlarea)-pos-18,html2);
            AddAreaToArea(html1,reshtml);
            AddTextToArea("?schedulerow?",reshtml);
            AddAreaToArea(html2,reshtml);
            AddAreaToTextField(reshtml,LTxt2r);
            AddToHtmlRecord(Ltxt2r,true,Mailr,true,true);
            ParseHtmlField(Mailr,RepSpec,"MailVcReplaceToken");
          end;
        end;
      end;
      res = true;
    end;
  end;

//AddStringToHTML
//AddHTMLRecordToHTMLRecord
//StringInHTML
//AddToRecordHTML

  StoreEmailRecord = res;
  return;
end;

global
procedure SendEmailWithStdTextFromUser(string txt,record RCVc RepSpec,string email,var record MailVc Mailr,record B2BLoanApplicationVc LAr)
begin
  row MailVc Mailrw;
  string 255 tstr;
  LongInt pos,l;
  Integer i,emcnt,cscnt;
  area a;
  record LTxtVc LTxtr;
  string 255 mailboxnr,mailboxname;
  record IVMailBlock IVMailr;
  record CredManVc CredManr;
  record CredManSetBlock CredManSetb;
  record CredManPayPlanVc CredManPayPlanr;
  LongInt rwcnt;
  record SMVc SMr;
  row SMVc SMrw;
  val tot,interest,fees;
  
  LTxtr.Code = txt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    RecordNew(Mailr);
    Mailr.Header = LTxtr.Comment;    
    FindUserMailboxName(CurrentUser,mailboxnr,mailboxname);
    if (nonblank(mailboxname)) then begin
      ClearRow(Mailr,Mailrw,1);
      Mailrw.RowTyp = kMailRowTypeFrom;
      Mailrw.AddrCode = mailboxname;
      mailrw.Mailbox = StringToLongInt(mailboxnr);
      MatRowPut(Mailr,0,Mailrw);
    end else begin
      ClearRow(Mailr,Mailrw,0);
      Mailrw.RowTyp = 1;
      BlockLoad(IVMailr);
      Mailrw.AddrCode = IVMailr.EmailSender;
      MatRowPut(Mailr,0,Mailrw);
    end;
    ClearRow(Mailr,Mailrw,1);
    Mailrw.RowTyp = kMailRowTypeTo;
    Mailrw.AddrCode = email;
    MatRowPut(Mailr,1,Mailrw);

    if (qupdating.B2BLoanAppCreateCredMan(LAr,CredManr,false)) then begin
      BlockLoad(CredManSetb);
      BuildCredManPayPlanCust(CredManr,CredManPayPlanr,CredManSetb,true,true);
      BuildCredManInfoMatrix(CredManr,CredManPayPlanr,CredManSetb,SMr);
      rwcnt = MatRowCnt(SMr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(SMr,i,SMrw);
        fees = fees + SMrw.DebVal2;
        interest = interest + SMrw.CredVal;
        tot = tot + SMrw.CurDebVal;
      end;
      RepSpec.f3 = CredManr.CurncyCode;
      RepSpec.vals0 = fees;
      RepSpec.vals1 = interest;
      RepSpec.vals2 = tot;
    end;
    if (LTxtr.HtmlFlag==0) then begin
      ParseTextField(a,LTxtr,RepSpec,"LtxtVcReplaceToken");
      l = GetAreaLength(a);
      pos = 0;
      while (pos<l) begin
        tstr = GetStringFromArea(a,pos,255);
        AddToText(tstr,Mailr); 
        pos = pos+255;
      end;
    end else begin
      Mailr.HtmlFlag = 1;
    end;

    if (CheckAttachedFilesSizeToLetter(LTxtr)) then begin
      if (qupdating.StoreEmailRecord(LTxtr,Mailr,RepSpec)) then begin
      end;
    end;
  end;
  
  return;
end;

global
procedure B2BLoanApplicationMakeEmailOffer_Remote(record B2BLoanApplicationVc LAr,var record MailVc Mailr)
begin
  record RcVc RepSpec;
  record CUVc CUr;
  string 255 email;
  record CMApplicationSetBlock CMb;
  
  RepSpec.f1 = LAr.CustCode;
  RepSpec.long1 = LAr.SerNr;
  CUr.Code = LAr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    email = CredManCustEmail(CUr);
  end;
  if (nonblank(email)) then begin
    BlockLoad(CMb);
    if (nonblank(CMb.EmailOfferText)) then begin
      SendEmailWithStdTextFromUser(CMb.EmailOfferText,RepSpec,email,Mailr,LAr);
    end;
  end;

  return;
end;

global
procedure InsertB2BLoanApplicationDocSignerName(var record B2BLoanApplicationVc LAr,Integer num)
begin
  Boolean res;
  record CUVc CUr;
  record ContactRelVc CRr;
  
  CRr.ContactName = GetFieldValueByName(LAr,"Surety" & num & "Signer",-1);
  CRr.CustCode = GetFieldValueByName(LAr,"SuretyProvider" & num,-1);
  if (ReadFirstKey("Contact",CRr,2,true)) then begin
    CUr.Code = CRr.ContactCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      SetFieldValueByName(LAr,"Surety" & num & "Position",CUr.JobDesc,-1);
    end;
  end;

  return;
end;
