external updating procedure DoBuyOutAgreement(record CredManVc,var record IVVc);
external inner procedure CredManUpdate(var record CredManVc,Integer,string);
external inner procedure CredManSumup(var record CredManVc);
external inner procedure CredManVc_PasteCurncyCode(var record CredManVc);
external procedure BuildCredManPayPlanCust(record CredManVc,var record CredManPayPlanVc,record CredManSetBlock,Boolean,Boolean);
external procedure CheckBuyOutAgreement(record CredManVc,var record RcVc);
external inner function Boolean PasteCustInCredMan(var record CredManVc);
external inner procedure CredManVc_PasteType(var record CredManVc);
external inner function Integer CreateCreditNoteIV(record IVVc,Integer,var record IVVc,string,Boolean);
//external updating procedure PrintMultiDocDocument(string,string,string,Integer,Boolean,string);
//external updating procedure PrintMultiDocDocument2(string,string,string,Integer,Boolean,string,record RcVc);
external inner function string 60 AddObjectToObjectList(string,string);
external inner procedure VIVc_PasteInvDate(var record VIVc);
external inner procedure VIDDefault(Integer,string,var record VIVc);
external inner function Boolean VIVc_PasteAccNumber(var record VIVc,string,Boolean,Integer);
external inner function Boolean VIVc_PasteVECode(var record VIVc,Integer,Boolean,Boolean,var string);
external inner procedure VIVc_PastePayDeal(var record VIVc);
external inner procedure VICalcVals(var record VIVc);
external inner procedure VISumup(record VIVc,var val);
external updating procedure CreateSingleAgreementInvoice(record CredManVc,Date,var record IVVc,string);
external inner procedure IVVc_PasteInvDate(var record IVVc,record LocalMachineBlock,var Integer,var Integer);
external updating procedure ReceiptEntryCreateReceipts(record SMVc,Boolean,var val);
external updating procedure CreateCredHist(Longint,Integer,string,val,Integer,string,Date,Longint,Date,var Longint,Date,Date,Integer,Longint,val,Longint,val);
external updating procedure UpdateCredHistBalancePartialBuyout(Longint,Longint);
external inner procedure PrintEBSDocument(string,string,record RcVc,string,string,var area);
external inner procedure OPPastePayMode(var record OPVc);
external inner function Boolean PasteInvIn2OPr(var record OPVc,Integer,Date,Integer,val,var string,Boolean,var Boolean);
external inner function Boolean PasteInvIn2IPr(var record IPVc,Integer,Date,var val,Boolean,var Boolean);
external inner procedure IPPastePayMode(var record IPVc);
external inner procedure OPVc_PasteRecVal(var record OPVc,Integer);
external updating procedure CheckAndCreateAutoMailFromInvoice(record IVVc);
external procedure GenerateAgreementSchedule(record CredManVc,Boolean);
external inner function Boolean ExternalDocumentEnabled(string);
external updating procedure PrintCredManDocument(string,string,record CredManVc,Integer,Boolean,string);
external inner procedure GetCurUser(var record UserVc);
external updating procedure CreateProlongInvoice(record CredManVc,var record IVVc);
external inner function string 50 NextLegalSerNr(string,LongInt,Date,string,string,string);
external function Boolean GetCredLegalNrLine(string,string,Date,string,string,var row CredLegalInvNrBlock,Integer);
external procedure FindListCredLegalSerNr(string,string,string,string,string,Integer,var array string);
external procedure BuildCredManInfoMatrix(record CredManVc,record CredManPayPlanVc,record CredManSetBlock,var record SMVc);
external updating procedure RecreateAgreementDocument(var record AgreementDocVc,Boolean);
external function val GetRateAmount(record CredManVc,val,Integer,Date,Date,val,Boolean,Boolean);
external function Boolean FindCEOContact(string,var record CUVc);
external updating procedure GetCustomerLoanAmounts2(var record IPVc,var integer,string,var string,var val,string,boolean,string,string,var vector Boolean,Date,Longint);
external function string 255 CM_GetCredManTypePurchItemAccount2(record CredManVc,string,Boolean);
external updating procedure CreatePauseRecord(Longint,Date,val,val,val,Integer);
external updating procedure CreateProlongRecord(Longint,Date,val,Integer);
external function Integer GetProlongMonths(record CredManVc);
external updating procedure CreateRateChangeRecord(Longint,Date,val,Integer);
external function Date GetLastInvoiceDate(record CredManVc,Date);
external procedure GetCredManOverdueInvoices(record CredManVc,record CredManSetBlock,Date,Date,var Integer,var val,var array string,Boolean,Boolean);
external procedure SetupLoanInvoice(record CredManVc,record CredManSetBlock,var record IVVc,Date,Date,Date,Boolean,Boolean,string,Integer,Boolean);
external procedure AddLateFees(record CredManVc,record CredManSetBlock,var record IVVc,Integer,val,array string);
external procedure SetupOverdueLangCode(var record IVVc,record CredManVc);
external updating procedure StoreLoanInvoice(var record IVVc,record CredManVc);
external procedure CM_AddPrepayments(var record IVVc,record CredManVc,record CMInvoicingBlock);
external procedure SetupInvoiceRowAndAdd(record CredManVc,var record IVVc,string,string,val,val,val,Integer,Longint);
remote procedure RecreateAgreementSchedule3CallBack(record CredManVc,Integer);
external function Boolean HasSuretyPerson();
external procedure DistributeCredHistValues(var record IPVc,Integer);
external procedure AddInstalmentFixed(record CredManVc,record CredManPayPlanVc,record CredManSetBlock,val,Date,var val,var val,Date,Date);
external procedure GetBuyOutData(record CredManVc,record CredManPayPlanVc,record CredManSetBlock,var Date,var val);
external inner procedure IVVc_PastePrice(var record IVVc,record IVVc,Integer,var string);

global
updating function Boolean ArchiveExistingDocument(record AgreementDocVc ADr,var string oldname)
begin
  record RLinkVc RLr,RL2r;
  record Attach2Vc Attachr;
  record ArchiveVc Archiver;
  Boolean res;
  
  if (ReadRecordLink(ADr,1,Attachr,RLr)) then begin
    if (ReadRecordLink(ADr,1,Archiver,RL2r)==false) then begin
      RecordNew(Archiver);
      Archiver.SerNr = NextSerNr("ArchiveVc",CurrentDate,-1,false,"");
      Archiver.FolderName = "OLD";
      if (RecordStore(Archiver,true)) then begin
        CreateRecordLink(ADr,CurrentCompany,Archiver,CurrentCompany);
      end;
    end;
    res = true;
    CreateRecordLink(Archiver,CurrentCompany,Attachr,CurrentCompany);
    oldname = Attachr.FileName;
    RecordRemove(RLr);
  end;

  ArchiveExistingDocument = res;
  return;
end;

global
procedure PasteCustInAgreementRemote(var record CredManVc CredManr,var string warning)
begin
  record BankVc Bankr;
  record CUVc CUr;
  record BaseCurBlock BCb;


  CUr.Code = CredManr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    CredManr.BankCode = CUr.AccOperator;
    Bankr.Code = CUr.AccOperator;
    if (ReadFirstMain(Bankr,1,true)) then begin
      CredManr.BankName = Bankr.Name;
    end;
    CredManr.BankAccount = CUr.BankAccount;
    if (nonblank(CUr.CurncyCode)) then begin
      CredManr.CurncyCode = CUr.CurncyCode;
    end else begin
      BlockLoad(BCb);
      CredManr.CurncyCode = BCb.BaseCur1;
    end;
    CredManVc_PasteCurncyCode(CredManr);
    warning = CUr.WarnText1;

  end;
  
  return;
end;


global
procedure CredManSetDatesCust(var record CredManVc CredManr,Boolean allf)
begin
  record CredManSetBlock CredManSetb;
  Date startd,finv,fint,tsd;
  Integer invday,prolongmonths;
  
  invday = CredManr.MonthlyPaymentDay;
  if (invday<1) then begin
    BlockLoad(CredManSetb);
    invday = CredManSetb.InvDay;
  end;
  startd = CredManr.startDate;
  //finv = AddMonth(startd,1); //CUST-CHANGED
  if (allf) then begin
    finv = AddDay(startd,25);//29
    tsd = finv;
    finv = AddDay(finv,invday - GetDay(finv));//-14
    if (tsd>finv) then begin
      finv = AddMonth(finv,1);
    end;
    CredManr.FirstInvDate = finv;
  end;
  CredManr.FirstIntDate = CredManr.startDate;
  //CredManr.MoneyTransferDate = CredManr.startDate;
  CredManUpdate(CredManr,-1,"");
  CredManSumup(CredManr);
  CredManr.endDate = AddMonth(CredManr.FirstInvDate,CredManr.InstalmentMonths - 1);
  prolongmonths = GetProlongMonths(CredManr);
  if (prolongmonths>0) then begin
    CredManr.endDate = AddMonth(CredManr.endDate,prolongmonths);
  end;


  return;
end;

function Boolean HasBOESureties(record CredManVc CredManr,Integer tnum)
begin
  string 255 code;
  record BOESuretyVc BSr;
  Boolean res;

  code = GetFieldValueByName(CredManr,"BOE" & tnum & "Code",-1);
  if (nonblank(code)) begin
    ResetLoop(BSr);
    BSr.CredManNr = CredManr.SerNr;
    BSr.BOENum = tnum;
    if (ReadFirstMain(BSr,2,true)) then begin
      if (nonblank(BSr.SuretyProvider1)) then begin
        res = true;
        goto LHasBOESureties;
      end;
    end;
  end;

LHasBOESureties:;
  HasBOESureties = res;
  return;
end;

function string 255 GetDocumentLangCode(record CredManVc CredManr,Integer type,Integer param)
begin
  string 255 res;
  record CredManTypeVc CMTr;
  record CUVc CUr;
  
  CMTr.Code = CredManr.Type;
  if (ReadFirstMain(CMTr,1,true)) then begin
    switch (type) begin
      case 1: res = CMTr.CredManLangCode;
      case 2: res = CMTr.ScheduleLangCode;
      case 3: 
        res = CMTr.SuretyLangCode;
        if (HasSuretyPerson) then begin
          CUr.Code = GetFieldValueByName(CredManr,"SuretyProvider" & param,-1);
          if (ReadFirstmain(CUr,1,true))then begin
            if (CUr.CustType==1) then begin
              res = CMTr.SuretyPersonLangCode;
            end;
          end;
        end;
      case 4: 
        if (CMTr.VekselisShortMonths>0 and CredManr.InstalmentMonths<CMTr.VekselisShortMonths) then begin
          if (HasBOESureties(CredManr,param)) then begin
            res = CMTr.VekselisShortLangCode;
          end else begin
            res = CMTr.VekselisShortLangCode2;
          end;
        end else begin
          if (HasBOESureties(CredManr,param)) then begin
            res = CMTr.VekselisLangCode;
          end else begin
            res = CMTr.VekselisLangCode2;            
          end;
        end;
    end;
  end;

  if (blank(res)) then begin
    res = CredManr.LangCode;
  end;

  GetDocumentLangCode = res;
  return;
end;

function Boolean CredManIsPausedOnDate(record CredManVc CredManr,Date td)
begin
  Date sd,ed;
  record CredManChangeVc Changer;
  Boolean TrHs;
  Boolean res;
  
  Changer.CredManNr = CredManr.SerNr;
  Changer.TransDate = CredManr.FirstInvDate;
  TrHs = true;
  while (LoopKey("CredManDate",Changer,2,TrHs)) begin
    if (CredManr.SerNr!=Changer.CredManNr or Changer.TransDate>td) then begin
      TrHs = false;
    end else begin
      if (Changer.OKFlag==1) then begin
        if (Changer.PauseMonths>0) then begin
          ed = AddMonth(Changer.TransDate,Changer.PauseMonths);
          if (DateInRange(td,Changer.TransDate,ed)) then begin
            res = true;
            TrHs = false;
          end;
        end;
      end;
    end;
  end;

  CredManIsPausedOnDate = res;
  return;
end;

function Boolean CanPauseAgreement(record CredManVc CredManr,Date td,val months)
begin
  record CredManPayPlanVc CredManPayPlanr;
  row CredManPayPlanVc CredManPayPlanrw;
  Integer i,rwcnt;
  record CredManSetBlock CMb;
  Date td3,lastinv;
  Boolean res;

  res = true;
  BlockLoad(CMb);
  BuildCredManPayPlanCust(CredManr,CredManPayPlanr,CMb,true,false);
  rwcnt = MatRowCnt(CredManPayPlanr);
  for (i=rwcnt-1;i>=0;i=i-1) begin
    MatRowGet(CredManPayPlanr,i,CredManPayPlanrw);
    if (CredManPayPlanrw.PlanType==5 or CredManPayPlanrw.PlanType==6 or CredManPayPlanrw.PlanType==7) then begin
      if (td<=CredManPayPlanrw.TransDate) then begin
        res = false;
      end else begin
        if (lastinv<CredManPayPlanrw.TransDate) then begin
          lastinv = CredManPayPlanrw.TransDate;
        end;
      end;
      i = 0;
    end;
  end;

  if (CredManIsPausedOnDate(CredManr,td)) then begin
    res = false;
  end;

  if (DateInRange(td,CredManr.startDate,CredManr.endDate)==false) then begin
    res = false;
  end;

  if (CredManr.PrincipleDelayMonths>0) then begin
    if (AddDay(AddMonth(CredManr.FirstInvDate,CredManr.PrincipleDelayMonths),-1)>td) then begin
      res = false;
    end;
  end;

  CanPauseAgreement = res;
  return;
end;

global
updating procedure RecreateAgreementSchedule(record CredManVc CredManr)
begin
  record AgreementDocVc ADr,oldADr;
  row AgreementDocVc ADrw;
  record RcVc RepSpec;
  string 255 fn,langcode,oldname;
  Integer i,rwcnt;
  area filearea;

  ADr.RecordType = 0;
  ADr.RecordNr = CredManr.SerNr;
  ADr.Type = 2;
  if (ReadFirstKey("RecordNr",ADr,3,true)) then begin
    ArchiveExistingDocument(ADr,oldname);
    RecordCopy(oldADr,ADr);
    ADr.SignedByUs = 0;
    ADr.SignedByUsDate = "";
    ADr.SignedByUsTime = "";
    rwcnt = MatRowCnt(ADr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(ADr,i,ADrw);
      ADrw.Status = 0;
      ADrw.SignatureDate = "";
      ADrw.SignatureTime = "";
      MatRowPut(ADr,i,ADrw);
    end;
    if (RecordUpdate(oldADr,ADr,true)==0) then begin
      //should move this out to a function
      fn = "Schedule" & CredManr.SerNr & ".pdf";
      GenerateAgreementSchedule(CredManr,true);
      langcode = GetDocumentLangCode(CredManr,2,-1);
      if (ExternalDocumentEnabled("CredManScheduleForm")) then begin
        RepSpec.long1 = CredManr.InstalmentType;
        if (CredManr.MaxMonthlyPayment>0) then begin
          RepSpec.flags[10] = 1;
        end;
        PrintEBSDocument("CredManScheduleForm",fn,RepSpec,CredManr.SerNr,langcode,filearea);
      end else begin
        PrintCredManDocument("CredManScheduleForm",fn,CredManr,CredManr.InstalmentType,(CredManr.MaxMonthlyPayment>0),langcode);
        //PrintMultiDocDocument("CredManScheduleForm",fn,CredManr.SerNr,CredManr.InstalmentType,(CredManr.MaxMonthlyPayment>0),langcode);
      end;
      RecordLinkFile(fn,0,ADr,CurrentCompany);
      Delete_File(fn);
    end;
  end;

  return;
end;

global
updating procedure RecreateAgreementSchedule2(record CredManVc CredManr,Boolean fullf)
begin
  record AgreementDocVc ADr;

  GenerateAgreementSchedule(CredManr,true);
  if (fullf) then begin
    ADr.RecordType = 0;
    ADr.RecordNr = CredManr.SerNr;
    ADr.Type = 2;
    if (ReadFirstKey("RecordNr",ADr,3,true)) then begin
      RecreateAgreementDocument(ADr,true);
    end;
  end;

  return;
end;

global
updating procedure RecreateAgreementSchedule3(record CredManVc CredManr,Boolean fullf,Integer wn)
begin

  RecreateAgreementSchedule2(CredManr,fullf);
  ReadFirstMain(CredManr,1,true);
  ClientRemoteAsync.RecreateAgreementSchedule3CallBack(CredManr,wn);

  return;
end;

updating procedure CreateProlongSession(record CredManVc CredManr,Date td,val months,val prolongmonths,Integer prolongf,Integer recalcshedf,val rate)
begin
  record ProlongSessionVc PSr;

  RecordNew(PSr);
  PSr.SerNr = NextSerNr("ProlongSessionVc",CurrentDate,-1,false,"");
  PSr.TransDate = CurrentDate;
  PSr.TransTime = CurrentTime;
  PSr.SalesMan = CurrentUser;
  PSr.PauseDate = td;
  PSr.ProlongDate = td;
  PSr.PauseMonths = months;
  PSr.IntRate = rate;
  PSr.ProlongMonths = prolongmonths;
  PSr.ProlongWhenPaid = prolongf;
  PSr.RecalcSchedule = recalcshedf;
  PSr.CredManNr = CredManr.SerNr;
  RecordInsert(PSr,true);

  return;
end;

global
updating procedure DoPauseCredMan(var record CredManVc CredManr,val months,val prolongmonths,Date td,var Boolean res,var Boolean setf,record RcVc RepSpec,var record IVVc IVr)
begin
  record AgreementDocVc ADr;
  val tmonths,tprolongmonths,rate;
  res = false;

//  if (nonblank(td)) then begin
    //RecordCopy(oldCredManr,CredManr);
    tprolongmonths = prolongmonths;
    tmonths = months;
    if (tprolongmonths==0) then begin
      tprolongmonths = blankval;
    end;
    if (nonblank(RepSpec.vals3)) then begin
      rate = RepSpec.vals3;
    end;
    if (tmonths==0) then begin
      tmonths = blankval;
    end;
    if (CanPauseAgreement(CredManr,td,months)) then begin
      if (RepSpec.flags[2]==1) then begin
        CreateProlongSession(CredManr,td,months,prolongmonths,RepSpec.flags[3],RepSpec.flags[1],RepSpec.vals3);
        CreateProlongInvoice(CredManr,IVr);
      end;
      if (RepSpec.flags[3]==0) then begin
        if (tmonths>0 or tprolongmonths>0 or rate>0) then begin
          CreatePauseRecord(CredManr.SerNr,td,tmonths,tprolongmonths,rate,1);
        end;
        CredManSetDatesCust(CredManr,false);
        /*
        GenerateAgreementSchedule(CredManr,true);
        if (RepSpec.flags[1]==1) then begin
          ADr.RecordType = 0;
          ADr.RecordNr = CredManr.SerNr;
          ADr.Type = 2;
          if (ReadFirstKey("RecordNr",ADr,3,true)) then begin
            RecreateAgreementDocument(ADr,true);
          end;
        end;
        */
        setf = true;
      end else begin
        if (tmonths>0 or tprolongmonths>0 or rate>0) then begin
          CreatePauseRecord(CredManr.SerNr,td,tmonths,tprolongmonths,rate,0);
        end;
      end;
      res = true;      
    end;
    //RecordUpdate(oldCredManr,CredManr,true);
//  end;

  return;
end;

global
procedure GetPauseCredManNextDate(record CredManVc CredManr,var Date td)
begin
  record CredManVc oldCredManr;
  record CredManPayPlanVc CredManPayPlanr;
  row CredManPayPlanVc CredManPayPlanrw;
  Integer i,rwcnt;
  record CredManSetBlock CMb;
  
  BlockLoad(CMb);
  BuildCredManPayPlanCust(CredManr,CredManPayPlanr,CMb,true,false);
  rwcnt = MatRowCnt(CredManPayPlanr);
  td = CredManr.FirstInvDate;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CredManPayPlanr,i,CredManPayPlanrw);
    if (CredManPayPlanrw.PlanType<5) then begin
      i = rwcnt;
      td = CredManPayPlanrw.TransDate;
    end;
  end;

  if (td<CredManr.FirstInvDate) then begin
    td = CredManr.FirstInvDate;
  end;

  if (CredManr.PrincipleDelayMonths>0) then begin
    if (AddDay(AddMonth(CredManr.FirstInvDate,CredManr.PrincipleDelayMonths),-1)>td) then begin
      td = AddMonth(CredManr.FirstInvDate,CredManr.PrincipleDelayMonths);
    end;
  end;
  
  return;
end;

global
procedure GetRefinCredManData(Longint CredManNr,Integer type,var record RcVc RepSpec,Boolean initf)
begin
  record CredManVc CredManr;
  record CredManPayPlanVc CredManPayPlanr;
  record CredManTypeVc CredManTyper;
  record RcVc planRepSpec;

  CredManr.SerNr = CredManNr;
  if (ReadFirstMain(CredManr,1,true)) then begin

    if (blank(RepSpec.d1)) then begin
      RepSpec.d1 = CurrentDate;
    end; 

    planRepSpec.long1 = CredManr.SerNr;
    planRepSpec.d1 = RepSpec.d1;
    CheckBuyOutAgreement(CredManr,planRepSpec);
    RepSpec.vals0 = planRepSpec.vals0;
    RepSpec.vals1 = planRepSpec.vals1;
    //RepSpec.vals2 = 0;//should stay blank;
    RepSpec.vals3 = RepSpec.vals0 + RepSpec.vals1 + RepSpec.vals2;

    if (initf) then begin
      RepSpec.long1 = CredManr.SerNr;
      RepSpec.f1 = CredManr.Type;
      CredManTyper.Code = CredManr.Type;
      if (ReadFirstMain(CredManTyper,1,true)) then begin
        RepSpec.flags[0] = CredManTyper.InstalmentMonths;
      end;
      if (type==2) then begin
        RepSpec.f2 = CredManr.SuretyProvider1;
      end else begin
        RepSpec.f2 = CredManr.CustCode;
      end;

      RepSpec.flags[1] = CredManr.MonthlyPaymentDay;
      RepSpec.vals4 = 0;
      if (type==2) then begin
        RepSpec.vals4 = CredManr.SuretyInterestRate;
      end;

      RepSpec.ArtMode = type;
    end;
  end;

  return;
end;

procedure CopySingleCredManSurety(var record CredManVc CredManr,record CredManVc tCredManr,Integer num)
begin
  
    SetFieldValueByName(CredManr,"SuretyProvider" & num,GetFieldValueByName(tCredManr,"SuretyProvider" & num,-1),-1);
    SetFieldValueByName(CredManr,"Surety" & num & "Name",GetFieldValueByName(tCredManr,"Surety" & num & "Name",-1),-1);
    SetFieldValueByName(CredManr,"Surety" & num & "Position",GetFieldValueByName(tCredManr,"Surety" & num & "Position",-1),-1);
    SetFieldValueByName(CredManr,"Surety" & num & "Phone",GetFieldValueByName(tCredManr,"Surety" & num & "Phone",-1),-1);
    SetFieldValueByName(CredManr,"Surety" & num & "Mobile",GetFieldValueByName(tCredManr,"Surety" & num & "Mobile",-1),-1);
    SetFieldValueByName(CredManr,"Surety" & num & "eMail",GetFieldValueByName(tCredManr,"Surety" & num & "eMail",-1),-1);
    SetFieldValueByName(CredManr,"Surety" & num & "ID",GetFieldValueByName(tCredManr,"Surety" & num & "ID",-1),-1);
    SetFieldValueByName(CredManr,"Surety" & num & "Addr0",GetFieldValueByName(tCredManr,"Surety" & num & "Addr0",-1),-1);
    SetFieldValueByName(CredManr,"Surety" & num & "Addr1",GetFieldValueByName(tCredManr,"Surety" & num & "Addr1",-1),-1);
    SetFieldValueByName(CredManr,"Surety" & num & "Addr2",GetFieldValueByName(tCredManr,"Surety" & num & "Addr2",-1),-1);
    SetFieldValueByName(CredManr,"Surety" & num & "Addr3",GetFieldValueByName(tCredManr,"Surety" & num & "Addr3",-1),-1);
    SetFieldValueByName(CredManr,"Surety" & num & "Addr4",GetFieldValueByName(tCredManr,"Surety" & num & "Addr4",-1),-1);

  return;
end;

procedure CopyCredManSurety(var record CredManVc CredManr,record CredManVc tCredManr)
begin
  
  CopySingleCredManSurety(CredManr,tCredManr,1);
  CopySingleCredManSurety(CredManr,tCredManr,2);
  CopySingleCredManSurety(CredManr,tCredManr,3);

  return;
end;

updating procedure CreateRefinCredMan(record RcVc RepSpec,var record CredManVc CredManr,record CredManVc tCredManr)
begin
  
  RecordNew(CredManr);
  CredManr.startDate = RepSpec.d1;
  CredManr.FirstInvDate = RepSpec.d1;
  CredManr.InvSum4 = RepSpec.vals3;
  CredManr.Type = RepSpec.f1;
  CredManr.CustCode = RepSpec.f2;
  PasteCustInCredMan(CredManr);
  CredManVc_PasteType(CredManr);
  CredManr.IntRate = RepSpec.vals4;
  CredManr.ClientContact = tCredManr.ClientContact;
  CredManr.MonthlyPaymentDay = RepSpec.flags[1];
  CredManr.InstalmentMonths = RepSpec.flags[0];
  CredManSetDatesCust(CredManr,true); 
  CopyCredManSurety(CredManr,tCredManr);
  CredManr.LoanApplication = tCredManr.LoanApplication;
  CredManr.SerNr = NextSerNr("CredManVc",CredManr.startDate,-1,false,"");
  CredManr.OKFlag = 1;
  CredManr.Approved = 1;
  RecordInsert(CredManr,true);

  return;
end;

updating procedure CreditAndOKInvoice(Longint ivnr,val prc,var val credval,var vector val vCredVal,val rval)
begin
  record IVVc IVr,IVCreditr,oldIVr,IV2r;
  string 255 warning;
  Integer i,rwcnt;
  row IVVc IVrw;
  val ratio;
  record LocalMachineBlock LMb;
  Integer err1,err2;

  IVr.SerNr = ivnr;
  if (ReadFirstMain(IVr,1,true)) then begin
    ratio = rval/IVr.Sum4;
    if (CreateCreditNoteIV(IVr,kInvoiceTypeCredit,IVCreditr,"",false)==0) then begin
      if (IVr.InvDate>IVCreditr.InvDate) then begin
        IVCreditr.InvDate = IVr.InvDate;
        IVVc_PasteInvDate(IVCreditr,LMb,err1,err2);
      end;
      IVCreditr.CustCredManNr = IVr.CustCredManNr;
      IVCreditr.SerNr = NextSerNr("IVVc",IVCreditr.InvDate,-1,false,"");
      if (prc<100 or ratio!=1) then begin
        rwcnt = MatRowCnt(IVCreditr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVCreditr,i,IVrw);
          if (nonblank(IVrw.ArtCode)) then begin
            if (IVrw.Price>0) then begin
              IVrw.Price = IVrw.Price * ratio * prc / 100;
              MatRowPut(IVCreditr,i,IVrw);
              IVVc_PastePrice(IVCreditr,IV2r,i,warning);
              MatRowGet(IVCreditr,i,IVrw);
              vCredVal[IVrw.ArtCode] = vCredVal[IVrw.ArtCode] + IVrw.Sum;
            end;
          end;
        end;
      end;
      credval = credval + IVr.Sum1;
      if (RecordInsert(IVCreditr,true)) then begin
        RecordCopy(oldIVr,IVCreditr);
        IVCreditr.OKFlag = 1;
        RecordUpdate(oldIVr,IVCreditr,true);
      end;
    end;
  end;

  return;
end;

updating procedure CreditCredManInvoices(record CredManVc CredManr,val prc,var val credval,var vector val vCredVal)
begin
  Boolean TrHs;
  record CredHistVc CredHistr;
  vector Boolean vInv;
  array string 255 invarr;
  record ARVc ARr;
  Integer i;

  credval = 0;
  TrHs = true;
  CredHistr.CredManNr = CredManr.SerNr;
  while (LoopKey("CredManChargeType",CredHistr,1,TrHs)) begin
    if (CredHistr.CredManNr!=CredManr.SerNr) then begin
      TrHs = false;
    end else begin
      if (CredHistr.RecordType==0) then begin
        vInv[CredHistr.RecordNr] = true;
      end;
    end;
  end;

  GetVectorTags(vInv,invarr);
  for (i=0;i<invarr.length;i=i+1) begin
    ARr.InvoiceNr = StringToLongint(invarr[i]);
    if (ReadFirstMain(ARr,1,true)) then begin
      if (ARr.RVal>0) then begin
        CreditAndOKInvoice(ARr.InvoiceNr,prc,credval,vCredVal,ARr.RVal);
      end;
    end;
  end;
  
  return;
end;

global
updating function Boolean DoRefinCredMan(record RcVc RepSpec,var string msg,var record CredManVc nCredManr)
begin
  record CMOrderClassBlock OCb;
  record IVVc IVr;
  record CredManVc CredManr,oldCredManr;
  Boolean res;
  val credval;
  vector val vCredVal;

  CredManr.SerNr = RepSpec.long1;
  if (ReadFirstMain(CredManr,1,true)) then begin
    BlockLoad(OCb);
    RecordCopy(oldCredManr,CredManr);
    CredManr.OrderClass = OCb.RefinClass;
    if (RecordUpdate(oldCredManr,CredManr,true)==0) then begin
      CreateRefinCredMan(RepSpec,nCredManr,CredManr);
      DoBuyOutAgreement(CredManr,IVr);
      CreditCredManInvoices(CredManr,100,credval,vCredVal);
      res = true;
    end;
  end;

  DoRefinCredMan = res;
  return;
end;

global
procedure GetFactoringRecord(record CredManVc CredManr,var record CredManFactVc CMFr)
begin
  record CredManFactVc tCMFr;

  tCMFr.CredManNr = CredManr.SerNr;
  if (ReadFirstMain(tCMFr,1,true)) then begin
    RecordCopy(CMFr,tCMFr);
  end else begin
    RecordNew(CMFr);
    CMFr.CredManNr = CredManr.SerNr;
  end;

  return;
end;

global
procedure GetPayGrntRecord(record CredManVc CredManr,var record CredManPmtGrntVc PGr)
begin
  record CredManPmtGrntVc tPGr;

  tPGr.CredManNr = CredManr.SerNr;
  if (ReadFirstMain(tPGr,1,true)) then begin
    RecordCopy(PGr,tPGr);
  end else begin
    RecordNew(PGr);
    PGr.CredManNr = CredManr.SerNr;
  end;

  return;
end;

function Integer GetSuretyCnt(record CredManVc CredManr)
begin
  Integer res;
  
  res = 0;
  if (nonblank(CredManr.SuretyProvider1)) then begin
    res = res + 1;
  end;
  if (nonblank(CredManr.SuretyProvider2)) then begin
    res = res + 1;
  end;
  if (nonblank(CredManr.SuretyProvider3)) then begin
    res = res + 1;
  end;

  GetSuretyCnt = res;
  return;
end;

procedure AddCustToDocument(var record AgreementDocVc ADr,string code,string name)
begin
  row AgreementDocVc ADrw;
  
  ClearRow(ADr,ADrw,1);
  ADrw.CustCode = code;
  ADrw.CustName = name;
  MatRowPut(ADr,MatRowCnt(ADr),ADrw);

  return;
end;

function Boolean CustIsCEO(string custcode,record CredManVc CredManr)
begin
  Boolean res,foundf;
  record B2BLoanApplicationVc LAr;
  record RLinkVc RLr;

  if (ReadRecordLink(CredManr,1,LAr,RLr)) then begin
    foundf = true;
  end else begin
    if (CredManr.LoanApplication>0) then begin
      LAr.SerNr = CredManr.LoanApplication;
      if (ReadFirstMain(LAr,1,true)) then begin
        foundf = true;
      end;
    end;
  end;
  if (foundf) then begin
    if (LAr.CEOCustCode==custcode) then begin
      res = true;
    end;
  end;  

  CustIsCEO = res;
  return;
end;


procedure AddSuretyToDocument(var record AgreementDocVc ADr,record CredManVc CredManr)
begin
  Integer i;
  string 255 custcode;
  row AgreementDocVc ADrw;
   
  for (i=1;i<4;i=i+1) begin
    custcode = GetFieldValueByName(CredManr,"SuretyProvider" & i,-1);
    if (nonblank(custcode)) then begin
      if (CustIsCEO(custcode,CredManr)==false) then begin
        AddCustToDocument(ADr,custcode,GetFieldValueByName(CredManr,"Surety" & i & "Name",-1))
      end;
    end;
  end;

  return;
end;

procedure AddSimplifiedSuretyToDocument(var record AgreementDocVc ADr,record CredManVc CredManr,Integer num)
begin
  Integer i;
  string 255 custcode;
  row AgreementDocVc ADrw;
   
  custcode = GetFieldValueByName(CredManr,"SuretyProvider" & num,-1);
  if (nonblank(custcode)) then begin
    if (CustIsCEO(custcode,CredManr)==false) then begin
      AddCustToDocument(ADr,custcode,GetFieldValueByName(CredManr,"Surety" & num & "Name",-1))
    end;
  end;

  return;
end;

procedure GetDocumentSigners(Integer type,record CredManVc CredManr,var Boolean flag1,var Boolean flag2,var Boolean flag3)
begin
  record CredManTypeVc CMTr;
  record CUVc CUr;
  
  CMTr.Code = CredManr.Type;
  if (ReadFirstMain(CMTr,1,true)) then begin
    switch (type) begin
      case 1: 
        flag1 = CMTr.CredManCEO1==1; flag2 = CMTr.CredManCEO2==1; flag3 = CMTr.CredManSurety==1;
      case 3: 
        flag1 = CMTr.SuretyCEO1==1; flag2 = CMTr.SuretyCEO2==1; flag3 = CMTr.SuretySurety==1;
        if (HasSuretyPerson) then begin
          CUr.Code = CredManr.CustCode;
          if (ReadFirstmain(CUr,1,true))then begin
            if (CUr.CustType==1) then begin
              flag1 = CMTr.SuretyPersonCEO1==1; flag2 = CMTr.SuretyPersonCEO2==1; flag3 = CMTr.SuretyPersonSurety==1;
            end;
          end;
        end;
      case 2: 
        flag1 = CMTr.ScheduleCEO1==1; flag2 = CMTr.ScheduleCEO2==1; flag3 = CMTr.ScheduleSurety==1;
      case 6: 
        if (CMTr.VekselisShortMonths>0 and CredManr.InstalmentMonths<CMTr.VekselisShortMonths) then begin
          flag1 = CMTr.VekselisShortCEO1==1; flag2 = CMTr.VekselisShortCEO2==1; flag3 = CMTr.VekselisShortSurety==1;
        end else begin
          flag1 = CMTr.VekselisCEO1==1; flag2 = CMTr.VekselisCEO2==1; flag3 = CMTr.VekselisSurety==1;
        end;
    end;
  end;

  return;
end;

global
function Boolean CustIsSurety(string custcode,record CredManVc CredManr)
begin
  Boolean res;
  
  if (GetFieldValueByName(CredManr,"SuretyProvider1",-1)==custcode) then begin
    res = true;
    goto LCustIsSurety;
  end;
  if (GetFieldValueByName(CredManr,"SuretyProvider2",-1)==custcode) then begin
    res = true;
    goto LCustIsSurety;
  end;
  if (GetFieldValueByName(CredManr,"SuretyProvider3",-1)==custcode) then begin
    res = true;
    goto LCustIsSurety;
  end;

LCustIsSurety:;
  CustIsSurety = res;
  return;
end;

procedure AddCEOToDocument(record AgreementDocVc ADr,record CredManVc CredManr,Boolean suretyf)
begin
  record B2BLoanApplicationVc LAr;
  record RLinkVc RLr;
  Boolean testf,foundf;
  record CUVc CUr;

  if (ReadRecordLink(CredManr,1,LAr,RLr)) then begin
    foundf = true;
  end else begin
    if (CredManr.LoanApplication>0) then begin
      LAr.SerNr = CredManr.LoanApplication;
      if (ReadFirstMain(LAr,1,true)) then begin
        foundf = true;
      end;
    end;
  end;
  if (foundf) then begin
    if (nonblank(LAr.CEOCustCode)) then begin
      testf = CustIsSurety(LAr.CEOCustCode,CredManr);
      if (suretyf and testf) then begin
        AddCustToDocument(ADr,LAr.CEOCustCode,LAr.CEOName);
      end;
      if (!suretyf and !testf) then begin
        AddCustToDocument(ADr,LAr.CEOCustCode,LAr.CEOName);
      end;
    end;
  end else begin
    if (FindCEOContact(CredManr.CustCode,CUr)) then begin
      testf = CustIsSurety(CUr.Code,CredManr);
      if (suretyf and testf) then begin
        AddCustToDocument(ADr,CUr.Code,CUr.Name);
      end;
      if (!suretyf and !testf) then begin
        AddCustToDocument(ADr,CUr.Code,CUr.Name);
      end;
    end;
  end;

  return;
end;

function string 255 GetAgreementDocumentName(record AgreementDocVc ADr,string base,Boolean regenf)
begin
  string 255 res;

  res = base & ADr.RecordNr;
  if (regenf) then begin
    res = res & "_new";
    res = res & DateToString(CurrentDate,"YYYYMMDD");
  end;
  res = res & ".pdf";

  GetAgreementDocumentName = res;
  return;
end;

updating procedure PrintSingleAgreementDoc(record AgreementDocVc ADr,record CredManVc CredManr,Boolean regenf)
begin
  string 255 fn;
  record RcVc RepSpec;
  string 255 langcode,oldname;
  Integer scnt;
  area filearea;
  transaction Longint gSuretyNumber;
  transaction Longint gBOENumber;
  
  ArchiveExistingDocument(ADr,oldname);

  scnt = GetSuretyCnt(CredManr);
  switch (ADr.Type) begin
    case 1://agreement
      fn = GetAgreementDocumentName(ADr,"Agreement",regenf);
      langcode = GetDocumentLangCode(CredManr,1,-1);
      if (ExternalDocumentEnabled("CredManForm")) then begin
        RepSpec.long1 = CredManr.InstalmentType;
        if (CredManr.MaxMonthlyPayment>0) then begin
          RepSpec.flags[10] = 1;
        end;
        PrintEBSDocument("CredManForm",fn,RepSpec,CredManr.SerNr,langcode,filearea);
      end else begin
        PrintCredManDocument("CredManForm",fn,CredManr,CredManr.InstalmentType,(CredManr.MaxMonthlyPayment>0),langcode);
        //PrintMultiDocDocument("CredManLongForm",fn,CredManr.SerNr,CredManr.InstalmentType,(CredManr.MaxMonthlyPayment>0),langcode);
      end;
    case 2://schedule
      fn = GetAgreementDocumentName(ADr,"Schedule",regenf);
      GenerateAgreementSchedule(CredManr,false);
      langcode = GetDocumentLangCode(CredManr,2,-1);
      if (ExternalDocumentEnabled("CredManScheduleForm")) then begin
        RepSpec.long1 = CredManr.InstalmentType;
        if (CredManr.MaxMonthlyPayment>0) then begin
          RepSpec.flags[10] = 1;
        end;
        PrintEBSDocument("CredManScheduleForm",fn,RepSpec,CredManr.SerNr,langcode,filearea);
      end else begin
        PrintCredManDocument("CredManScheduleForm",fn,CredManr,CredManr.InstalmentType,(CredManr.MaxMonthlyPayment>0),langcode);
        //PrintMultiDocDocument("CredManScheduleForm",fn,CredManr.SerNr,CredManr.InstalmentType,(CredManr.MaxMonthlyPayment>0),langcode);
      end;
    case 3://surety
      fn = GetAgreementDocumentName(ADr,"Surety",regenf);
      langcode = GetDocumentLangCode(CredManr,3,-1);
      if (ExternalDocumentEnabled("SuretyAgreementForm")) then begin
        RepSpec.long1 = CredManr.InstalmentType;
        if (CredManr.MaxMonthlyPayment>0) then begin
          RepSpec.flags[10] = 1;
        end;
        RepSpec.flags[11] = scnt;
        PrintEBSDocument("SuretyAgreementForm",fn,RepSpec,CredManr.SerNr,langcode,filearea);
      end else begin
        PrintCredManDocument("SuretyAgreementForm",fn,CredManr,scnt,(CredManr.MaxMonthlyPayment>0),langcode);
        //PrintMultiDocDocument("SuretyAgreementForm" & scnt,fn,CredManr.SerNr,CredManr.InstalmentType,(CredManr.MaxMonthlyPayment>0),langcode);
      end;
    case 6://vekselis
      fn = GetAgreementDocumentName(ADr,"Bill",regenf);
      langcode = GetDocumentLangCode(CredManr,4,-1);
      if (ExternalDocumentEnabled("VekselisForm")) then begin
        RepSpec.long1 = CredManr.InstalmentType;
        if (CredManr.MaxMonthlyPayment>0) then begin
          RepSpec.flags[10] = 1;
        end;
          RepSpec.flags[11] = scnt;
          PrintEBSDocument("VekselisForm",fn,RepSpec,CredManr.SerNr,langcode,filearea);
      end else begin
        PrintCredManDocument("VekselisForm",fn,CredManr,scnt,(CredManr.MaxMonthlyPayment>0),langcode);
        //PrintMultiDocDocument("VekselisForm" & scnt,fn,CredManr.SerNr,CredManr.InstalmentType,(CredManr.MaxMonthlyPayment>0),langcode);
      end;
    otherwise//surety simplified 7-12
      if (ADr.Type>8 and ADr.Type<15) then begin
        fn = GetAgreementDocumentName(ADr,"Surety",regenf);
        langcode = GetDocumentLangCode(CredManr,3,ADr.Type-8);
        if (ExternalDocumentEnabled("SuretyAgreementForm")) then begin
          RepSpec.long1 = CredManr.InstalmentType;
          if (CredManr.MaxMonthlyPayment>0) then begin
            RepSpec.flags[10] = 1;
          end;
          gSuretyNumber = ADr.Type-8;
          PrintEBSDocument("SuretyAgreementForm",fn,RepSpec,CredManr.SerNr,langcode,filearea);
          gSuretyNumber = -1;
        end else begin
          PrintCredManDocument("SuretyAgreementForm",fn,CredManr,1,(CredManr.MaxMonthlyPayment>0),langcode);
        end;
      end;
      if (ADr.Type>15 and ADr.Type<20) then begin//bill of exchange
        fn = GetAgreementDocumentName(ADr,"Bill",regenf);
        langcode = GetDocumentLangCode(CredManr,4,ADr.Type-15);
        if (ExternalDocumentEnabled("VekselisForm")) then begin
          RepSpec.long1 = CredManr.InstalmentType;
          if (CredManr.MaxMonthlyPayment>0) then begin
            RepSpec.flags[10] = 1;
          end;
          gBOENumber = ADr.Type-15;
          PrintEBSDocument("VekselisForm",fn,RepSpec,CredManr.SerNr,langcode,filearea);
          gBOENumber = -1;
        end else begin
          PrintCredManDocument("VekselisForm",fn,CredManr,scnt,(CredManr.MaxMonthlyPayment>0),langcode);
        end;
      end;
  end;
  RecordLinkFile(fn,0,ADr,CurrentCompany);
  Delete_File(fn);

  return;
end;

global
updating procedure CreateAgreementDoc(record CredManVc CredManr,Integer type,var record AgreementDocVc ADr)
begin
  string 255 fn,langcode;
  Integer scnt;
  row AgreementDocVc ADrw;
  area filearea;
  record RcVc RepSpec;
  Boolean flags1,flags2,flags3;
  row CredLegalInvNrBlock LegalInvNrrw;
  record CredManVc oldCredManr;

  RecordNew(ADr);
  ADr.SerNr = NextSerNr("AgreementDocVc",CurrentDate,-1,false,"");
  ADr.TransDate = CurrentDate;
  ADr.TransTime = CurrentTime;
  ADr.RecordNr = CredManr.SerNr;
  ADr.Type = type;
  
  GetDocumentSigners(ADr.Type,CredManr,flags1,flags2,flags3);
  if (flags1) then begin
    AddCEOToDocument(ADr,CredManr,false);    
  end;
  if (flags2) then begin
    AddCEOToDocument(ADr,CredManr,true);
  end;
  if (type>8 and type<15) then begin
      AddSimplifiedSuretyToDocument(ADr,CredManr,type-8);    
  end else begin
    if (flags3) then begin
      AddSuretyToDocument(ADr,CredManr);    
    end;
  end;
  if (RecordInsert(ADr,true)) then begin
    PrintSingleAgreementDoc(ADr,CredManr,false);
    if (blank(CredManr.OfficialSerNr)) then begin
      if (GetCredLegalNrLine("CredManVc",CredManr.SerNr,CredManr.startDate,CredManr.Type,CredManr.Classifications,LegalInvNrrw,3)) then begin
        RecordCopy(oldCredManr,CredManr);
        CredManr.OfficialSerNr = NextLegalSerNr("CredManVc",CredManr.SerNr,CredManr.startDate,LegalInvNrrw.Serie,LegalInvNrrw.TSerStart,LegalInvNrrw.TSerEnd);
        RecordUpdate(oldCredManr,CredManr,true);
      end;
    end;

  end;

  return;
end;

global
function Boolean GetAgreementDoc(record CredManVc CredManr,Integer type,var record AgreementDocVc ADr)
begin
  record AgreementDocVc tADr;
  Boolean res;
  
  tADr.RecordNr = CredManr.SerNr;
  tADr.RecordType = 0;
  tADr.Type = type;
  if (ReadFirstKey("RecordNr",tADr,3,true)) then begin
    RecordCopy(ADr,tADr);
    res = true;
  end else begin
    qupdating.CreateAgreementDoc(CredManr,type,ADr);
    res = true;
  end;

  GetAgreementDoc = res;
  return;
end;

global
updating procedure CreateAgreementDoc2(Longint sernr,string custcode,Integer rw,var record AgreementDocVc ADr)
begin
  string 255 fn;
  Integer scnt;
  row AgreementDocVc ADrw;
  record B2BLoanApplicationVc LAr;
  record RLinkVc RLr;
  record RcVc RepSpec;
/*
  RecordNew(ADr);
  ADr.SerNr = NextSerNr("AgreementDocVc",CurrentDate,-1,false,"");
  ADr.TransDate = CurrentDate;
  ADr.TransTime = CurrentTime;
  ADr.RecordNr = sernr;
  ADr.Type = 8;
  if (RecordInsert(ADr,true)) then begin
    fn = "PaymentCertificate.pdf";
    RepSpec.ArtMode = rw;
    PrintMultiDocDocument2("PaymentCertificateForm",fn,sernr,0,false,"",RepSpec);
    RecordLinkFile(fn,0,ADr,CurrentCompany);
    Delete_File(fn);
  end;
*/

  return;
end;

global
function Boolean GetAgreementDoc2(Longint sernr,string custcode,Integer rw,var record AgreementDocVc ADr)
begin
  record AgreementDocVc tADr;
  Boolean res,TrHs;
  
  TrHs = true;
  tADr.RecordNr = sernr;
  tADr.RecordType = 0;
  tADr.Type = 8;
  while (LoopKey("RecordNr",tADr,3,TrHs)) begin
    if (tADr.RecordNr!=sernr or tADr.RecordType!=0 or tADr.Type!=8) then begin
      TrHs = false;
    end else begin
      if (ADr.CustCode==custcode) then begin
        RecordCopy(ADr,tADr);
        res = true;
        goto LGetAgreementDoc2;
      end;
    end;
  end;
  qupdating.CreateAgreementDoc2(sernr,custcode,rw,ADr);
  res = true;//no point of having a function i guess

LGetAgreementDoc2:;
  GetAgreementDoc2 = res;
  return;
end;

updating procedure ResetSignatureStatus(var record AgreementDocVc ADr,record CredManVc CredManr)
begin
  record AgreementDocVc oldADr;
  row AgreementDocVc ADrw;
  Integer i,rwcnt;
  record CMApplicationSetBlock CMb;
  record CredManVc oldCredManr;
  
  RecordCopy(oldADr,ADr);

  ADr.SignedByUs = 0;
  ADr.SignedByUsDate = "";
  ADr.SignedByUsTime = "";

  rwcnt = MatRowCnt(ADr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ADr,i,ADrw);
    ADrw.Status = 0;
    ADrw.SignatureDate = "";
    ADrw.SignatureTime = "";
    MatRowPut(ADr,i,ADrw);
  end;

  if (RecordUpdate(oldADr,ADr,true)==0) then begin
    RecordCopy(oldCredManr,CredManr);
    switch (ADr.Type) begin
      case 1: CredManr.SignAgreement = 0;
      case 2: CredManr.SignSchedule = 0;
      case 3: CredManr.SignSurety = 0;
      case 6: CredManr.SignVekselis = 0;
      otherwise
        if (ADr.Type>8 and ADr.Type<15) then begin
          SetFieldValueByName(CredManr,"Surety" & (ADr.Type-8) & "Signed",-1,0);
        end;
        if (ADr.Type>15 and ADr.Type<20) then begin
          SetFieldValueByName(CredManr,"BOE" & (ADr.Type-15) & "Signed",-1,0);
        end;
    end;

    BlockLoad(CMb);
    if (nonblank(CMb.SignOrderClass) and CredManr.OrderClass!=CMb.SignOrderClass) then begin
      CredManr.OrderClass = CMb.SignOrderClass;
    end;

    RecordUpdate(oldCredManr,CredManr,true);
  end;

  return;
end;

global
updating procedure RecreateAgreementDocument(var record AgreementDocVc ADr,Boolean resignf)
begin
  record CredManVc CredManr;
  
  if (ADr.RecordType==0) then begin
    CredManr.SerNr = ADr.RecordNr;
    if (ReadFirstMain(CredManr,1,true)) then begin
      PrintSingleAgreementDoc(ADr,CredManr,true);
      if (resignf) then begin
        ResetSignatureStatus(ADr,CredManr);
      end;
    end;
  end;

  return;
end;


updating procedure CredManCreditAllInvoices(record CredManVc CredManr)
begin
  record ARVc ARr;
  Boolean TrHs;
  record IVVc IVr,oldIVr,IVCreditr;
  record LocalMachineBlock LMb;
  Integer err1,err2;
  array record IVVc aIVr;
  Integer i;

  ARr.CustCode = CredManr.CustCode;
  TrHs = true;
  while (LoopKey("CustCode",ARr,1,TrHs)) begin
    if (ARr.CustCode!=CredManr.CustCode) then begin
      TrHs = false;
    end else begin
      if (ARr.RVal>0) then begin
        IVr.SerNr = ARr.InvoiceNr;
        if (ReadFirstMain(IVr,1,true)) then begin
          aIVr[aIVr.length] = IVr;
        end;
      end;
    end;
  end;
  for (i=0;i<aIVr.length;i=i+1) begin
    IVr = aIVr[i];
    RecordClear(IVCreditr);
    if (CreateCreditNoteIV(IVr,kInvoiceTypeCredit,IVCreditr,"",false)==0) then begin
      if (IVr.InvDate>CurrentDate) then begin
        IVCreditr.InvDate = IVr.InvDate;   
        IVVc_PasteInvDate(IVCreditr,LMb,err1,err2);
      end;
      IVCreditr.SerNr = NextSerNr("IVVc",IVCreditr.InvDate,-1,false,"");
      if (RecordInsert(IVCreditr,true)) then begin
        RecordCopy(oldIVr,IVCreditr);
        IVCreditr.OKFlag = 1;
        RecordUpdate(oldIVr,IVCreditr,true);
      end;
    end;
  end;
 

  return;
end;

updating procedure CreateCredmanPurchaseInvoice(record CredManVc CredManr,val credsum,var record VIVc VIr,val overridesum)
begin
  record CMInvoicingBlock CIb;
  record VIVc oldVIr;
  row VIVc VIrw;
  val ct;
  string 255 warning,tstr;
  val sum;

  sum = CredManr.InvSum4;
  if (overridesum>0) then begin
    sum = overridesum;
  end;

  BlockLoad(CIb);
  RecordNew(VIr);
  VIr.SerNr = NextSerNr("VIVc",CurrentDate,-1,false,"");
  VIr.TransDate = CredManr.startDate;
  VIr.InvDate = CredManr.startDate;
  VIVc_PasteInvDate(VIr);    
  VIr.VECode = CredManr.CustCode;
  VIVc_PasteVECode(VIr,0,true,true,warning)
  VIr.PayDeal = CIb.PaymentPayDeal;
  VIVc_PastePayDeal(VIr);
  VIr.Objects =  AddObjectToObjectList(VIr.Objects,CIb.PaymentObject);
  VIr.PayVal = sum;
  VIr.CustCredManNr = CredManr.SerNr;
  ClearRow(VIr,VIrw,1);
  tstr = CM_GetCredManTypePurchItemAccount2(CredManr,CIb.PaymentAccount,true);
  VIrw.AccNumber = tstr;

  MatRowPut(VIr,0,VIrw);
  VIVc_PasteAccNumber(VIr,"",true,0);
  MatRowGet(VIr,0,VIrw);
  VIrw.VATCode = CIb.PaymentVATCode;
  MatRowPut(VIr,0,VIrw);
  VIDDefault(0,"VATCode",VIr);
  MatRowGet(VIr,0,VIrw);
  VIrw.Sum = sum;
  MatRowPut(VIr,0,VIrw);
  VICalcVals(VIr);
  VISumup(VIr,ct);
  if (RecordInsert(VIr,true)) then begin
    RecordCopy(oldVIr,VIr);
    VIr.OKFlag = 1;
    RecordUpdate(oldVIr,VIr,true);
  end; 

  return;
end;

global
updating procedure CreatePaymentFakeReceipt(record CredManVc CredManr,record IVVc IVr)
begin
  val chk;
  Boolean installmentf;
  record IPVc IPr,oldIPr;
  row IPVc IPrw;
  record CMInvoicingBlock CIb;
  vector Boolean invused;
  Integer k;
  val remsum;
  Integer rownr;

  BlockLoad(CIb);
  IPr.TransDate = IVr.InvDate;
  IPr.SerNr = NextSerNr("IPVc",IPr.TransDate,-1,false,"");
  IPr.RegDate = IVr.InvDate;
  IPr.OKFlag = 0;
  IPr.PayMode = CIb.PaymentMode;
  IPPastePayMode(IPr);


  remsum = IVr.Sum4;
  //GetCustomerLoanAmounts2(IPr,k,IVr.Addr0,IVr.CurncyCode,remsum,IVr.CustCode,true,"","",invused,IVr.InvDate,CredManr.SerNr);

/*
  ClearRow(IPr,IPrw,1);
  IPrw.InvoiceNr = IVr.SerNr;
  MatRowPut(IPr,0,IPrw);

  PasteInvIn2IPr(IPr,0,IPr.TransDate,chk,false,installmentf);
*/
  rownr = 0;
  ClearRow(IPr,IPrw,1);
  IPrw.InvoiceNr = IVr.SerNr;
  MatRowPut(IPr,rownr,IPrw);
  PasteInvIn2IPr(IPr,rownr,IPr.TransDate,chk,false,installmentf);
  DistributeCredHistValues(IPr,rownr);

  if (RecordStore(IPr,true)) then begin
    RecordCopy(oldIPr,IPr);
    IPr.OKFlag = 1;
    RecordUpdate(oldIPr,IPr,true);
  end;

  return;
end;

global
updating procedure CM_CreatePaymentOrder(record CredManVc CredManr,record VIVc VIr,val amount)
begin
  record OPVc OPr,oldOPr;
  row OPVc OPrw;
  val chk;
  Boolean installmentf;
  string 255 warning;
  record CMInvoicingBlock CIb;

  BlockLoad(CIb);
  RecordNew(OPr);
  OPr.TransDate = VIr.InvDate;	 
  OPr.PayDate = VIr.InvDate;	 
  OPr.SerNr = NextSerNr("OPVc",OPr.TransDate,-1,false,"");		
  OPr.PayMode = CIb.PaymentMode;
  OPPastePayMode(OPr);

  ClearRow(OPr,OPrw,1);
  OPrw.VISerNr = VIr.SerNr;
  MatRowPut(OPr,0,OPrw);
  PasteInvIn2OPr(OPr,0,OPr.TransDate,1,chk,warning,false,installmentf);
  MatRowGet(OPr,0,OPrw);
  OPrw.BankVal = amount;
  OPrw.RecVal = amount;
  MatRowPut(OPr,0,OPrw);
  OPVc_PasteRecVal(OPr,0);

  if (RecordStore(OPr,true)) then begin
    RecordCopy(oldOPr,OPr);
    OPr.DoneFlag = 1;
    OPr.OrderedFlag = 1;
    RecordUpdate(oldOPr,OPr,true);
  end;

  return;
end;

global
updating procedure CredManMakePaymentRemote(var record CredManVc CredManr,var record VIVc VIr,var record IVVc tIVr,string invno,var val sum,Boolean receiptf,val overridesum)
begin
  record IVVc IVr;
  record CMOrderClassBlock OCb;
  record CMInvoicingBlock CIb;
  record CredManVc tCredManr,oldCredManr;
  Boolean updf;


  if (CredManr.InstalmentType!=4 and CredManr.InstalmentType!=5) then begin
    CreateSingleAgreementInvoice(CredManr,AddDay(CredManr.FirstInvDate,-1),IVr,invno);
    CheckAndCreateAutoMailFromInvoice(IVr);
    RecordCopy(tIVr,IVr);
    
    //CredManCreditAllInvoices(CredManr);
    CreateCredmanPurchaseInvoice(CredManr,IVr.Sum4,VIr,overridesum);
    tCredManr.SerNr = CredManr.SerNr;
    if (ReadFirstMain(tCredManr,1,true)) then begin
      if (ComparePosts(tCredManr,CredManr)==false) then begin
        updf = true;
        RecordCopy(CredManr,tCredManr);
        RecordCopy(oldCredManr,CredManr);
      end;
    end;
    sum = IVr.Sum4;
    if (VIr.SerNr>0) then begin
      BlockLoad(OCb);
      CredManr.VINr = VIr.SerNr;
      CredManr.OrderClass = OCb.ActiveCredOrderClass;
      BlockLoad(CIb);
      if (CIb.MoneyTransferDateVI==1) then begin
        CredManr.MoneyTransferDate = VIr.InvDate;
      end;
      if (updf) then begin
        if (RecordUpdate(oldCredManr,CredManr,true)==0) then begin
        end;
      end;
    end;
  end;


  return;
end;

function string 255 GetDefaultPayMode()
begin
  record PMBlock PMb;
  row PMBlock PMbrw;
  string 255 res;

  BlockLoad(PMb);
  MatRowGet(PMb,0,PMbrw);
  res = PMbrw.Code;

  GetDefaultPayMode = res;
  return;
end;

procedure GetItemName(string code,var string spec)
begin
  record INVc INr;

  INr.Code = code;
  ReadFirstMain(INr,1,true);
  spec = INr.Name;

  return;
end;

global
updating procedure CredManPartialBuyoutDo(Date td,val buyoutval,Longint sernr,var string err)
begin
  record CredManVc CredManr,oldCredManr;
  record SMVc SMr;
  row SMVc SMrw;
  val tval;
  Longint histnr;
  record BaseCurBlock BCb;
  record AgreementDocVc ADr;
  Boolean updf;
  record IVVc IVr;
  Integer k;
  vector Boolean invused;
  record CMInvoicingBlock CIb;
  record CredManSetBlock CMb;
  Integer latedays;
  val lateamount;
  Date invdate,sd;
  val remsum;
  record IPVc IPr,oldIPr;
  row IPVc IPrw;
  Integer i,rwcnt;
  array string 255 lateformula;
  string 255 spec;

  CredManr.SerNr = sernr;
  if (ReadFirstMain(CredManr,1,true)) then begin
    RecordCopy(oldCredManr,CredManr);
    if (CredManr.VersionNo<0) then begin
      CredManr.VersionNo = 0;
    end;
    CredManr.VersionNo = CredManr.VersionNo + 1;
    if (RecordUpdate(oldCredManr,CredManr,true)==0) then begin
      updf = true;
    end;
/*
    BlockLoad(BCb);
    SMr.RegDate = td;
    SMr.Sign = GetDefaultPayMode;
    ClearRow(SMr,SMrw,1);
    SMrw.Objects = CredManr.CustCode;
    SMrw.DebVal = buyoutval;
    SMrw.CurncyCode = BCb.BaseCur1;
    MatRowPut(SMr,0,SMrw);

    ReceiptEntryCreateReceipts(SMr,false,tval);
    if (tval>0) then begin
      CreateCredHist(-1,11,CredManr.CustCode,tval,4,"",td,CredManr.SerNr,td,histnr,"","",1,CredManr.SerNr,tval,-1,tval);
      UpdateCredHistBalancePartialBuyout(CredManr.SerNr,histnr);
    end;
*/

    latedays = 0;
    lateamount = 0;
    invdate = td;
    sd = GetLastInvoiceDate(CredManr,invdate);
    GetCredManOverdueInvoices(CredManr,CMb,invdate,sd,latedays,lateamount,lateformula,true,false);
    if (latedays>0 or lateamount>0) then begin
      //Setup always new invoice
      SetupLoanInvoice(CredManr,CMb,IVr,invdate,sd,invdate,true,false,"",2,true);
      AddLateFees(CredManr,CMb,IVr,latedays,lateamount,lateformula);
      SetupOverdueLangCode(IVr,CredManr);
      StoreLoanInvoice(IVr,CredManr);
    end;

    IPr.TransDate = td;
    IPr.SerNr = NextSerNr("IPVc",IPr.TransDate,-1,false,"");
    IPr.RegDate = td;
    IPr.OKFlag = 0;
    IPr.PayMode = CIb.PaymentMode;
    IPPastePayMode(IPr);

    remsum = buyoutval;
    GetCustomerLoanAmounts2(IPr,k,CredManr.Addr0,CredManr.CurncyCode,remsum,CredManr.CustCode,true,"","",invused,td,CredManr.SerNr);
    
    rwcnt = MatRowCnt(IPr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IPr,i,IPrw);
      if (IPrw.InvoiceNr>0) then begin
        tval = tval + IPrw.RecVal;
      end;
    end;

    if (buyoutval-tval<=0) then begin
      err = USetStr(200111);
      goto LCredManPartialBuyoutDo;
    end;

    if (MatRowCnt(IPr)>0) then begin
      if (RecordStore(IPr,true)) then begin
        RecordCopy(oldIPr,IPr);
        IPr.OKFlag = 1;
        RecordUpdate(oldIPr,IPr,true);
      end;    
    end;

    //create a new invoice and creata receipt
    BlockLoad(CMb);
    BlockLoad(CIb);
    SetupLoanInvoice(CredManr,CMb,IVr,td,"","",true,false,"",1,true);
    GetItemName(CMb.InstalmentItem,spec);
    SetupInvoiceRowAndAdd(CredManr,IVr,CMb.InstalmentItem,spec,1,buyoutval-tval,blankval,19,-1);
    //CM_AddPrepayments(IVr,CredManr,CIb);
    StoreLoanInvoice(IVr,CredManr);

    //IVr.Sum4 = buyoutval;//a little hack for this to work
    CreatePaymentFakeReceipt(CredManr,IVr);

    if (updf) then begin
      ADr.RecordType = 0;
      ADr.RecordNr = CredManr.SerNr;
      ADr.Type = 2;
      if (ReadFirstKey("RecordNr",ADr,3,true)) then begin
        GenerateAgreementSchedule(CredManr,true);
        RecreateAgreementDocument(ADr,false);
      end;
    end;
  end;
  
LCredManPartialBuyoutDo:;
  return;
end;

global
function Boolean ContractHasInvoiceCreated(record CredManVc CredManr)
begin
  record CredHistVc CredHistr;
  Boolean res;
  record CredManSetBlock CMSb;
  
  BLockLoad(CMSb);

  CredHistr.CredManNr = CredManr.SerNr;
  CredHistr.ArtCode = CMSb.RateItem;
  if (ReadFirstKey("ArtCode",CredHistr,2,true)) then begin
    res = true;
  end;

  ContractHasInvoiceCreated = res;
  return;
end;


global
procedure CredLegalNrSerNrSClassOnOpenWindowRemote(string filename,string sernr,Date invdate,string agrtype,string agrclass,var array string arrOffSerNr)
begin
  
  FindListCredLegalSerNr(filename,sernr,invdate,agrtype,agrclass,0,arrOffSerNr);

  return;
end;

global
updating procedure GetCredManPropertyRecord(record CredManVc CredManr,var record CredManPropertiesVc CMPr)
begin
  
  CMPr.CredManNr = CredManr.SerNr;
  if (ReadFirstMain(CMPr,1,true)==false) then begin
    RecordNew(CMPr);
    CMPr.CredManNr = CredManr.SerNr;
    RecordInsert(CMPr,true);
  end;

  return;
end;

global
updating procedure GetCredManBOESuretyRecord(record CredManVc CredManr,var record BOESuretyVc BSr,Integer num)
begin
  
  BSr.CredManNr = CredManr.SerNr;
  BSr.BOENum = num;
  if (ReadFirstMain(BSr,2,true)==false) then begin
    RecordNew(BSr);
    BSr.CredManNr = CredManr.SerNr;
    BSr.BOENum = num;
    RecordInsert(BSr,true);
  end;

  return;
end;

global
updating procedure GetCredManMoneyReceiverRecord(record CredManVc CredManr,var record CredManMoneyRecVc MRr)
begin
  
  MRr.CredManNr = CredManr.SerNr;
  if (ReadFirstMain(MRr,2,true)==false) then begin
    RecordNew(MRr);
    MRr.CredManNr = CredManr.SerNr;
    RecordInsert(MRr,true);
  end;

  return;
end;

global
procedure CredManCalcLastMonthPrinciple(var record CredManVc CredManr)
begin
  record CredManPayPlanVc CredManPayPlanr;
  row CredManPayPlanVc CredManPayPlanrw;
  LongInt i,rwcnt;
  record SMVc SMr;
  row SMVc SMrw;  
  record CredManSetBlock CredManSetb;

  if (CredManr.MaxMonthlyPayment>0) then begin
    BlockLoad(CredManSetb);
    BuildCredManPayPlanCust(CredManr,CredManPayPlanr,CredManSetb,true,true);
    BuildCredManInfoMatrix(CredManr,CredManPayPlanr,CredManSetb,SMr);
    rwcnt = MatRowCnt(SMr);
    MatRowGet(SMr,rwcnt-1,SMrw);
    CredManr.LastMonthPrinc = SMrw.DebVal;
  end else begin
    CredManr.LastMonthPrinc = blankval;
  end;
  return;
end;

global
procedure CredManCalcMaxMonthlyPayment(var record CredManVc CredManr)
begin
  
  record CredManPayPlanVc CredManPayPlanr;
  row CredManPayPlanVc CredManPayPlanrw;
  LongInt i,rwcnt;
  record SMVc SMr;
  row SMVc SMrw;  
  record CredManSetBlock CredManSetb;
  val origsum,tot,calcbal,int,totdeb,tmp;
  Integer origmonths;
  Integer months,monthtype;

  if (CredManr.LastMonthPrinc>0) then begin
/*
    BlockLoad(CredManSetb);
    origsum = CredManr.InvSum4;
    origmonths = CredManr.InstalmentMonths;
    monthtype = 1;
    if (CredManr.ChargeMethod==1) then begin
      monthtype = 2;
    end;

    CredManr.MaxMonthlyPayment = 0;
    CredManr.InvSum4 = CredManr.InvSum4 - CredManr.LastMonthPrinc;
    CredManr.InstalmentMonths = CredManr.InstalmentMonths - 1;
    BuildCredManPayPlanCust(CredManr,CredManPayPlanr,CredManSetb,true,true);
    BuildCredManInfoMatrix(CredManr,CredManPayPlanr,CredManSetb,SMr);
    rwcnt = MatRowCnt(SMr);
    calcbal = origsum;
    MatRowGet(SMr,rwcnt-1,SMrw);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(SMr,i,SMrw);
      if (SMrw.DebVal>0) then begin
        tot = tot + SMrw.DebVal;
        int = int + GetRateAmount(CredManr,CredManr.IntRate,monthtype,"","",calcbal,false,false);
        calcbal = calcbal - SMrw.DebVal;
        months = months + 1;
      end;
    end;

    tot = tot + int;

  //  CredManr.MaxMonthlyPayment = SMrw.DebVal + SMrw.CredVal;

//stupid workaround, but I can't figure out a better way

    tmp = tot/months;
    CredManr.InstalmentMonths = origmonths;
    CredManr.InvSum4 = origsum;
    CredManr.MaxMonthlyPayment = tmp;
    RecordClear(CredManPayPlanr);
    RecordClear(SMr);
    BuildCredManPayPlanCust(CredManr,CredManPayPlanr,CredManSetb,true,true);
    BuildCredManInfoMatrix(CredManr,CredManPayPlanr,CredManSetb,SMr);
    rwcnt = MatRowCnt(SMr);
    MatRowGet(SMr,rwcnt-1,SMrw);
    if (SMrw.DebVal>CredManr.LastMonthPrinc) then begin
      tmp = tmp+((SMrw.DebVal-CredManr.LastMonthPrinc)/months);
    end;
    CredManr.MaxMonthlyPayment = tmp;

    RecordClear(CredManPayPlanr);
    RecordClear(SMr);
    BuildCredManPayPlanCust(CredManr,CredManPayPlanr,CredManSetb,true,true);
    BuildCredManInfoMatrix(CredManr,CredManPayPlanr,CredManSetb,SMr);
    rwcnt = MatRowCnt(SMr);
    MatRowGet(SMr,rwcnt-1,SMrw);
    CredManr.LastMonthPrinc = SMrw.DebVal;
*/
    CredManr.MaxMonthlyPayment = blankval;
  end else begin
    CredManr.MaxMonthlyPayment = blankval;
  end;
  return;
end;

global
procedure InsertCredManDocSignerName(var record CredManVc CredManr,Integer num)
begin
  Boolean res;
  record CUVc CUr;
  record ContactRelVc CRr;
  
  CRr.ContactName = GetFieldValueByName(CredManr,"Surety" & num & "Signer",-1);
  CRr.CustCode = GetFieldValueByName(CredManr,"SuretyProvider" & num,-1);
  /*
  if (ReadFirstKey("Contact",CRr,2,true)) then begin
    CUr.Code = CRr.ContactCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      SetFieldValueByName(CredManr,"Surety" & num & "Position",CUr.JobDesc,-1);
    end;
  end;
  */
  return;
end;

global
procedure InsertBOESuretySignerName(var record BOESuretyVc BSr,Integer num)
begin
  Boolean res;
  record CUVc CUr;
  record ContactRelVc CRr;
  
  CRr.ContactName = GetFieldValueByName(BSr,"Surety" & num & "Signer",-1);
  CRr.CustCode = GetFieldValueByName(BSr,"SuretyProvider" & num,-1);
  if (ReadFirstKey("Contact",CRr,2,true)) then begin
    CUr.Code = CRr.ContactCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      SetFieldValueByName(BSr,"Surety" & num & "Position",CUr.JobDesc,-1);
    end;
  end;

  return;
end;

global
function Boolean HasCredManChanges(record CredManVc CredManr)
begin
  record CredManChangeVc Changer;
  Boolean res;

  Changer.CredManNr = CredManr.SerNr;
  if (ReadFirstKey("CredManDate",Changer,1,true)) then begin
    res = true;
  end;

  HasCredManChanges = res;
  return;
end;

global
updating procedure TerminateCredMan(var record CredManVc CredManr,val prc,string custcode,Date selldate)
begin
  val calcbal,balance,cumint;
  Date lastinv,td;
  Integer i,rwcnt;
  record IVVc IVr;
  record CredManSetBlock CMb;
  row CredManPayPlanVc CredManPayPlanrw;
  record CredManPayPlanVc CredManPayPlan2r;
  record CredManPayPlanVc CredManPayPlanr;
  record CMInvoicingBlock CIb;
  record CredManVc tCredManr;
  val credval;
  string 255 spec;
  vector val vCredVal;
  array string 255 aCredVal;

  BlockLoad(CMb);
  BlockLoad(CIb);

  if (nonblank(selldate)) then begin
    CreateSingleAgreementInvoice(CredManr,selldate,IVr,"");
  end else begin
    BuildCredManPayPlanCust(CredManr,CredManPayPlanr,CMb,true,false);
    GetBuyOutData(CredManr,CredManPayPlanr,CMb,lastinv,balance);
    td = CurrentDate;
    if (balance>0) then begin
      SetupLoanInvoice(CredManr,CMb,IVr,CurrentDate,lastinv,CurrentDate,true,false,"",1,true);
      AddInstalmentFixed(CredManr,CredManPayPlan2r,CMb,balance,td,cumint,calcbal,lastinv,CurrentDate);
      rwcnt = MatRowCnt(CredManPayPlan2r);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(CredManPayPlan2r,i,CredManPayPlanrw);
        SetupInvoiceRowAndAdd(CredManr,IVr,CredManPayPlanrw.ArtCode,CredManPayPlanrw.Spec,1,CredManPayPlanrw.Sum,CredManPayPlanrw.Reb,CredManPayPlanrw.PlanType,CredManPayPlanrw.FactoringInvoice);
      end;
      StoreLoanInvoice(IVr,CredManr);
    end;
  end;

  CreditCredManInvoices(CredManr,prc,credval,vCredVal);
  ReadFirstMain(CredManr,1,true);

  if (nonblank(custcode) and credval>0) then begin
    RecordClear(IVr);
    RecordNew(IVr);
    RecordCopy(tCredManr,CredManr);
    tCredManr.CustCode = custcode;
    SetupLoanInvoice(tCredManr,CMb,IVr,CurrentDate,"","",true,false,"",1,true);
    GetVectorTags(vCredVal,aCredVal);

    for (i=0;i<aCredVal.length;i=i+1) begin
      GetItemName(aCredVal[i],spec);
      SetupInvoiceRowAndAdd(CredManr,IVr,aCredVal[i],spec,1,vCredVal[aCredVal[i]],blankval,17,-1);
    end;
    StoreLoanInvoice(IVr,CredManr);
  end;

  return;
end;

global
procedure TerminateCredManFinish(var record CredManVc CredManr)
begin
  record CMOrderClassBlock OCb;
   
  BlockLoad(OCb);
  CredManr.OrderClass = OCb.TerminatedOrderClass;
  CredManr.Status = 5;

  return;
end;

