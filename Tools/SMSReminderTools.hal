external inner procedure SendMessenteMessage(string,string);
external function string 255 NovitiGetEmailSender();
external procedure CheckBuyOutAgreement(record CredManVc,var record RcVc);
external inner function Boolean PasteCuInAct(var record ActVc,var string);
external inner function Boolean PasteActTypeInAct2(string,var record ActVc,var string);
external updating procedure Cust_SetReminderStatus(record SMSReminderQueueVc,Integer);
external inner function string 255 CredManOwnBankAccount(Longint,var string,var string,var string);
external inner function LongInt DateDiff(Date,Date);
external inner function string 255 StrReplace(string,string,string);

enum begin
  kMaxCheckDays = 3
end;

function string 255 GetReminderTextToken(record RcVc RepSpec,string token)
begin
  string 255 res;
  record CYBlock CYb;
  record IVVc IVr;
  record CredManVc CMr;
  Longint pos;
  string 255 recname,field;
 

  if (InString(token,".")) then begin
    GetNextSubString(token,pos,".",recname);
    GetNextSubString(token,pos,".",field);
    switch (recname) begin
      case "CYb":
        BlockLoad(CYb);
        switch (field) begin
          case "CompName":   res = CYb.CompName;
          case "Bank1":      res = CYb.Bank1;
          case "Bank2":      res = CYb.Bank2;
          case "BankName":   res = CYb.BankName;
          case "Phone":      res = CYb.Phone;
          case "emailAddr":  res = CYb.emailAddr;
        end;
      case "IVr":
        IVr.SerNr = RepSpec.long1;
        if (ReadFirstMain(IVr,1,true)) then begin
          switch (field) begin
            case "SerNr":         res = IVr.SerNr;
            case "OfficialSerNr": res = IVr.OfficialSerNr;
            case "PayDate":       res = IVr.PayDate;
          end;
        end;
      case "CMr":
        CMr.SerNr = RepSpec.long2;
        if (ReadFirstMain(CMr,1,true)) then begin
          switch (field) begin
            case "SerNr":          res = CMr.SerNr;
//            case "OfficialSerNr":  res = CMr.OfficialSerNr;
//            case "MonthlyInterest":res = CMr.PayDate;
          end;
        end;
    end;    
  end else begin
    switch (token) begin
      case "CustName":
        res = RepSpec.searchstr;
      case "AmountList":
        res = RepSpec.f4;
      case "InvAmount":
        res = RepSpec.vals0;
      case "InvDate":
        res = DateToString(RepSpec.d1,"YYYY/MM/DD");;
      case "OverDueAmount":
        res = RepSpec.vals1;
      case "PayableAmount":
        res = RepSpec.vals2;
      case "BankAccount":
        res = RepSpec.f5;
      case "AgreementList":
        res = RepSpec.f6;
      case "BankText":
        res = RepSpec.f8;
    end;
  end;

  GetReminderTextToken = res;
  return;
end;

global
function string 255 SMSReminderLTxtVcReplaceToken(record LTxtVc LTxtr,record RcVc RepSpec,string token)
begin
  string 255 res;

  res = GetReminderTextToken(RepSpec,token);

  SMSReminderLTxtVcReplaceToken = res;
  return;
end;

global
function string 255 SMSReminderEQueueVcReplaceToken(record EMailQueVc emqrp,record RcVc RepSpec,string token)
begin
  string 255 res;

  res = GetReminderTextToken(RepSpec,token);

  SMSReminderEQueueVcReplaceToken = res;
  return;
end;

global
function string 255 SMSReminderVcReplaceToken(record SMSReminderVc SMSReminder,record RcVc RepSpec,string token)
begin
  string 255 res;

  res = GetReminderTextToken(RepSpec,token);

  SMSReminderVcReplaceToken = res;
  return;
end;

function val GetTotalPayableAmount(Longint sernr)
begin
  val res;
  record RcVc RepSpec;
  record CredManVc CredManr;
  
  CredManr.SerNr = sernr;
  if (ReadFirstMain(CredManr,1,true)) then begin  
    RepSpec.d1 = CurrentDate;
    CheckBuyOutAgreement(CredManr,RepSpec);
    res = RepSpec.vals4;
    res = res + StringToVal(RepSpec.f12,M4Val);
  end;

  GetTotalPayableAmount = res;
  return;
end;

global
procedure FindFirstContactPerson(record CUVc CUr,var record CUVc ContactCUr)
begin
  record ContactRelVc CRr;
  Boolean TrHs;

  TrHs = true;
  CRr.CustCode = CUr.Code;
  while (LoopMain(CRr,1,TrHs)) begin
    if (CRr.CustCode!=CUr.Code) then begin
      TrHs = false;
    end else begin
      if (CRr.Invalid==0) then begin
        TrHs = false;
        ContactCUr.Code = CRr.ContactCode;
        if (ReadFirstMain(ContactCUr,1,true)) then begin
        end;
      end;
    end;
  end;

  return;
end;

function string 255 GetContactPhoneNumber(record CUVc CUr)
begin
  string 255 res;
  record CUVc ContactCUr;

  res = CUr.Mobile;
  if (blank(res)) then begin
    FindFirstContactPerson(CUr,ContactCUr);
    res = ContactCUr.Mobile;
  end;
  if (blank(res)) then begin
    res = CUr.Phone;
  end;
  if (blank(res)) then begin
    res = ContactCUr.Phone;
  end;

  GetContactPhoneNumber = res;
  return;
end;

function string 255 GetContactEmail(record CUVc CUr)
begin
  string 255 res;
  record CUVc ContactCUr;

  res = CUr.eMail;
  if (blank(res)) then begin
    FindFirstContactPerson(CUr,ContactCUr);
    res = ContactCUr.eMail;
  end;

  GetContactEmail = res;
  return;
end;

global
procedure SendSMSReminderToService(string phoneno,string text,Longint queuenr)
begin
  transaction Longint gSMSQueueRecord;

  gSMSQueueRecord = queuenr;
  SendMessenteMessage(phoneno,text);

  return;
end;

global
updating procedure DoHandleFailedSMSReminder(Longint sernr,Integer type,area reply)
begin
  record SMSReminderQueueVc SRQr;
  record NotePadVc Noter;
  record RLinkVc RLr;
  record MesenteSMSBlock MSb;
  record ActVc Actr;
  string 255 warning;

  SRQr.SerNr = sernr;
  if (ReadFirstMain(SRQr,1,true)) then begin
    Cust_SetReminderStatus(SRQr,3);
    RecordNew(Noter);
    Noter.SerNr = NextSerNr("NotepadVc",CurrentDate,-1,false,"");
    if (type==0) then begin
      AddAreaToTextField(reply,Noter);
    end else begin
      SetTextField(Noter,"Failed to connect to server");
    end;
    if (RecordStore(Noter,false)) then begin
      CreateRecordLink(SRQr,CurrentCompany,Noter,CurrentCompany);  
      if (ReadRecordLink(SRQr,1,Noter,RLr)) then begin
        RLr.Comment = "Error Message";
        if (RecordStore(RLr,true)) then begin
        end;
      end;
    end;
    BlockLoad(MSb);
    if (MSb.CreateActivity==1) then begin
      RecordNew(Actr);
      Actr.SerNr = NextSerNr("ActVc",CurrentDate,-1,false,"");
      Actr.TransDate = CurrentDate;
      Actr.ActType = MSb.ActType;
      PasteActTypeInAct2("",Actr,warning);
      Actr.MainPersons = MSb.ActPerson;
      Actr.Comment = MSb.ActText;
      Actr.TodoFlag = kTodoFlagTodo;
      if (RecordInsert(Actr,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,SRQr,CurrentCompany);
        CreateRecordLink(SRQr,CurrentCompany,Actr,CurrentCompany);
      end;

    end;

  end;

  return;
end;

global
procedure HandleFailedSMSReminder(Integer errtype,area reply)
begin
  transaction Longint gSMSQueueRecord;

  queued.DoHandleFailedSMSReminder(gSMSQueueRecord,errtype,reply);

  return;
end;

function Boolean DoSendSMSReminder(record SMSReminderVc SMSReminder,record RcVc RepSpec,string custcode,Longint queuenr)
begin
  area a;
  string 255 text,tstr,phoneno;
  Integer i,lcnt;
  record CUVc CUr;
  record ARVc ARr;
  Boolean res;
  
  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin
    if (CUr.NoLetterPosting!=0) then begin
      goto LSendSMSReminder;
    end;
    phoneno = GetContactPhoneNumber(CUr);
    if (blank(phoneno)) then begin
      LogText(0,"Skipping SMS reminder for contact " & CUr.Code & " - " & CUr.Name & ". No Mobile Phone specified");
      goto LSendSMSReminder;
    end;
    res = true;
    ParseTextField(a,SMSReminder,RepSpec,"SMSReminderVcReplaceToken");

    lcnt = CountLinesInArea(a);
    for (i=0;i<lcnt;i=i+1) begin
      tstr = GetLineFromArea(a,i);
      if (i>0) then begin
        text = text & "\\n";
      end;
      text = text & tstr;
    end;

    threadasync.SendSMSReminderToService(phoneno,text,queuenr);

  end;

LSendSMSReminder:;
  DoSendSMSReminder = res;
  return;
end;

procedure ReplaceHTMLText(area htmlarea,var area reshtml,string searchstr,string replacestr)
begin
  Longint pos;
  area html1,html2;
  
  pos = FindStringInArea(searchstr,htmlarea);
  if (pos>0) then begin
    GetAreaFromArea(htmlarea,0,pos,html1);
    GetAreaFromArea(htmlarea,pos+len(searchstr),GetAreaLength(htmlarea)-pos-len(searchstr),html2);
    AddAreaToArea(html1,reshtml);
    AddTextToArea(replacestr,reshtml);
    AddAreaToArea(html2,reshtml);
  end else begin
    AddAreaToArea(htmlarea,reshtml);
  end;

  return;
end;

global
updating function Boolean DoSendEmailReminder(record SMSReminderVc SMSReminder,record RcVc RepSpec,string custcode)
begin
  area a;
  string 255 text,tstr,email;
  Integer i;
  Longint l,pos;
  record CUVc CUr;
  record EMailQueVc emqrp;
  row EMailQueVc emarw;
  record CYBlock CYb;
  record ARVc ARr;
  record LTxtVc LTxtr,Ltxt2r;
  Boolean res;
  Boolean foundf;
  area htmlarea,reshtml;
  record Attach2Vc Attachr;
  record RLinkVc RLr;
  
  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin
    if (CUr.NoLetterPosting!=0) then begin
      goto LSendSMSReminder;
    end;
    email = GetContactEmail(CUr);
    if (blank(email)) then begin
      LogText(0,"Skipping Email reminder for contact " & CUr.Code & " - " & CUr.Name & ". No Email specified");
      goto LSendSMSReminder;
    end;

    res = true;
    emarw.RowTyp = 1;
    emarw.AddrCode = NovitiGetEmailSender;
    MatRowPut(emqrp,MatRowCnt(emqrp),emarw);

    emarw.RowTyp = 0;
    emarw.AddrCode = email;
    MatRowPut(emqrp,MatRowCnt(emqrp),emarw);
    emqrp.Header = SMSReminder.Subject;

    if (nonblank(SMSReminder.StdText)) then begin
      LTxtr.Code = SMSReminder.StdText;
      if (ReadFirstMain(LTxtr,1,true)) then begin
        foundf = true;
        if (LTxtr.HtmlFlag==0) then begin
          ParseTextField(a,LTxtr,RepSpec,"SMSReminderLTxtVcReplaceToken");
        end;
      end;
    end;
    if (foundf==false) then begin
      ParseTextField(a,SMSReminder,RepSpec,"SMSReminderVcReplaceToken");
    end;

    l = GetAreaLength(a);
    pos = 0;
    while (pos<l) begin
      tstr = GetStringFromArea(a,pos,255);
      AddToText(tstr,emqrp); 
      pos = pos+255;
    end;

    emqrp.SerNr = NextSerNr("EMailQueVc",CurrentDate,-1,false,"");
    emqrp.OrgSerNr = -1;
    emqrp.FileName = "";
    emqrp.TransDate = CurrentDate;
    emqrp.TransTime = CurrentTime;
    emqrp.HasFileAtt = 0;
    emqrp.HasRecAtt = 0;
    emqrp.Priority = 1;
    emqrp.EMailSent = 0;
    emqrp.Lifespan = 0;
    emqrp.QueDate = CurrentDate;
    emqrp.QueTime = CurrentTime;
    emqrp.HtmlFlag = LTxtr.HtmlFlag;

    if (RecordInsert(emqrp,false)) then begin
      if (foundf) then begin
        //CopyRecordLinks(LTxtr,emqrp);
        if (LTxtr.HtmlFlag==1) then begin
          if (ReadRecordLink(LTxtr,1,Attachr,RLr)) begin
            AddAttachFileToArea(Attachr,htmlarea,false);
            ReplaceHTMLText(htmlarea,reshtml,"<!--invoicelist-->",RepSpec.f7);
            //AddAreaToTextField(reshtml,LTxt2r);
            //AddToHtmlRecord(Ltxt2r,true,emqrp,true,true);
            WriteAreaToFile(reshtml,"tmp/body.html",0);
            RecordLinkFile("tmp/body.html",0,emqrp,0);
            Delete_File("tmp/body.html");
            ParseHtmlField(emqrp,RepSpec,"SMSReminderEQueueVcReplaceToken");
          end;

        end;
      end;
    end;
  end;

LSendSMSReminder:;
  DoSendEmailReminder = res;
  return;
end;

function Boolean ShouldTrigerSMSReminder(record SMSReminderVc SMSReminder)
begin
  Boolean res;
  Integer day;
  string 255 tstr;
  Time t;
  
  if (SMSReminder.LastSentDate==CurrentDate) then begin
    goto LShouldTrigerSMSReminder;
  end;

  day = GetDateID(CurrentDate);
  tstr = GetFieldValueByName(SMSReminder,"Day" & day,-1);
  if (tstr=="1") then begin
    t = StringToTime(GetFieldValueByName(SMSReminder,"Time" & day,-1));
    if (t<CurrentTime and AddMinutes(t,10)>CurrentTime) then begin
      res = true;
    end;
  end;

LShouldTrigerSMSReminder:;
  ShouldTrigerSMSReminder = res;
  return;
end;

global
updating procedure UpdateReminderLastSentDate(record SMSReminderVc SMSReminder)
begin
  record SMSReminderVc oldSMSReminder;

  if (ReadFirstMain(SMSReminder,1,true)) then begin
    RecordCopy(oldSMSReminder,SMSReminder);
    SMSReminder.LastSentDate = CurrentDate;
    RecordUpdate(oldSMSReminder,SMSReminder,true);
  end;

  return;
end;

global updating
procedure Cust_SetReminderStatus(record SMSReminderQueueVc SRQr,Integer status)
begin
  record SMSReminderQueueVc oldSRQr;
  
  RecordCopy(oldSRQr,SRQr);
  SRQr.SentFlag = status;
  RecordUpdate(oldSRQr,SRQr,true);

  return;
end;

updating procedure CreateFailedReminderActivity(record SMSReminderVc SMSReminder,string custcode)
begin
  string 255 warning;
  record ActVc Actr;

  if (SMSReminder.CreateActivity==1) then begin
    RecordNew(Actr);
    Actr.SerNr = NextSerNr("ActVc",CurrentDate,-1,false,"");
    Actr.TransDate = CurrentDate;
    Actr.CUCode = custcode;
    PasteCuInAct(Actr,warning);
    Actr.ActType = SMSReminder.ActType;
    PasteActTypeInAct2("",Actr,warning);
    Actr.MainPersons = SMSReminder.ActPerson;
    Actr.Comment = SMSReminder.ActText;
    Actr.TodoFlag = kTodoFlagTodo;
    RecordInsert(Actr,true);
  end;

  return;
end; 

global
updating procedure Cust_SendReminder(record SMSReminderQueueVc SRQr,record SMSReminderVc SMSReminder,record IVVc IVr)
begin
  Boolean sentf;
  record ARVc ARr;
  record RcVc RepSpec;

  ARr.InvoiceNr = IVr.SerNr;
  ReadFirstMain(ARr,1,true);
  RepSpec.searchstr = IVr.Addr0;
  RepSpec.vals0 = IVr.Sum4;
  RepSpec.vals1 = ARr.RVal;
  RepSpec.long1 = IVr.SerNr;
  RepSpec.long2 = IVr.CustCredManNr;
  RepSpec.d1 = IVr.InvDate;
  RepSpec.vals2 = GetTotalPayableAmount(IVr.CustCredManNr);

  if (SMSReminder.ReminderType==0) then begin
    sentf = DoSendSMSReminder(SMSReminder,RepSpec,IVr.CustCode,SRQr.SerNr);
  end else begin    
    sentf = DoSendEmailReminder(SMSReminder,RepSpec,IVr.CustCode);
  end;
  if (sentf) then begin
    Cust_SetReminderStatus(SRQr,1);
  end else begin
    Cust_SetReminderStatus(SRQr,3);
    CreateFailedReminderActivity(SMSReminder,IVr.CustCode);
  end;
  return;
end;

global
updating procedure Cust_SendReminder2(record SMSReminderVc SMSReminder,record IVVc IVr)
begin
  record SMSReminderQueueVc SRQr;
  Boolean sentf;
  record ARVc ARr;
  record RcVc RepSpec;

  RecordNew(SRQr);
  SRQr.SerNr = NextSerNr("SMSReminderQueueVc",CurrentDate,-1,false,"");
  SRQr.InvoiceNr = IVr.SerNr;
  SRQr.InvDate = CurrentDate;
  SRQr.ReminderNr = SMSReminder.SerNr;
  SRQr.SentFlag = 1;
  RecordInsert(SRQr,true);

  ARr.InvoiceNr = IVr.SerNr;
  ReadFirstMain(ARr,1,true);
  RepSpec.searchstr = IVr.Addr0;
  RepSpec.vals0 = IVr.Sum4;
  RepSpec.vals1 = ARr.RVal;
  RepSpec.long1 = IVr.SerNr;
  RepSpec.long2 = IVr.CustCredManNr;
  RepSpec.d1 = IVr.InvDate;
  RepSpec.vals2 = GetTotalPayableAmount(IVr.CustCredManNr);

  if (SMSReminder.ReminderType==0) then begin
    sentf = DoSendSMSReminder(SMSReminder,RepSpec,IVr.CustCode,SRQr.SerNr);
  end else begin
    sentf = DoSendEmailReminder(SMSReminder,RepSpec,IVr.CustCode);
  end;

  if (!sentf) then begin
    SRQr.SentFlag = 3;
    RecordStore(SRQr,true);
    CreateFailedReminderActivity(SMSReminder,IVr.CustCode);
  end;
  return;
end;

function string 255 GetInvoiceTable(string invlist,var string agreementlist)
begin
  string 255 res,tmp;
  record IVVc IVr;
  record ARVc ARr;
  Integer days;
  Longint pos;

  while (GetNextSubString(invlist,pos,",",tmp)) begin
    IVr.SerNr = StringToLongint(tmp);
    if (ReadFirstMain(IVr,1,true)) then begin
      ARr.InvoiceNr = IVr.SerNr;
      if (ReadFirstMain(ARr,1,true)) then begin
        days = DateDiff(CurrentDate,IVr.PayDate);
        res = res & "<tr><td>" & IVr.SerNr & "</td><td>" & IVr.InvDate & "</td><td>" & IVr.Sum4 & "</td><td>" & IVr.PayDate & "</td><td>" & days & "</td><td>" & ARr.RVal & "</td></tr>";
        if (IVr.CustCredManNr>0) then begin
          if (SetInSet(IVr.CustCredManNr,agreementlist)==false) then begin
            if (nonblank(agreementlist)) then begin
              agreementlist = agreementlist & ",";
            end;
            agreementlist = agreementlist & IVr.CustCredManNr;
          end;
        end;
      end;
    end;
  end;
  
  GetInvoiceTable = res;
  return;
end;

updating procedure SendSingleSMS3(record SMSReminderVc SMSReminder,record ORVc ORr,row ORVc ORrw,Integer days,Date sd,Date ed)
begin
  record SMSReminderQueueVc SRQr;
  Boolean sentf;
  Longint pos;
  record RcVc RepSpec;
  string 255 list,tablelist,agreementlist;
  
  RecordNew(SRQr);
  SRQr.SerNr = NextSerNr("SMSReminderQueueVc",CurrentDate,-1,false,"");

  SRQr.InvoiceList = ORrw.UnitComment;
  SRQr.InvDate = CurrentDate;
  SRQr.ReminderNr = SMSReminder.SerNr;
  SRQr.SentFlag = 1;
  SRQr.CheckDays = days;
  SRQr.StartDate = sd;
  SRQr.EndDate = ed;
  RecordInsert(SRQr,true);
  list = ORrw.Price & " " & ORrw.ShipNote;
    
  RepSpec.f4 = list;
  RepSpec.vals2 = ORrw.Price;
  RepSpec.f5 = ORrw.ShipNote;
  tablelist = GetInvoiceTable(ORrw.UnitComment,agreementlist);
  RepSpec.f6 = agreementlist;
  RepSpec.f7 = tablelist;
  RepSpec.searchstr = ORr.Addr0;


  if (SMSReminder.ReminderType==0) then begin
    sentf = DoSendSMSReminder(SMSReminder,RepSpec,ORr.CustCode,SRQr.SerNr);
  end else begin
    sentf = DoSendEmailReminder(SMSReminder,RepSpec,ORr.CustCode);
  end;

  if (!sentf) then begin
    SRQr.SentFlag = 3;
    RecordStore(SRQr,true);
    CreateFailedReminderActivity(SMSReminder,ORr.CustCode);
  end;


  return;
end;


updating procedure SendSingleSMS4(record SMSReminderVc SMSReminder,record ORVc ORr,Integer days,Date sd,Date ed)
begin
  record SMSReminderQueueVc SRQr;
  Boolean sentf;
  Longint pos,l;
  record RcVc RepSpec;
  string 255 list,tablelist,agreementlist,bankfulltext,tstr,notetext;
  record NotePadVc Noter;
  record RLinkVc RLr;
  Integer rwcnt,i;
  row ORVc ORrw;
  
  RecordNew(SRQr);
  SRQr.SerNr = NextSerNr("SMSReminderQueueVc",CurrentDate,-1,false,"");

  SRQr.InvoiceList = ORr.Addr1;
  SRQr.InvDate = CurrentDate;
  SRQr.ReminderNr = SMSReminder.SerNr;
  SRQr.SentFlag = 1;
  SRQr.CheckDays = days;
  SRQr.StartDate = sd;
  SRQr.EndDate = ed;
  RecordInsert(SRQr,true);
  list = ORrw.Price & " " & ORrw.ShipNote;//

  if (ReadRecordLink(SMSReminder,1,Noter,RLr)) begin
    pos = 0;
    l = SizeTextCnt(Noter);
    while (pos<l) begin
      notetext = notetext & StringFromText(Noter,pos,255);
      pos = pos + 255;
    end;
    rwcnt = MatRowCnt(ORr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(ORr,i,ORrw);
      bankfulltext = bankfulltext & notetext;
      bankfulltext = StrReplace(bankfulltext,"?BankAmount?",ORrw.Price);    
      bankfulltext = StrReplace(bankfulltext,"?BankAcc?",ORrw.ShipNote);  
    end;  
  end;

    
  RepSpec.f4 = list;
  RepSpec.vals2 = ORrw.Price;
  RepSpec.f5 = ORrw.ShipNote;
  tablelist = GetInvoiceTable(ORrw.UnitComment,agreementlist);
  RepSpec.f6 = agreementlist;
  RepSpec.f7 = tablelist;
  RepSpec.f8 = bankfulltext;
  RepSpec.searchstr = ORr.Addr0;


  if (SMSReminder.ReminderType==0) then begin
    sentf = DoSendSMSReminder(SMSReminder,RepSpec,ORr.CustCode,SRQr.SerNr);
  end else begin
    sentf = DoSendEmailReminder(SMSReminder,RepSpec,ORr.CustCode);
  end;

  if (!sentf) then begin
    SRQr.SentFlag = 3;
    RecordStore(SRQr,true);
    CreateFailedReminderActivity(SMSReminder,ORr.CustCode);
  end;


  return;
end;

global
updating procedure Cust_SendReminder3(record ORVc ORr,record SMSReminderVc SMSReminder,Integer days,Date sd,Date ed)
begin
  string 255 list,qList,qnr;
  Integer i,rwcnt;
  row ORVc ORrw;

  if (SMSReminder.PerBankAcc==0) then begin
    rwcnt = MatRowCnt(ORr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(ORr,i,ORrw);
      SendSingleSMS3(SMSReminder,ORr,ORrw,days,sd,ed);
    end;
  end else begin
    SendSingleSMS4(SMSReminder,ORr,days,sd,ed);
  end;

  return;
end;

function Boolean ReminderAlreadySent(Longint ivnr,Longint remnr)
begin
  record SMSReminderQueueVc SRQr;
  Boolean res;

  SRQr.InvoiceNr = ivnr;
  SRQr.ReminderNr = remnr;
  if (ReadFirstKey("ReminderInvoice",SRQr,2,true)) then begin
    res = true;
  end else begin
    ResetLoop(SRQr);
    SRQr.ReminderNr = remnr;
    if (ReadFirstKey("ReminderInvoiceList:" & ivnr,SRQr,1,true)) then begin
      res = true;
    end;
  end;

  ReminderAlreadySent = res;
  return;
end;

function Boolean SkipCustomerBalance(longint sernr,val minval)
begin
  Boolean res;

  res = false;
  if (GetTotalPayableAmount(sernr)<minval) then begin
    res = true;
  end;

  SkipCustomerBalance = res;
  return;
end;

procedure AddInvoiceToReminderArr(record IVVc IVr,var array record ORVc arrORr,Integer peracc)
begin
  Integer i,rwcnt,rownum,num;
  record ARVc ARr;
  row ORVc ORrw;
  record ORVc ORr;
  string 255 bankacc,bankname,bankbic,bankcode;

  for (i=0;i<arrORr.length;i=i+1) begin
    ORr = arrORr[i];
    if (ORr.CustCode==IVr.CustCode) then begin
      num = i;   
      goto LAddInvoiceToReminderArr;
    end;
  end;
  num = arrORr.length;
  RecordClear(ORr);
  ORr.CustCode = IVr.CustCode;
  ORr.Addr0 = IVr.Addr0;
LAddInvoiceToReminderArr:;

  ARr.InvoiceNr = IVr.SerNr;
  ReadFirstMain(ARr,1,true);
  bankacc = CredManOwnBankAccount(IVr.CustCredManNr,bankname,bankbic,bankcode);
  rwcnt = MatRowCnt(ORr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ORr,i,ORrw);
    if (ORrw.ShipNote==bankacc or peracc==0) then begin
      rownum = i;
      goto LAddInvoiceToReminderArrRow;
    end;
  end;
  ClearRow(ORr,ORrw,1);
  ORrw.ShipNote = bankacc;
  rownum = MatRowCnt(ORr);
LAddInvoiceToReminderArrRow:;
  ORrw.Price = ORrw.Price + ARr.RVal;
  if (nonblank(ORrw.UnitComment)) then begin
    ORrw.UnitComment = ORrw.UnitComment & ",";
  end;
  ORrw.UnitComment = ORrw.UnitComment & IVr.SerNr;
  if (nonblank(ORr.Addr1)) then begin
    ORr.Addr1 = ORr.Addr1 & ",";
  end;
  ORr.Addr1 = ORr.Addr1 & IVr.SerNr;
  MatRowPut(ORr,rownum,ORrw);
  arrORr[num] = ORr;

  return;
end;

function Boolean HasOlderUnpaidInvoices(record IVVc IVr)
begin
  Boolean res,TrHs;
  record ARVc ARr;

  TrHs = true;
  ResetLoop(ARr);
  ARr.CustCode = IVr.CustCode;
  while (LoopKey("CustCode",ARr,1,TrHs)) begin
    if (ARr.CustCode!=IVr.CustCode) then begin
      TrHs = false;
    end else begin
      if (ARr.InvDate>IVr.InvDate) then begin
        res = true;
        TrHs = false;
      end;
    end;
  end;

  HasOlderUnpaidInvoices = res;
  return;
end;

function Boolean MatchLanguage(string langcode,string custcode,vector Boolean vLang)
begin
  record CUVc CUr;
  Boolean res;

  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin
    if (CUr.LangCode==langcode or (blank(langcode) and vLang[CUr.LangCode]==false)) then begin
      res = true;
    end;
  end;

  MatchLanguage = res;
  return;
end;

procedure FindAndSendInvoiceReminders(record SMSReminderVc SMSReminder,var vector Boolean vCust,vector Boolean vLang)
begin
  record SMSReminderQueueVc SRQr;
  record IVVc IVr;
  Boolean TrHs,testf,oldestf;
  record ARVc ARr;
  Integer latedays,i;
  Date td,ed;
  array record ORVc arrORr;
  record ORVc ORr;
  
  td = AddDay(CurrentDate,-SMSReminder.Days);
  switch (SMSReminder.Type) begin
    case 0:
      TrHs = true;
      SRQr.InvDate = td;
      SRQr.SentFlag = 0;
      while (LoopBackKey("SentFlag",SRQr,2,TrHs)) begin
        if (SRQr.SentFlag!=0) then begin
          TrHs = false;
        end else begin
          IVr.SerNr = SRQr.InvoiceNr;
          if (ReadFirstMain(IVr,1,true)) then begin
            testf = true;
            if (nonblank(SMSReminder.CustCode) or SMSReminder.CustCode!=IVr.CustCode) then begin
              testf = false;
            end;
            if (SMSReminder.MinAmount>0 and SkipCustomerBalance(IVr.CustCredManNr,SMSReminder.MinAmount)) then begin
              testf = false;
            end;
            if (vCust[IVr.CustCode]) then begin
              testf = false;
            end;
            if (MatchLanguage(SMSReminder.LangCode,IVr.CustCode,vLang)==false) then begin
              testf = false;
            end;
            if (testf) then begin
              ARr.InvoiceNr = IVr.SerNr;
              ReadFirstMain(ARr,1,true);
              if (ARr.RVal>0) then begin
                queued.Cust_SendReminder(SRQr,SMSReminder,IVr);
              end else begin
                queued.Cust_SetReminderStatus(SRQr,2);
              end;
            end;
          end;
        end;
      end;
    case 2:
      oldestf = true;
      goto LFindAndSendInvoiceReminders_overdue;
    case 1://due date
LFindAndSendInvoiceReminders_overdue:;
      TrHs = true;
      ed = td;
      ARr.DueDate = AddDay(td,-kMaxCheckDays);
      while (LoopKey("DueDate",ARr,1,TrHs)) begin
        if (ARr.DueDate>ed) then begin 
          TrHs = false;
        end else begin
          IVr.SerNr = ARr.InvoiceNr;
          if (ReadFirstMain(IVr,1,true)) then begin
            testf = true;
            if (nonblank(SMSReminder.CustCode) and SMSReminder.CustCode!=IVr.CustCode) then begin
              testf = false;
            end;
            if (SMSReminder.MinAmount>0 and SkipCustomerBalance(IVr.CustCredManNr,SMSReminder.MinAmount)) then begin
              testf = false;
            end;
            if (oldestf) then begin
              if (HasOlderUnpaidInvoices(IVr)) then begin
                testf = false;
              end;
            end;
            if (MatchLanguage(SMSReminder.LangCode,IVr.CustCode,vLang)==false) then begin
              testf = false;
            end;
            if (testf) then begin
              if (ReminderAlreadySent(IVr.SerNr,SMSReminder.SerNr)==false) then begin
                //queued.Cust_SendReminder2(SMSReminder,IVr);
                AddInvoiceToReminderArr(IVr,arrORr,SMSReminder.PerBankAcc);
              end;
            end;
          end;
        end;
      end;
      for (i=0;i<arrORr.length;i=i+1) begin

        ORr = arrORr[i];
        vCust[ORr.CustCode] = true;
        TrHs = true;
        ResetLoop(ARr);
        ARr.CustCode = ORr.CustCode;
        while (LoopKey("CustCode",ARr,1,TrHs)) begin
          if (ARr.CustCode!=ORr.CustCode) then begin
            TrHs = false;
          end else begin
            if (SetInSet(ARr.InvoiceNr,ORr.Addr1)==false) then begin
              if (SMSReminder.OnlyOverdueInvoices==0 or ARr.DueDate>CurrentDate) then begin
                IVr.SerNr = ARr.InvoiceNr;
                if (ReadFirstMain(IVr,1,true)) begin
                AddInvoiceToReminderArr(IVr,arrORr,SMSReminder.PerBankAcc);
                end;
              end;
            end;
          end;
        end;
        ORr = arrORr[i];
        queued.Cust_SendReminder3(ORr,SMSReminder,SMSReminder.Days,AddDay(td,-kMaxCheckDays),ed);
      end;
  end;

  qupdating.UpdateReminderLastSentDate(SMSReminder);
  return;
end;

procedure LoadLanguageVector(vector Boolean vLang)
begin
  Boolean TrHs;
  record SMSReminderVc SMSReminder;
  
  TrHs = true;
  SMSReminder.ActiveFlag = 1;
  while (LoopKey("ActiveFlag",SMSReminder,1,TrHs)) begin
    if (SMSReminder.ActiveFlag!=1) then begin
      TrHs = false;
    end else begin
      vLang[SMSReminder.LangCode] = true;
    end;
  end;

  return;
end;

procedure CheckSMSRemindersCompany()
begin
  Boolean TrHs;
  record SMSReminderVc SMSReminder;
  vector Boolean vCust;
  vector Boolean vLang;
  
  LoadLanguageVector(vLang);
  TrHs = true;
  SMSReminder.ActiveFlag = 1;
  while (LoopKey("ActiveFlag",SMSReminder,1,TrHs)) begin
    if (SMSReminder.ActiveFlag!=1) then begin
      TrHs = false;
    end else begin
      if (ShouldTrigerSMSReminder(SMSReminder)) then begin
        FindAndSendInvoiceReminders(SMSReminder,vCust,vLang);
      end;
    end;
  end;

LCheckSMSRemindersCompany:;
  return;
end;

global
procedure CheckSMSRemindersTask(string args)
begin
  Integer i,rwcnt,oldcomp;
  record CompaniesBlock Compb;

  oldcomp = CurrentCompany;
  BlockLoad(Compb);
  rwcnt = MatRowCnt(Compb);
  for (i=0;i<rwcnt;i=i+1) begin
    if (SetCompany(i+1,false)) then begin
      CheckSMSRemindersCompany;
    end;
  end;
  ResetCompany(oldcomp);

  return;
end;

global
procedure InitSMSReminderTask()
begin
  
  NewPeriodicTask2("CheckSMSRemindersTask","CheckSMSRemindersTask","CheckSMSRemindersTask","",60,"");

  return;
end;

global
updating procedure UpdateSMSReminderQueue(record IVVc IVr,record IVVc IV2r)
begin
  record SMSReminderQueueVc SRQr;
/*
  if (IVr.OKFlag==1 and IV2r.OKFlag==0) then begin
    SRQr.InvoiceNr = IVr.SerNr;
    if (ReadFirstKey("InvoiceNr",SRQr,1,true)==false) then begin
      RecordNew(SRQr);
      SRQr.SerNr = NextSerNr("SMSReminderQueueVc",CurrentDate,-1,false,"");
      SRQr.InvoiceNr = IVr.SerNr;
      SRQr.InvDate = IVr.PayDate;
      RecordInsert(SRQr,true);
    end;
  end else begin
    if (IVr.OKFlag==0 and IV2r.OKFlag==1) then begin
      SRQr.InvoiceNr = IVr.SerNr;
      if (ReadFirstKey("InvoiceNr",SRQr,1,true)) then begin
        RecordRemove(SRQr);
      end;
    end;
  end;
*/

  return;
end;

