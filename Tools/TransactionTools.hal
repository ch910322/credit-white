external inner procedure InvVat(Integer,Integer,Integer,Integer,string,val,var val,var val,var val,var val,var val);
external function Integer GetItemPriority(Longint,string);

external procedure BuildCredManPayPlanCust(record CredManVc,var record CredManPayPlanVc,record CredManSetBlock,Boolean,Boolean);
external procedure BuildCredManInfoMatrix(record CredManVc,record CredManPayPlanVc,record CredManSetBlock,var record SMVc);
external function Boolean BuildCredManInfoMatrixOnSchedule(record CredManVc,record CredManSetBlock,var record SMVc);
external inner function LongInt DateDiff(Date,Date);



global
function string 255 CM_GetCredManTypeSalesItemAccount(Longint sernr,string artcode,string fallback,Boolean debitf)
begin
  record CredManVc CredManr;
  record CredManAccVc CredManAccr;
  row CredManAccVc CredManAccrw;
  string 255 res;
  Integer i,rwcnt;
  record CMInvoicingBlock CIb;

  BlockLoad(CIb);
  if (CIb.UseTypeAccounts==1) then begin
    CredManr.SerNr = sernr;
    if (ReadFirstMain(CredManr,1,true)) then begin
      CredManAccr.CredManType = CredManr.Type;
      if (ReadFirstMain(CredManAccr,1,true)) then begin
        rwcnt = MatRowcnt(CredManAccr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(CredManAccr,i,CredManAccrw);
          if (CredManAccrw.ArtCode==artcode) then begin
            if (debitf) then begin
              res = CredManAccrw.DebitAcc;
            end else begin
              res = CredManAccrw.CreditAcc;
            end;
            i = rwcnt;
          end;
        end;
      end;
    end;
  end;
  if (blank(res)) then begin
    res = fallback;
  end;
  
  CM_GetCredManTypeSalesItemAccount = res;
  return;
end;

global
function string 255 CM_GetCredManTypeSalesItemAccount2(Longint histsernr,string fallback,Boolean debitf)
begin
  record CredManVc CredManr;
  record CredManAccVc CredManAccr;
  row CredManAccVc CredManAccrw;
  string 255 res;
  Integer i,rwcnt;
  record CredHistVc CredHistr;
  record CMInvoicingBlock CIb;

  BlockLoad(CIb);
  if (CIb.UseTypeAccounts==1) then begin
    CredHistr.SerNr = histsernr;
    if (ReadFirstMain(CredHistr,1,true)) then begin
      CredManr.SerNr = CredHistr.CredManNr;
      if (ReadFirstMain(CredManr,1,true)) then begin
        CredManAccr.CredManType = CredManr.Type;
        if (ReadFirstMain(CredManAccr,1,true)) then begin
          rwcnt = MatRowcnt(CredManAccr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(CredManAccr,i,CredManAccrw);
            if (CredManAccrw.ArtCode==CredHistr.ArtCode) then begin
              if (debitf) then begin
                res = CredManAccrw.DebitAcc;
              end else begin
                res = CredManAccrw.CreditAcc;
              end;
              i = rwcnt;
            end;
          end;
        end;
      end;
    end;
  end;
  if (blank(res)) then begin
    res = fallback;
  end;
  
  CM_GetCredManTypeSalesItemAccount2 = res;
  return;
end;


global
function string 255 CM_GetCredManTypePurchItemAccount(Longint sernr,string fallback,Boolean debitf)
begin
  record CredManVc CredManr;
  record CredManAccVc CredManAccr;
  string 255 res;
  record CMInvoicingBlock CIb;

  BlockLoad(CIb);
  if (CIb.UseTypeAccounts==1) then begin
    CredManr.VINr = sernr;
    if (ReadFirstKey("VINr",CredManr,1,true)) then begin
      CredManAccr.CredManType = CredManr.Type;
      if (ReadFirstMain(CredManAccr,1,true)) then begin
        if (debitf) then begin
          res = CredManAccr.PLDebitAcc;
        end else begin
          res = CredManAccr.PLCreditAcc;
        end;
      end;
    end;
  end;
  if (blank(res)) then begin
    res = fallback;
  end;
  
  CM_GetCredManTypePurchItemAccount = res;
  return;
end;

global
function string 255 CM_GetCredManTypePurchItemAccount2(record CredManVc CredManr,string fallback,Boolean debitf)
begin
  record CredManAccVc CredManAccr;
  string 255 res;
  record CMInvoicingBlock CIb;

  BlockLoad(CIb);
  if (CIb.UseTypeAccounts==1) then begin
    CredManAccr.CredManType = CredManr.Type;
    if (ReadFirstMain(CredManAccr,1,true)) then begin
      if (debitf) then begin
        res = CredManAccr.PLDebitAcc;
      end else begin
        res = CredManAccr.PLCreditAcc;
      end;
    end;
  end;
  if (blank(res)) then begin
    res = fallback;
  end;
  
  CM_GetCredManTypePurchItemAccount2 = res;
  return;
end;


global
function string 255 CM_GetTransactionControlAcc(record CredManVc CredManr,string fallback)
begin
  record CredManAccVc CredManAccr;
  string 255 res;
  record CMInvoicingBlock CIb;

  BlockLoad(CIb);
  if (CIb.UseTypeAccounts==1) then begin
    CredManAccr.CredManType = CredManr.Type;
    if (ReadFirstMain(CredManAccr,1,true)) then begin
      res = CredManAccr.ControlAcc;
    end;
  end;
  if (blank(res)) then begin
    res = fallback;
  end;
  
  CM_GetTransactionControlAcc = res;
  return;
end;

global
procedure CM_GetTransactionDebtorsAcc(record CredManVc CredManr,var string shortacc,var string longacc)
begin
  record CredManAccVc CredManAccr;
  string 255 res;
  record CMInvoicingBlock CIb;

  BlockLoad(CIb);
  if (CIb.UseTypeAccounts==1) then begin
    CredManAccr.CredManType = CredManr.Type;
    if (ReadFirstMain(CredManAccr,1,true)) then begin
      shortacc = CredManAccr.DebtorsAccShort;
      longacc = CredManAccr.DebtorsAccLong;
    end;
  end;
  
  return;
end;

global
function Boolean CM_GetInvoiceItemOrder(record IVVc IVr,val tsum,var vector val vAmounts,Boolean debitf)
begin
  val vatprc,vatval,vatexclprc,vatinclprc,rowtax;
  record IVVc tIVr;
  row IVVc IVrw;
  Integer i,rwcnt;
  string 255 acc;
  val sum,tval;
  Boolean res;
  Integer prio;
  record CMInvoicingBlock CIb;

  BlockLoad(CIb);
  if (CIb.UseTypeAccounts==1) then begin

    tval = tsum;

    rwcnt = MatRowCnt(IVr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVr,i,IVrw);
      if (IVrw.stp==kInvoiceRowTypeNormal and IVrw.Sum>0) then begin
        prio = GetItemPriority(IVr.CustCredManNr,IVrw.ArtCode);
        IVrw.rowGP = prio;
        MatRowPut(tIVr,MatRowCnt(tIVr),IVrw);
      end;
    end;
    SortRows(tIVr,"rowGP",false);

    rwcnt = MatRowCnt(tIVr);
    for (i=0;i<rwcnt and tval>0;i=i+1) begin
      MatRowGet(tIVr,i,IVrw);
      InvVat(1,IVr.InclVAT,IVr.NoTAXonVAT,IVr.ExportFlag,IVrw.VATCode,IVrw.Sum,vatprc,vatval,vatexclprc,vatinclprc,rowtax);

      acc = CM_GetCredManTypeSalesItemAccount(IVr.CustCredManNr,IVrw.ArtCode,IVr.ARAcc,debitf);
      sum = IVrw.Sum;

      if (IVr.InclVAT==0) then begin
        sum = sum + vatval;
      end;
      tval = tval - sum;
      if (tval<0) then begin
        sum = sum + tval;
      end;

      vAmounts[acc] = vAmounts[acc] + sum;
      res = true;
    end;
  end;

  CM_GetInvoiceItemOrder = res;
  return;
end;

procedure GetPrincipleParts(record CredManVc CredManr,var val shortval,var val longval)
begin
  record CredManSetBlock CredManSetb;
  record CredManPayPlanVc CredManPayPlanr;
  record SMVc SMr;
  row SMVc SMrw;
  Integer curyear,i,rwcnt;

  BlockLoad(CredManSetb);

  if (BuildCredManInfoMatrixOnSchedule(CredManr,CredManSetb,SMr)==false) then begin
    BuildCredManPayPlanCust(CredManr,CredManPayPlanr,CredManSetb,true,true);
    BuildCredManInfoMatrix(CredManr,CredManPayPlanr,CredManSetb,SMr);
  end;

  curyear = GetYear(CurrentDate);
  rwcnt = MatRowCnt(SMr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SMr,i,SMrw);
    if (GetYear(SMrw.TransDate)==curyear) then begin
      shortval = shortval + SMrw.DebVal;
    end else begin
      longval = longval + SMrw.DebVal;
    end;
  end;

  return;
end;

global
procedure AddCMTransactionDebtorsAccounts(record CredManVc CredManr,var string shortacc,var string longacc,var val shortval,var val longval)
begin
  record CMInvoicingBlock CIb;

  BlockLoad(CIb);
  if (CIb.UseTypeAccounts==1) then begin
    shortval = 0;
    longval = 0;
    GetPrincipleParts(CredManr,shortval,longval);
    CM_GetTransactionDebtorsAcc(CredManr,shortacc,longacc);
  end;

  return;
end;

global
function val GetCredManPeriodAmount(record IVVc IVr,val rowsum)
begin
  Integer days1,days2,totdays;
  val res;
  
  if (nonblank(IVr.CredFromDate)) then begin
    days1 = DaysInMonth(GetYear(IVr.CredFromDate),GetMonth(IVr.CredFromDate));
    days2 = days1 - GetDay(IVr.CredFromDate);
    totdays = DateDiff(IVr.CredToDate,IVr.CredFromDate)+1;
    res = days2*rowsum/totdays;
  end;

  GetCredManPeriodAmount = res;
  return;
end;


global
function Boolean CheckInvoiceDebtorsAC(string acc,record IVVc IVr)
begin
  Boolean res;
  Integer i,rwcnt;
  row IVVc IVrw;
  string 255 ivacc;
  
  res = false;
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    ivacc = CM_GetCredManTypeSalesItemAccount2(IVrw.CredHistNr,IVr.ARAcc,true);
    if (acc==ivacc) then begin
      res = true;
      i = rwcnt;
    end;
  end;

  CheckInvoiceDebtorsAC = res;
  return;
end;