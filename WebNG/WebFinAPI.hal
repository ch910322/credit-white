external inner function string 255 ConvertXml(string);
external inner function roundmode SetRoundModeD(Integer);
external inner function Date DateFromString(string,string);
external inner procedure GetStockValue(string,string,var record ItemStatusVc);
external inner function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
//external inner function Boolean StringIsDate(string);
external inner procedure Find2StockValue(string,string,var val,Date);
external inner procedure ExportTagXml(string,string,Integer);
external inner procedure ExportConvertTagXml(string,string,Integer);
external inner procedure WebOutStringNL(string);
external inner function string 255 ConvertXmlString(string,Boolean);
external inner function string 255 ConvertXml(string);
external inner procedure AddXmlTagToArea(area,string,string,string,Integer);
external inner procedure AddPlainXmlToArea(area,string,Integer);
external inner function string 50 TimeToString(time,string,boolean);
external inner function Date DateFromString(string,string);
external inner procedure LogAreaToFile(string,area);
remote procedure TestInvoiceBasedOnScheduleRow(record CredManSchedVc,row CredManSchedVc,var record IVVc);
external inner procedure AddAreaAfterArea(var area,area);
external procedure BuildCredManPayPlanCust2(record CredManVc,var record CredManPayPlanVc,record CredManSetBlock,Boolean,Boolean,Boolean);

procedure AddXmlTag(string tag,string value,var Area a)
begin
    
  AddTextToArea("<",a);
  AddTextToArea(tag,a);
  AddTextToArea(">",a);  
  AddTextToArea(URLEncode(value),a);
  AddTextToArea("</",a);
  AddTextToArea(tag,a);
  AddTextToArea(">",a);
  return;
end;

// Here is an alternative to achieve AreaBase64Encode functionality.
// We will not use Base64Encode, as it is not bitsafe.
procedure BitSafeAreaBase64Encode(area target,var area encoded) 
begin
  Area chunk,zero;
  LongInt alen,i,j;
  LongInt tmp_long;
  Integer cc;
  string 8 fromArea;
  string 70 b64;
  array string 1 b64_arr;

  // for faster flow
  b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  alen = len(b64);
  for(i=0;i<alen;i=i+1) begin
    b64_arr[i] = Mid(b64,i,1);
  end;

  alen = GetAreaLength(target);
  AddTextToArea(chr(0),zero);
  for(i=0;i<alen;i=i+3) begin
    SetAreaZeroSize(chunk);
    GetAreaFromArea(target,i,3,chunk);
    InsertAreaBeforeArea(zero,chunk); // we want to treat this chunk as unsigned long
    tmp_long = GetLongFromArea(chunk,0);
    for(j=0;j<4;j=j+1) begin
      cc = Mod(tmp_long,64);
      tmp_long = (tmp_long-cc)/64;
      fromArea = b64_arr[cc] & fromArea;
    end;
    AddTextToArea(fromArea,encoded);
    fromArea = "";
  end;

  switch(Mod(alen,3)) begin
    case 1: // 8 bit final
      fromArea = "==";
    case 2: // 16 bit final
      fromArea = "=";
  end;
  
  AddTextToArea(fromArea,encoded);
  return
end;

procedure OutXmlHeader(string registername)
begin
  string 255 tstr,tstr2;
  array string 255 aKeys;
  integer i;
  vector string 255 vExtra;
  
  vExtra["sort"] = WebGetArg("sort");
  vExtra["range"] = WebGetArg("range");
  vExtra["key"] = WebGetArg("key");
  vExtra["keyname"] = WebGetArg("keyname");
  vExtra["sortfield"] = WebGetArg("sortfield");
  vExtra["fields"] = WebGetArg("fields");
  vExtra["doctype"] = WebGetArg("doctype");
  GetVectorTags(vExtra,aKeys);
  for (i = 0; i<aKeys.length; i = i + 1) begin
    if (nonblank(vExtra[aKeys[i]])) then begin
      tstr2 = tstr2 & LowerCase(aKeys[i]) & "=""" & vExtra[aKeys[i]] & """ ";
    end;
  end;
  WebOutStringNL("<?xml version='1.0' encoding='UTF-8' standalone='yes'?>");
  tstr = "<data  register=""" & registername & """ " & tstr2 & "systemversion=""" & VersionBuild & """>";
  WebOutStringNL(tstr);
  return;
end;

procedure OutputRecordCredManSchedVc(record CredManSchedVc CMr, vector string vFilter)
begin
  row CredManSchedVc CMrw;
  integer i,cnt;
  area a;
  boolean testf, allf;
  date frPayDate, toPayDate;
  string 255 tstr;
  record IVVc IVr;
  val t;
  
  frPayDate = DateFromString(FirstInRange(vFilter["filter.row.PayDate"],10),"YYYY-MM-DD");
  toPayDate = DateFromString(LastInRange(vFilter["filter.row.PayDate"],10),"YYYY-MM-DD");
  /*allf = vFilter["return"]=="all";
  LogText(0,"vFilter[""return""]" & vFilter["return"] & " allf=" & allf);
  */
  SetAreaZeroSize(a);
  AddPlainXmlToArea(a,"<CredManSchedVc>",0);
  AddXMLTagToArea(a,"CredManNr","",CMr.CredManNr,1);//todo
  AddXMLTagToArea(a,"CustCode","",ConvertXMLString(CMr.CustCode,true),1);
  AddXMLTagToArea(a,"CustName","",ConvertXMLString(CMr.CustName,true),1);
  AddXMLTagToArea(a,"TransDate","",DateToString(CMr.TransDate,"YYYY-MM-DD"),1);
  //AddXMLTagToArea(a,"TransTime","",TimeToString(CMr.TransTime,"HH:MM:SS",false),1);//outputs garbage instead of ":"
  AddXMLTagToArea(a,"TransTime","",CMr.TransTime,1);
  cnt=MatRowCnt(CMr);
  AddPlainXmlToArea(a,"<rows>",1);
  for (i=0;i<cnt;i=i+1) begin
    testf = true;
    MatRowGet(CMr,i,CMrw);
    if (nonblankdate(frPayDate)) then begin
      if (CMrw.PayDate<frPayDate) then begin
        testf = false;
      end;
    end;
    if (nonblankdate(toPayDate)) then begin
      if (CMrw.PayDate>toPayDate) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      AddPlainXmlToArea(a,"<row rownumber=""" & i & """>",2);
      AddXMLTagToArea(a,"Type","",ConvertXmlString(StringFromSet(2027,CMrw.Type),true),3);
      AddXMLTagToArea(a,"InvDate","",DateToString(CMrw.InvDate,"YYYY-MM-DD"),3);
      AddXMLTagToArea(a,"Principle","",ValToString(CMrw.Principle,M4Val,"",".",0),3);
      AddXMLTagToArea(a,"Interest","",ValToString(CMrw.Interest,M4Val,"",".",0),3);
      AddXMLTagToArea(a,"Fees","",ValToString(CMrw.Fees,M4Val,"",".",0),3);
      //Sum1 - Amunt ex vat
      t = blankval;
      if (CMrw.Type==0) then begin
        if (nonblank(CMrw.InvoiceNr)) then begin
          IVr.SerNr = StringToLongInt(CMrw.InvoiceNr);
          if (ReadFirstMain(IVr,1,true)) then begin
            t = IVr.Sum3;        
          end;
        end else begin
          TestInvoiceBasedOnScheduleRow(CMr,CMrw,IVr);
          t = IVr.Sum3;
        end;
      end;
      AddXMLTagToArea(a,"VATTotal","",ValToString(t,M4Val,"",".",0),3);
      AddXMLTagToArea(a,"Total","",ValToString(CMrw.Total,M4Val,"",".",0),3);
      AddXMLTagToArea(a,"Invoiced","",ConvertXmlString(StringFromSet(432,CMrw.Invoiced),true),3);
      AddXMLTagToArea(a,"FromDate","",DateToString(CMrw.FromDate,"YYYY-MM-DD"),3);
      AddXMLTagToArea(a,"ToDate","",DateToString(CMrw.ToDate,"YYYY-MM-DD"),3);
      AddXMLTagToArea(a,"InvoiceNr","",ConvertXMLString(CMrw.InvoiceNr,true),3);
      AddXMLTagToArea(a,"PayDate","",DateToString(CMrw.PayDate,"YYYY-MM-DD"),3);
      AddXMLTagToArea(a,"FeesMatrix","","",3);
      AddXMLTagToArea(a,"Balance","",ValToString(CMrw.Balance,M4Val,"",".",0),3);
      AddXMLTagToArea(a,"Deposit","",ValToString(CMrw.Deposit,M4Val,"",".",0),3);
      AddPlainXmlToArea(a,"</row>",2);
    end;
  end;
  AddPlainXmlToArea(a,"</rows>",1);
  AddPlainXmlToArea(a,"</CredManSchedVc>",0);
  WebOutArea2(a);
  return;
end;

procedure GenCredManSchedVcXml()
begin
  record CredManSchedVc CMr;
  row CredManSchedVc CMw;
  string 255 arg;
  Boolean TrHs,testf;
  string 255 tstr;
  vector string 255 vFilter;
  LongInt frnr, tonr;
  LongInt offset, limit, limitprogress; //TODO: ? limits
  
  arg = WebGetArg("CredManNr");
  if (nonblank(arg)) then begin
    frnr=StringToLongInt(arg);
    tonr=frnr;
  end else begin
    tstr=WebGetArg("range");
    frnr = StringToLongInt(FirstInRange(tstr,15));
    tonr = StringToLongInt(LastInRange(tstr,15));
  end;
  tstr=WebGetArg("offset");
  offset = StringToLongInt(tstr);
  tstr=WebGetArg("limit");
  limit = StringToLongInt(tstr);
  vFilter["filter.row.PayDate"] = WebGetArg("filter.row.PayDate");
  WebSetContentType("text/xml"); 
  OutXmlHeader("CredManSchedVc");
  if (frnr>-1) then begin
    CMr.CredManNr=frnr;
    TrHs=true;
    while (LoopMain(CMr,1,TrHs)) begin
      testf=true;
      if (tonr!=-1) then begin
        if (CMr.CredManNr>tonr) then begin
          TrHs=false;
          testf=false;
        end;
      end;
      if (testf) then begin
        OutputRecordCredManSchedVc(CMr,vFilter);
      end;
    end;
  end;
  WebOutStringNL("</data>");
  return;
end;

procedure GetTotalOverDue()
begin
  Record CredManVc CMr;
  record ARVc ARr;
  record IVVc IVr;
  area a;
  string 255 arg;
  LongInt id;
  Boolean TrHs,testf;
  string 255 tstr;
  val tot;
    
  WebSetContentType("text/xml"); 
  OutXmlHeader("GetTotalOverDue");
  arg = WebGetArg("CredManNr");
  id = StringToLongInt(arg);
  CMr.SerNr = id;
  if (ReadFirstMain(CMr,1,true)) then begin
    ARr.CustCode=CMr.CustCode;
    TrHs=true;
    while (LoopKey("CustCode", ARr,1,TrHs)) begin
      testf=true; 
      if (ARr.CustCode!=CMr.CustCode) then begin
        TrHs=false;
        testf=false;
      end;
      if (ARr.DueDate>=CurrentDate) then begin
        testf=false;
      end;
      if (testf) then begin
        IVr.SerNr = ARr.InvoiceNr;
        if (ReadFirstMain(IVr,1,true)) then begin
          if (IVr.CustCredManNr==id) then begin
            tot = tot + ARr.BookRVal;
          end;
        end;      
      end;
    end;
  end;
  AddPlainXmlToArea(a,"<GetTotalOverDue>",0);
  AddXMLTagToArea(a,"CredManNr","",arg,1);
  AddPlainXmlToArea(a,"<Result>",1);
  AddXMLTagToArea(a,"TotalOverdue","",ValToString(tot,M4Val,"",".",0),1);
  AddPlainXmlToArea(a,"</Result>",1);
  AddPlainXmlToArea(a,"</GetTotalOverDue>",0);
  WebOutArea2(a);
  WebOutStringNL("</data>");
  return;
end;

procedure GetRepaidPrincipal()
begin
  LongInt id;
  val tot;
  string 255 arg;
  area a;
  record CredManSetBlock CredManSetb;
  record CredManPayPlanVc CredManPayPlanr;
  row CredManPayPlanVc CredManPayPlanrw;
  record CredManVc CredManr;
  integer i,rwcnt;
  
  arg = WebGetArg("CredManNr");
  id = StringToLongInt(arg);
  if (id!=-1) then begin
    BlockLoad(CredManSetb);
    CredManr.SerNr = id;
    if (ReadFirstMain(CredManr,1,true)) then begin
      BuildCredManPayPlanCust2(CredManr,CredManPayPlanr,CredManSetb,true,true,false);  
      rwcnt = MatRowCnt(CredManPayPlanr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(CredManPayPlanr,i,CredManPayPlanrw);
        if (CredManPayPlanrw.PlanType==6) then begin
          tot = tot + CredManPayPlanrw.Sum;
        end;
        if (CredManPayPlanrw.PlanType==5) then begin
          tot = tot - CredManPayPlanrw.Sum;
        end;
      end;
    end;
  end;
  WebSetContentType("text/xml"); 
  OutXmlHeader("GetRepaidPrincipal");
  AddPlainXmlToArea(a,"<GetRepaidPrincipal>",0);
  AddXMLTagToArea(a,"CredManNr","",arg,1);
  AddPlainXmlToArea(a,"<Result>",1);
  AddXMLTagToArea(a,"TotalPrincipal","",ValToString(tot,M4Val,"",".",0),2);
  AddPlainXmlToArea(a,"</Result>",1);
  AddPlainXmlToArea(a,"</GetRepaidPrincipal>",0);
  WebOutArea2(a);
  WebOutStringNL("</data>");
  return;
end;

procedure GetSchedulePDF(LongInt id)
begin
  record AgreementDocVc ADr;
  record RLinkVc RLr;
  record Attach2Vc Attachr;
  date d1,d2;
  integer l,i;
  boolean datedfound;
  string 255 fname, struuid;
  area a,atemp,abase64;
  string 255 tstr;
  longint asernr;
  
  asernr = -1;
  datedfound=false;
  ADr.RecordNr = id;
  ADr.Type = 2;
  ADr.RecordType = 0;
  if (ReadFirstKey("RecordNr",ADr,3,true)) then begin
    i = 1;
    while (ReadRecordLink(ADr,i,Attachr,RLr)) begin
      if (Attachr.Uploading==0) then begin
        if (right(Attachr.FileName,4)==".pdf") then begin
          if (FileExists("Attach/" & Attachr.UUID)) then begin
            asernr = Attachr.SerNr;
            l = len(Attachr.FileName);
            tstr = Mid(Attachr.FileName,l-16,4);
            WebOutStringNL("<tstr>" & tstr & "</tstr>");
            if (Mid(Attachr.FileName,l-16,4)=="_new") then begin
              d2 = DateFromString(Mid(Attachr.FileName,l-12,8),"YYYYMMDD");
              if (d2>d1) then begin
                datedfound = true; 
                asernr = Attachr.SerNr;
              end;
            end;
          end;
        end;
      end;
      i = i + 1;
    end;
    if (!datedfound) then begin
        //todo ?     
    end;
  end;
  if (asernr!=-1) then begin
    Attachr.SerNr = asernr;
    if (ReadFirstMain(Attachr,1,true)) then begin
      fname = Attachr.FileName;
      AddAttachFileToArea(Attachr,atemp,false);      
      BitSafeAreaBase64Encode(atemp,abase64);
    end;
  end;
  
  AddPlainXmlToArea(a,"<GetDocument>",0);
  AddXMLTagToArea(a,"CredManNr","",id,1);
  AddPlainXmlToArea(a,"<Result>",1);
  AddXMLTagToArea(a,"FileName","",ConvertXMLString(fname,true),2);
  //AddXMLTagToArea(a,"FileSize","",,2);
  AddPlainXmlToArea(a,"<File64>",2);
  AddAreaAfterArea(a,abase64);
  AddPlainXmlToArea(a,"</File64>",2);
  AddPlainXmlToArea(a,"</Result>",1);
  AddPlainXmlToArea(a,"</GetDocument>",0);
  WebOutArea2(a);
  
  return;
end;

procedure GetDocument()
begin
  string 255 arg, type;
  LongInt id;
  
  WebSetContentType("text/xml"); 
  OutXmlHeader("GetDocument");
  arg = WebGetArg("CredManNr");
  id = StringToLongint(arg);
  type = WebGetArg("doctype");
  switch (type) begin
    case "schedule":
      GetSchedulePDF(id);
  end;
  
  WebOutString("</data>");
  return;
end;

global
procedure WebFinAPI()
begin
  string 255 tstr,rep;
  string 20 compcode;
  Integer newcomp,oldcomp;
  boolean compset;
  area a;
  
  compset=false;
  newcomp = StringToInt(WebGetArg("company"));
  rep = WebGetArg("register");
  if (newcomp<=0) then begin 
    WebSetContentType("text/xml");
    WebOutString("<error>Wrong company specified</error>")    
    goto LWebFinAPI;
  end;
  oldcomp = CurrentCompany;
  if (newcomp!=oldcomp) then begin
    if (SetCompany(newcomp,false)) then begin
      compset=true;  
    end;
  end;
  switch (rep) begin
    case "CredManSchedVc":
      GenCredManSchedVcXml;
    case "GetTotalOverDue":
      GetTotalOverDue;
    case "GetRepaidPrincipal":
      GetRepaidPrincipal;
    case "GetDocument":
      GetDocument;
  end;
  if (compset) then begin
    ResetCompany(oldcomp);
  end;
  LWebFinAPI:;
  return;
end;
