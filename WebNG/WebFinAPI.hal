external inner function string 255 ConvertXml(string);
external inner function roundmode SetRoundModeD(Integer);
external inner function Date DateFromString(string,string);
external inner procedure GetStockValue(string,string,var record ItemStatusVc);
external inner function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
//external inner function Boolean StringIsDate(string);
external inner procedure Find2StockValue(string,string,var val,Date);
external inner procedure ExportTagXml(string,string,Integer);
external inner procedure ExportConvertTagXml(string,string,Integer);
external inner procedure WebOutStringNL(string);
external inner function string 255 ConvertXmlString(string,Boolean);
external inner function string 255 ConvertXml(string);
external inner procedure AddXmlTagToArea(area,string,string,string,Integer);
external inner procedure AddPlainXmlToArea(area,string,Integer);
external inner function string 50 TimeToString(time,string,boolean);
external inner function Date DateFromString(string,string);
external inner procedure LogAreaToFile(string,area);
remote procedure TestInvoiceBasedOnScheduleRow(record CredManSchedVc,row CredManSchedVc,var record IVVc);
external inner procedure AddAreaAfterArea(var area,area);
external procedure BuildCredManPayPlanCust2(record CredManVc,var record CredManPayPlanVc,record CredManSetBlock,Boolean,Boolean,Boolean);
external function val GetCredHistOpenValueOnDate(Longint,Date);
external inner updating procedure CreateInvoicePdfFile(record IVVc);
external inner procedure BitSafeBase64EncodeAnArea(var area); 
external inner procedure GetPrePayments(record VIVc,var val);
external inner procedure PurgeTRExtYc(record PurgeTRVc,var string);
external inner function Integer GetIntYc(Date);
external inner function Integer TypeOfCurncy(var string,var Integer);
external inner function string 255 StrReplace(string,string,string);
external inner procedure SplitEclass(string,var Array string);
external inner procedure SplitString(string,string,var array string);

enum begin
  kEventTypeNone = 0,
  kEventTypeCalcInstalment = 1,
  kEventTypeCalcInterest = 2,
  kEventTypeCalcDeposit = 3,
  kEventTypeCalcFees = 4,
  kEventTypeIssueInstalment = 5,
  kEventTypeIssueInterest = 6,
  kEventTypeIssueDeposit = 7,
  kEventTypeIssueFees = 8,
  kEventTypeIssueLateFees = 9,
  kEventTypePaidInterest = 13,
  kEventTypePaidInstalment = 14,
  kEventTypePaidDeposit = 15,
  kEventTypePaidFees = 16,
  kEventTypeSoldAgreement = 17,
  kEventTypePayout = 18,
  kEventTypePartialBuyout = 19,
end;

procedure AddXmlTag(string tag,string value,var Area a)
begin
    
  AddTextToArea("<",a);
  AddTextToArea(tag,a);
  AddTextToArea(">",a);  
  AddTextToArea(URLEncode(value),a);
  AddTextToArea("</",a);
  AddTextToArea(tag,a);
  AddTextToArea(">",a);
  return;
end;

procedure OutXmlHeader(string registername)
begin
  string 255 tstr,tstr2;
  array string 255 aKeys;
  integer i;
  vector string 255 vExtra;
  
  vExtra["sort"] = WebGetArg("sort");
  vExtra["range"] = WebGetArg("range");
  vExtra["key"] = WebGetArg("key");
  vExtra["keyname"] = WebGetArg("keyname");
  vExtra["sortfield"] = WebGetArg("sortfield");
  vExtra["fields"] = WebGetArg("fields");
  vExtra["doctype"] = WebGetArg("doctype");
  vExtra["limit"] = WebGetArg("limit");
  vExtra["offset"] = WebGetArg("offset");
  vExtra["rowlimit"] = WebGetArg("rowlimit");
  vExtra["rowoffset"] = WebGetArg("rowoffset");
  GetVectorTags(vExtra,aKeys);
  for (i = 0; i<aKeys.length; i = i + 1) begin
    if (nonblank(vExtra[aKeys[i]])) then begin
      tstr2 = tstr2 & LowerCase(aKeys[i]) & "=""" & vExtra[aKeys[i]] & """ ";
    end;
  end;
  WebOutStringNL("<?xml version='1.0' encoding='UTF-8' standalone='yes'?>");
  tstr = "<data  register=""" & registername & """ " & tstr2 & "systemversion=""" & VersionBuild & """>";
  WebOutStringNL(tstr);
  return;
end;

function integer IsVATApplied(record CredManSchedVc CMr)
begin
  integer res,i,cnt;
  row CredManSchedVc CMrw;
  record IVVc IVr;
  boolean testf;
  val t;
  
  res = 0;
  cnt=MatRowCnt(CMr);
  for (i=0;i<cnt;i=i+1) begin
    testf = true;
    MatRowGet(CMr,i,CMrw);
    t = blankval;
    if (CMrw.Type==0) then begin
      if (nonblank(CMrw.InvoiceNr)) then begin
        IVr.SerNr = StringToLongInt(CMrw.InvoiceNr);
        if (ReadFirstMain(IVr,1,true)) then begin
          t = IVr.Sum3;        
        end;
      end else begin
        TestInvoiceBasedOnScheduleRow(CMr,CMrw,IVr);
        t = IVr.Sum3;
      end;
      if ((t!=blankval) and (t!=0.00)) then begin
        res = 1;
        i = cnt;
      end;
    end;
  end;
  IsVATApplied = res;
end;
 
procedure OutputRecordCredManSchedVc(record CredManSchedVc CMr, vector string vFilter,LongInt rowoffset,LongInt rowlimit)
begin
  row CredManSchedVc CMrw;
  integer i,cnt;
  area a;
  boolean testf,headoutf,skipf,nooutputf;
  date frPayDate, toPayDate;
  string 255 tstr;
  record IVVc IVr;
  val t;
  LongInt countout,curr,c2;
  
  headoutf = false;
  nooutputf = false;
  countout = 0;
  curr = 0;
  frPayDate = DateFromString(FirstInRange(vFilter["filter.row.PayDate"],10),"YYYY-MM-DD");
  toPayDate = DateFromString(LastInRange(vFilter["filter.row.PayDate"],10),"YYYY-MM-DD");
  
  cnt=MatRowCnt(CMr);
  for (i=0;i<cnt;i=i+1) begin
    testf = true;
    MatRowGet(CMr,i,CMrw);
    if (nonblankdate(frPayDate)) then begin
      if (CMrw.PayDate<frPayDate) then begin
        testf = false;
      end;
    end;
    if (nonblankdate(toPayDate)) then begin
      if (CMrw.PayDate>toPayDate) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      skipf = false;
      if ((rowoffset>0) and (curr<rowoffset)) then begin
        skipf = true;
      end;
      if ((rowlimit>0) and (countout>=rowlimit)) then begin
        skipf = true;
      end;
      curr = curr + 1;
      if (!skipf) then begin
        countout = countout + 1;
        if (headoutf==false) then begin
          headoutf = true;
          if (nooutputf==false) then begin
            SetAreaZeroSize(a);
            AddPlainXmlToArea(a,"<CredManSchedVc>",0);
            AddXMLTagToArea(a,"CredManNr","",CMr.CredManNr,1);
            AddXMLTagToArea(a,"VATApplied","",IsVATApplied(CMr),1);
            AddXMLTagToArea(a,"CustCode","",ConvertXMLString(CMr.CustCode,true),1);
            AddXMLTagToArea(a,"CustName","",ConvertXMLString(CMr.CustName,true),1);
            AddXMLTagToArea(a,"TransDate","",DateToString(CMr.TransDate,"YYYY-MM-DD"),1);
            //AddXMLTagToArea(a,"TransTime","",TimeToString(CMr.TransTime,"HH:MM:SS",false),1);//outputs garbage instead of ":"
            AddXMLTagToArea(a,"TransTime","",CMr.TransTime,1);
            AddPlainXmlToArea(a,"<rows>",1);
          end;
        end;
        if (nooutputf==false) then begin
          AddPlainXmlToArea(a,"<row rownumber=""" & i & """>",2);
          AddXMLTagToArea(a,"Type","",ConvertXmlString(StringFromSet(2027,CMrw.Type),true),3);
          AddXMLTagToArea(a,"InvDate","",DateToString(CMrw.InvDate,"YYYY-MM-DD"),3);
          AddXMLTagToArea(a,"Principle","",ValToString(CMrw.Principle,M4Val,"",".",0),3);
          AddXMLTagToArea(a,"Interest","",ValToString(CMrw.Interest,M4Val,"",".",0),3);
          //AddXMLTagToArea(a,"Fees","",ValToString(CMrw.Fees,M4Val,"",".",0),3); customer request: do not output
          //Sum1 - Amunt ex vat
          tstr = "";
          t = blankval;
          if (CMrw.Type==0) then begin
            if (nonblank(CMrw.InvoiceNr)) then begin
              IVr.SerNr = StringToLongInt(CMrw.InvoiceNr);
              if (ReadFirstMain(IVr,1,true)) then begin
                t = IVr.Sum3;        
                tstr = IVr.CurncyCode;
              end;
            end else begin
              TestInvoiceBasedOnScheduleRow(CMr,CMrw,IVr);
              t = IVr.Sum3;
              tstr = IVr.CurncyCode;
            end;
          end;
          AddXMLTagToArea(a,"VATTotal","",ValToString(t,M4Val,"",".",0),3);
          AddXMLTagToArea(a,"Total","",ValToString(CMrw.Total,M4Val,"",".",0),3);
          AddXMLTagToArea(a,"Invoiced","",ConvertXmlString(StringFromSet(432,CMrw.Invoiced),true),3);
          AddXMLTagToArea(a,"FromDate","",DateToString(CMrw.FromDate,"YYYY-MM-DD"),3);
          AddXMLTagToArea(a,"ToDate","",DateToString(CMrw.ToDate,"YYYY-MM-DD"),3);
          AddXMLTagToArea(a,"InvoiceNr","",ConvertXMLString(CMrw.InvoiceNr,true),3);
          AddXMLTagToArea(a,"PayDate","",DateToString(CMrw.PayDate,"YYYY-MM-DD"),3);
          AddXMLTagToArea(a,"FeesMatrix","","",3);
          AddXMLTagToArea(a,"Balance","",ValToString(CMrw.Balance,M4Val,"",".",0),3);
          AddXMLTagToArea(a,"Deposit","",ValToString(CMrw.Deposit,M4Val,"",".",0),3);
          AddXMLTagToArea(a,"CurncyCode","",tstr,3);
          AddPlainXmlToArea(a,"</row>",2);
        end;
      end;
    end;
  end;
  if (nooutputf==false) then begin
    if (headoutf==true) then begin
      AddPlainXmlToArea(a,"</rows>",1);
      AddXMLTagToArea(a,"RowCount","",curr,3);
      c2 = rowoffset+countout;
      if (c2>=curr) then begin
        AddXMLTagToArea(a,"EndOfRows","","",3);
      end;
      AddPlainXmlToArea(a,"</CredManSchedVc>",0);
    end;
    WebOutArea2(a);
  end;
  return;
end;

procedure GenCredManSchedVcXml()
begin
  record CredManSchedVc CMr;
  row CredManSchedVc CMw;
  string 255 arg;
  Boolean TrHs,testf,testf2;
  string 255 tstr;
  vector string 255 vFilter;
  LongInt frnr, tonr;
  LongInt rowoffset,rowlimit; //TODO: ? limits
  
  arg = WebGetArg("CredManNr");
  if (nonblank(arg)) then begin
    frnr=StringToLongInt(arg);
    tonr=frnr;
  end else begin
    tstr=WebGetArg("range");
    frnr = StringToLongInt(FirstInRange(tstr,15));
    tonr = StringToLongInt(LastInRange(tstr,15));
  end;
  tstr=WebGetArg("rowoffset");
  rowoffset = StringToLongInt(tstr);
  if (rowoffset==-1) then begin
    rowoffset = 0;
  end;
  tstr=WebGetArg("rowlimit");
  rowlimit = StringToLongInt(tstr);
  if (rowlimit==-1) then begin
    rowlimit = 0;
  end;
  vFilter["filter.row.PayDate"] = WebGetArg("filter.row.PayDate");
  WebSetContentType("text/xml"); 
  OutXmlHeader("CredManSchedVc");
  if (frnr>-1) then begin
    CMr.CredManNr=frnr;
    TrHs=true;
    while (LoopMain(CMr,1,TrHs)) begin
      testf=true;
      if (tonr!=-1) then begin
        if (CMr.CredManNr>tonr) then begin
          TrHs=false;
          testf=false;
        end;
      end;
      if (testf) then begin
        OutputRecordCredManSchedVc(CMr,vFilter,rowoffset,rowlimit);
      end;
    end;
  end;
  WebOutStringNL("</data>");
  return;
end;

procedure GetTotalOverDue()
begin
  Record CredManVc CMr;
  record ARVc ARr;
  record IVVc IVr;
  area a;
  string 255 arg;
  LongInt id;
  Boolean TrHs,testf;
  string 255 tstr;
  val tot;
    
  WebSetContentType("text/xml"); 
  OutXmlHeader("GetTotalOverDue");
  arg = WebGetArg("CredManNr");
  id = StringToLongInt(arg);
  CMr.SerNr = id;
  if (ReadFirstMain(CMr,1,true)) then begin
    ARr.CustCode=CMr.CustCode;
    TrHs=true;
    while (LoopKey("CustCode", ARr,1,TrHs)) begin
      testf=true; 
      if (ARr.CustCode!=CMr.CustCode) then begin
        TrHs=false;
        testf=false;
      end;
      if (ARr.DueDate>=CurrentDate) then begin
        testf=false;
      end;
      if (testf) then begin
        IVr.SerNr = ARr.InvoiceNr;
        if (ReadFirstMain(IVr,1,true)) then begin
          if (IVr.CustCredManNr==id) then begin
            tot = tot + ARr.BookRVal;
          end;
        end;      
      end;
    end;
  end;
  AddPlainXmlToArea(a,"<GetTotalOverDue>",0);
  AddXMLTagToArea(a,"CredManNr","",arg,1);
  AddPlainXmlToArea(a,"<Result>",1);
  AddXMLTagToArea(a,"TotalOverdue","",ValToString(tot,M4Val,"",".",0),1);
  AddXMLTagToArea(a,"CurncyCode","",CMr.CurncyCode,1);
  AddPlainXmlToArea(a,"</Result>",1);
  AddPlainXmlToArea(a,"</GetTotalOverDue>",0);
  WebOutArea2(a);
  WebOutStringNL("</data>");
  return;
end;

procedure GetRepaidPrincipal()
begin
  LongInt id;
  val tot,paidint,paidinst;
  string 255 arg;
  area a;
  record CredManSetBlock CredManSetb;
  record CredManPayPlanVc CredManPayPlanr;
  row CredManPayPlanVc CredManPayPlanrw;
  record CredManVc CredManr;
  integer i,rwcnt;
  string 255 tstr;
  
  arg = WebGetArg("CredManNr");
  id = StringToLongInt(arg);
  if (id!=-1) then begin
    BlockLoad(CredManSetb);
    CredManr.SerNr = id;
    if (ReadFirstMain(CredManr,1,true)) then begin
      tstr = CredManr.CurncyCode;
      BuildCredManPayPlanCust2(CredManr,CredManPayPlanr,CredManSetb,true,true,false);  
      rwcnt = MatRowCnt(CredManPayPlanr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(CredManPayPlanr,i,CredManPayPlanrw);
        switch (CredManPayPlanrw.PlanType) begin
          case kEventTypePaidInstalment: paidinst = paidinst + CredManPayPlanrw.Sum;
        end;
      end;
    end;
  end;
  WebSetContentType("text/xml"); 
  OutXmlHeader("GetRepaidPrincipal");
  AddPlainXmlToArea(a,"<GetRepaidPrincipal>",0);
  AddXMLTagToArea(a,"CredManNr","",arg,1);
  AddPlainXmlToArea(a,"<Result>",1);
  AddXMLTagToArea(a,"TotalPrincipal","",ValToString(paidinst,M4Val,"",".",0),2);
  AddXMLTagToArea(a,"CurncyCode","",tstr,2);
  AddPlainXmlToArea(a,"</Result>",1);
  AddPlainXmlToArea(a,"</GetRepaidPrincipal>",0);
  WebOutArea2(a);
  WebOutStringNL("</data>");
  return;
end;

procedure GetSchedulePDF(LongInt id, integer nopdfoutput)
begin
  record AgreementDocVc ADr;
  record RLinkVc RLr;
  record Attach2Vc Attachr;
  date d1,d2;
  integer l,i;
  boolean datedfound;
  string 255 fname, struuid;
  area a,atemp,abase64;
  string 255 tstr,nrstr;
  longint asernr,altsernr;
  integer lnr;
  
  asernr = -1;
  altsernr = -1;
  nrstr = id;
  lnr = len(nrstr);
  datedfound=false;
  ADr.RecordNr = id;
  ADr.Type = 2;
  ADr.RecordType = 0;
  if (ReadFirstKey("RecordNr",ADr,3,true)) then begin
    i = 1;
    while (ReadRecordLink(ADr,i,Attachr,RLr)) begin
      if (Attachr.Uploading==0) then begin
        if (right(Attachr.FileName,4)==".pdf") then begin
          if (FileExists("Attach/" & Attachr.UUID)) then begin
            if (right(Attachr.FileName,4+lnr)==nrstr & ".pdf") then begin
              altsernr = Attachr.SerNr;
            end else begin
              l = len(Attachr.FileName);
              if (Mid(Attachr.FileName,l-16,4)=="_new") then begin
                d2 = DateFromString(Mid(Attachr.FileName,l-12,8),"YYYYMMDD");
                if (d2>d1) then begin
                  datedfound = true; 
                  asernr = Attachr.SerNr;
                end;
              end;
            end;
          end;
        end;
      end;
      i = i + 1;
    end;
    if (!datedfound) then begin
       asernr = altsernr;
    end;
  end;
  if (asernr!=-1) then begin
    Attachr.SerNr = asernr;
    if (ReadFirstMain(Attachr,1,true)) then begin
      fname = Attachr.FileName;
      if (nopdfoutput==0) then begin
        AddAttachFileToArea(Attachr,abase64,false);      
        BitSafeBase64EncodeAnArea(abase64);
      end;
    end;
  end;
  
  AddPlainXmlToArea(a,"<GetDocument>",0);
  AddXMLTagToArea(a,"CredManNr","",id,1);
  AddPlainXmlToArea(a,"<Result>",1);
  AddXMLTagToArea(a,"FileName","",ConvertXMLString(fname,true),2);
  //AddXMLTagToArea(a,"FileSize","",,2);
  if (nopdfoutput==0) then begin
    AddPlainXmlToArea(a,"<File64>",2);
    AddAreaAfterArea(a,abase64);
    AddPlainXmlToArea(a,"</File64>",2);
  end;
  AddPlainXmlToArea(a,"</Result>",1);
  AddPlainXmlToArea(a,"</GetDocument>",0);
  WebOutArea2(a);
  
  return;
end;

function LongInt GetInvoicePDFAttachNr(longint id)
begin
  record IVVc IVr;
  record RLinkVc RLr;
  record Attach2Vc Attachr;
  date d1,d2;
  integer l,i,livnr,loffnr;
  string 255 fname, struuid;
  area a,atemp,abase64;
  string 255 ivnrstr,ivoffnrstr;
  longint asernr;
  
  asernr = -1;
  IVr.SerNr = id;
  ivnrstr = id;
  livnr = len(ivnrstr);
  if (ReadFirstMain(IVr,1,true)) then begin
    ivoffnrstr = StrReplace(IVr.OfficialSerNr,"/","");
    loffnr = len(ivoffnrstr);
    i = 1;
    while (ReadRecordLink(IVr,i,Attachr,RLr)) begin
      if (Attachr.Uploading==0) then begin
        if ((nonblank(ivoffnrstr)) and (right(Attachr.FileName,4+loffnr)==ivoffnrstr & ".pdf")) then begin
          if (FileExists("Attach/" & Attachr.UUID)) then begin
            asernr = Attachr.SerNr;
            goto LW1;
          end;
        end else begin
          if (right(Attachr.FileName,4+livnr)==ivnrstr & ".pdf") then begin
            if (FileExists("Attach/" & Attachr.UUID)) then begin
              asernr = Attachr.SerNr;
              goto LW1;
            end;
          end;
        end;
      end;
      i = i + 1;
    end;
    LW1:;
  end;
  GetInvoicePDFAttachNr = asernr;
  return;
end;

updating procedure GetInvoicePDF(LongInt id,integer nopdfoutput)
begin
  record IVVc IVr;
  record Attach2Vc Attachr;
  string 255 fname;
  area a,abase64;
  longint asernr;
  
  asernr = GetInvoicePDFAttachNr(id);
  if ((asernr==-1) and (nopdfoutput==0)) then begin
    CreateInvoicePdfFile(IVr);
  end;
  asernr = GetInvoicePDFAttachNr(id);
  if (asernr!=-1) then begin
    Attachr.SerNr = asernr;
    if (ReadFirstMain(Attachr,1,true)) then begin
      fname = Attachr.FileName;
      if (nopdfoutput==0) then begin
        AddAttachFileToArea(Attachr,abase64,false);      
        BitSafeBase64EncodeAnArea(abase64);
      end;
    end;
  end;
  AddPlainXmlToArea(a,"<GetDocument>",0);
  AddXMLTagToArea(a,"InvoiceNr","",id,1);
  AddPlainXmlToArea(a,"<Result>",1);
  AddXMLTagToArea(a,"FileName","",ConvertXMLString(fname,true),2);
  //AddXMLTagToArea(a,"FileSize","",,2);
  if (nopdfoutput==0) then begin
    AddPlainXmlToArea(a,"<File64>",2);
    AddAreaAfterArea(a,abase64);
    AddPlainXmlToArea(a,"</File64>",2);
  end;
  AddPlainXmlToArea(a,"</Result>",1);
  AddPlainXmlToArea(a,"</GetDocument>",0);
  WebOutArea2(a);
  
  return;
end;

updating procedure GetDocument()
begin
  string 255 arg,type,arg2;
  LongInt id;
  integer i1;
  
  WebSetContentType("text/xml"); 
  OutXmlHeader("GetDocument");
  type = WebGetArg("doctype");
  switch (type) begin
    case "schedule":
      arg = WebGetArg("CredManNr");
      id = StringToLongint(arg);
      arg2 = WebGetArg("nopdfoutput");
      i1 = StringToInt(arg2);
      GetSchedulePDF(id,i1);
    case "invoice":
      arg = WebGetArg("InvoiceNr");
      id = StringToLongint(arg);
      arg2 = WebGetArg("nopdfoutput");
      i1 = StringToInt(arg2);
      GetInvoicePDF(id,i1);
  end;
  WebOutString("</data>");
  return;
end;

procedure GetVIVcDisburseList(LongInt visernr, var array date aPayDate, var array val aPayVal, var integer acnt, var val totpaid)
begin
//origin: VIInfoRn
  record VIVc theVIr;
  record OPrsVc OPrsr;
  record OPVc OPr;
  row OPVc OPrw;
  record VIVc VIr;
  row VIVc VIrw;  
  record PurgeTRVc PurgeTRr;  
  record TRVc TRr;  
  row TRVc TRrw;  
  record CLOutVc CLOutr;  
  row CLOutVc CLOutrw;  
  record CLInVc CLInr;  
  row CLInVc CLInrw;  
  boolean found, detfound,testf;
  val bal,ppval;
  val trval,trval2,trcurval;
  integer i,rwcnt;
  string 255 t2;
  Integer typeofcur,oldstyle;
  
  totpaid = blankval;
  theVIr.SerNr = visernr;
  if (ReadFirstMain(theVIr,1,true)==false) then begin goto LGetVIVcDisburseList; end;
  OPrsr.VINr = visernr;
  found = true;
  while (LoopKey("VIKey",OPrsr,1,found)) begin
    if (OPrsr.VINr<>visernr) then begin found = false; end;
    if (found) then begin
      detfound = false;
      /* is it needed?
      if (OPrsr.TransType==0) then begin
        VIr.SerNr = OPrsr.TransNr;
        if (ReadFirstMain(VIr,1,true)) then begin
          if (VIr.Invalid==0) then begin
            aPayDate[acnt] = VIr.InvDate;
            detfound = true;
            if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
              VIr.PayVal = -VIr.PayVal;
            end;  
            switch (VIr.InvType) begin
              case kInvoiceTypeEmployee:
                goto LkInvoiceTypeCash;
              case kInvoiceTypeCashInvoiceReceiptPRT:
                goto LkInvoiceTypeCash;
              case kInvoiceTypeCash:
LkInvoiceTypeCash:;              
              case kInvoiceTypeCreditSpecialSales: 
                goto LkInvoiceTypeCredit;
              case kInvoiceTypeCredit:
LkInvoiceTypeCredit:;
                switch (theVIr.InvType) begin
                  case kInvoiceTypeCash:
                  case kInvoiceTypeEmployee:
                  otherwise
                    bal = bal + VIr.PayVal;
                    GetPrePayments(VIr,ppval);
          //          OutVal(480,0,bal,M4Val,true);
                end;
              otherwise
                bal = bal + VIr.PayVal;
                GetPrePayments(VIr,ppval);
            end;
            if (ppval<>0) then begin
              bal = bal + ppval;
            end;
            if (VIr.WithHoldingTax<>0) then begin
              if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
                VIr.WithHoldingTax = -VIr.WithHoldingTax;
              end;  
              bal = bal - VIr.WithHoldingTax;
            end;  
          end;
        end;
      end;
      */
      if (OPrsr.TransType==1) then begin/* payment */
        OPr.SerNr = OPrsr.TransNr;
        if (ReadFirstMain(OPr,1,true)) then begin            
          if ((OPr.OrderedFlag!=0) and (OPr.RejectedFlag==0)) then begin
            rwcnt = MatRowCnt(OPr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(OPr,i,OPrw);
              if (OPrw.ovst==0) then begin
                if ((OPrw.VISerNr==visernr) and
                    (OPr.TransDate==OPrsr.TransDate)) then begin
                  if (OPrw.stp!=7) then begin
                    if (OPr.Invalid==0) then begin
                      aPayDate[acnt] = OPr.TransDate;
                      aPayVal[acnt] = OPrw.PInvVal;
                      detfound = true;
                    end;
                  end;  
                end;
              end;
            end;
          end;
        end;
      end;
      if (OPrsr.TransType==kOPrsTransTypePurgeNLTransaction) then begin/*NL payment */
          PurgeTRr.Number = OPrsr.TransNr;
          PurgeTRr.IntYc = GetIntYc(OPrsr.TransDate);
          PurgeTRr.TransRow = OPrsr.TransRow;
          if (ReadFirstMain(PurgeTRr,3,true)) then begin
              if (PurgeTRr.Typ==2) then begin
                if (theVIr.InvType==3) then begin
                  trval = PurgeTRr.DebVal - PurgeTRr.CredVal;
                  trval2 = PurgeTRr.DebVal2 - PurgeTRr.CredVal2;
                  trcurval = PurgeTRr.CurDebVal - PurgeTRr.CurCredVal;
                end else begin
                  trval = PurgeTRr.DebVal - PurgeTRr.CredVal;
                  trval2 = PurgeTRr.DebVal2 - PurgeTRr.CredVal2;
                  trcurval = PurgeTRr.CurDebVal - PurgeTRr.CurCredVal;
                end;
                if (trval<>0) then begin
                  if ((PurgeTRr.SerNr==theVIr.SerNr) and
                      (PurgeTRr.TransDate==OPrsr.TransDate)) then begin
                    PurgeTRExtYc(PurgeTRr,t2);
                    aPayDate[acnt] = PurgeTRr.TransDate;
                    detfound = true;
                    if (nonblank(trcurval)) then begin
                      //trcurval = -trcurval;
                      aPayVal[acnt] = trcurval;
                      //aCurncy[acnt] = PurgeTRr.Curncy;
                    end else begin
                      typeofcur = TypeOfCurncy(PurgeTRr.Curncy,oldstyle);   
                      if (typeofcur==2) then begin
                        //trval2 = -trval2;
                        aPayVal[acnt] = trval2;
                        //aCurncy[acnt] = PurgeTRr.Curncy;
                      end else begin
                        //trval = -trval;
                        aPayVal[acnt] = trval2;
                        //aCurncy[acnt] = PurgeTRr.Curncy;
                      end;
                    end;  
                  end;
                end;
              end;
          end;
       end;
      if (OPrsr.TransType==kOPrsTransTypeNLTransaction) then begin/*NL payment */
        TRr.Number = OPrsr.TransNr;
        TRr.IntYc = GetIntYc(OPrsr.TransDate);
        if (ReadFirstMain(TRr,2,true)) then begin
          rwcnt = MatRowCnt(TRr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(TRr,i,TRrw);
            if (TRrw.Typ==2) then begin
              if (theVIr.InvType==kInvoiceTypeCredit or theVIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
                trval = TRrw.DebVal - TRrw.CredVal;
                trval2 = TRrw.DebVal2 - TRrw.CredVal2;
                trcurval = TRrw.CurDebVal - TRrw.CurCredVal;
              end else begin
                trval = TRrw.DebVal - TRrw.CredVal;
                trval2 = TRrw.DebVal2 - TRrw.CredVal2;
                trcurval = TRrw.CurDebVal - TRrw.CurCredVal;
              end;
              if (trval<>0) then begin
                if ((TRrw.SerNr==visernr) and
                    (TRr.TransDate==OPrsr.TransDate)) then begin
                  aPayDate[acnt] = TRr.TransDate;
                  detfound = true;
                  if (nonblank(trcurval)) then begin
                    //trcurval = -trcurval;
                    aPayVal[acnt] = trcurval;
                  end else begin
                    typeofcur = TypeOfCurncy(TRrw.Curncy,oldstyle);   
                    if (typeofcur==2) then begin
                      //trval2 = -trval2;
                      aPayVal[acnt] = trval2;
                    end else begin
                      //trval = -trval;
                       aPayVal[acnt] = trval;
                    end;
                  end;  
                end;
              end;
            end;
          end;
        end;
      end;
      if (OPrsr.TransType==3) then begin /*cash out*/              
        CLOutr.SerNr = OPrsr.TransNr;
        if (ReadFirstMain(CLOutr,1,true)) then begin            
          if (CLOutr.Invalid==0) then begin
            rwcnt = MatRowCnt(CLOutr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(CLOutr,i,CLOutrw);
              if (CLOutrw.Type==2) then begin
                testf = false;
                if (CLOutrw.Sum<>0) then begin
                  if ((CLOutrw.TransNr==visernr) and
                      (CLOutr.TransDate==OPrsr.TransDate)) then begin
                    if (testf) then begin
                      //temp = -CLOutrw.Sum;
                      aPayVal[acnt] = CLOutrw.Sum;
                      aPayDate[acnt] = CLOutr.TransDate;
                      detfound = true;
                    end;    
                  end;
                end;                
              end;
            end;
          end;
        end;
      end;      
      if (OPrsr.TransType==4) then begin/*cash in*/              
        CLInr.SerNr = OPrsr.TransNr;
        if (ReadFirstMain(CLInr,1,true)) then begin            
          if (CLInr.Invalid==0) then begin
          rwcnt = MatRowCnt(CLInr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(CLInr,i,CLInrw);
            if (CLInrw.Type==2) then begin
              testf = false;
              if (CLInrw.Sum<>0) then begin
                if ((CLInrw.TransNr==visernr) and
                    (CLInr.TransDate==OPrsr.TransDate)) then begin
                end;
              end;                
              if (testf) then begin
                aPayDate[acnt] = CLInr.TransDate;
                aPayVal[acnt] = -CLInrw.Sum;
                detfound = true;
              end;  
            end;
          end;
        end;
      end;            
    end;
    if (detfound) then begin
      totpaid = totpaid + aPayVal[acnt];
      acnt = acnt + 1;
    end;
    end;
  end;
  LGetVIVcDisburseList:;
  return;
end;

procedure GetDisburseDetails()
begin
  record CredManVc CMr;
  record VIVc VIr;
  record OPVc OPr;
  record OPrsVc OPrsr;
  string 255 arg,curncy;
  LongInt id;
  boolean TrHs;
  val totavail, totpaid1,totpaid,totsum;
  array date aPayDate;
  array val aPayVal;
  integer i,acnt;
  area a;
  
  arg = WebGetArg("CredManNr");
  id = StringToLongInt(arg);
  WebSetContentType("text/xml"); 
  OutXmlHeader("GetDisburseDetails");
  AddPlainXmlToArea(a,"<GetDisburseDetails>",0);
  AddXMLTagToArea(a,"CredManNr","",arg,1);
  AddPlainXmlToArea(a,"<Result>",1);
  if (id!=-1) then begin
    CMr.SerNr = id;
    if (ReadFirstMain(CMr,1,true)) then begin
      curncy = CMr.CurncyCode;
      totsum = CMr.InvSum4 - CMr.DepositSum - CMr.ExtraDepositSum;
    end;
    VIr.CustCredManNr = id;
    TrHs = true;
    acnt = 0;
    While (LoopKey("CustCredManNr",VIr,1,TrHs)) begin
      if (VIr.CustCredManNr!=id) then begin
        TrHs = false;
      end;
      if (TrHs) then begin
        totavail = totavail + VIr.PayVal;
        GetVIVcDisburseList(VIr.SerNr,aPayDate,aPayVal,acnt,totpaid1);
      end;
    end;
  end;
  AddPlainXmlToArea(a,"<Disbursements>",2);
  for (i=0;i<acnt;i=i+1) begin
    AddPlainXmlToArea(a,"<Disbursement>",3);
    AddXMLTagToArea(a,"PayDate","",DateToString(aPayDate[i],"YYYY-MM-DD"),4);
    AddXMLTagToArea(a,"PayVal","",ValToString(aPayVal[i],M4Val,"",".",0),4);
    totpaid = totpaid + aPayVal[i];
    AddPlainXmlToArea(a,"</Disbursement>",3);
  end;  
  AddPlainXmlToArea(a,"</Disbursements>",2);
  AddXMLTagToArea(a,"TotAvailableDisbursements","",ValToString(totsum-totpaid,M4Val,"",".",0),2);
  AddXMLTagToArea(a,"TotDisbursed","",ValToString(totpaid,M4Val,"",".",0),2);
  AddXMLTagToArea(a,"CurncyCode","",curncy,2);
  AddPlainXmlToArea(a,"</Result>",1);
  AddPlainXmlToArea(a,"</GetDisburseDetails>",0);
  WebOutArea2(a);
  WebOutString("</data>");
  return;
end;

procedure GetCustomerInvoiceDetails()
begin
  record CredHistVc CredHistr,CredHist2r;
  record CredManVc CMr;
  record IVVc IVr;
  record OPVc OPr;
  record OPrsVc OPrsr;
  string 255 custcode,credmanstr,tstr,invoicenrstr,curncy,item;
  LongInt CredManNr,invoicenr;
  boolean TrHs,testf,TrHs2,skipf;
  val totavail, totpaid1,totpaid,totsum,t;
  array string 255 aCredManNr;
  integer i,acnt,pos;
  area a;
  date dfrom,dto,blankd;
  LongInt countout,curr,c2,rowoffset,rowlimit;
  integer keys,paidflag;
  string 255 offinvnr;
  
  custcode = WebGetArg("CustCode");
  credmanstr = WebGetArg("CredManNr");
  SplitString(credmanstr,",",aCredManNr);
  dfrom = DateFromString(WebGetArg("datefrom"),"YYYY-MM-DD");
  dto = DateFromString(WebGetArg("dateto"),"YYYY-MM-DD");
  item = WebGetArg("artcode");
  invoicenrstr = WebGetArg("invoicenr");
  invoicenr = StringToLongint(invoicenrstr);
  offinvnr = WebGetArg("officialinvoicenr");
  tstr=WebGetArg("rowoffset");
  countout = 0;
  curr = 0;
  rowoffset = StringToLongInt(tstr);
  if (rowoffset==-1) then begin
    rowoffset = 0;
  end;
  tstr=WebGetArg("rowlimit");
  rowlimit = StringToLongInt(tstr);
  if (rowlimit==-1) then begin
    rowlimit = 0;
  end;
  WebSetContentType("text/xml"); 
  OutXmlHeader("GetCustomerInvoiceDetails");
  AddPlainXmlToArea(a,"<GetCustomerInvoiceDetails>",0);
  AddXMLTagToArea(a,"CustCode","",custcode,1);
  AddPlainXmlToArea(a,"<Result>",1);
  if (nonblank(custcode)) then begin
    CredHistr.CustCode = custcode;
    TrHs = true;
    keys = 1;
    if (nonblankdate(dfrom)) then begin
      keys = 2;
      CredHistr.TransDate = dfrom;
    end;
    while (LoopKey("CustTransDate",CredHistr,keys,TrHs)) begin
      testf = true;
      if (CredHistr.CustCode!=custcode) then begin
        TrHs = false;
      end;
      if (TrHs) then begin
        if (nonblank(credmanstr)) then begin
          testf = SetInSet(CredHistr.CredManNr,credmanstr);
        end;
        if ((testf) and (nonblankdate(dfrom))) then begin
          testf = CredHistr.TransDate>=dfrom;
        end;
        if ((testf) and (nonblankdate(dto))) then begin
          testf = CredHistr.TransDate<=dto;
        end;
        if ((testf) and (nonblank(item))) then begin
          testf = SetInSet(CredHistr.ArtCode,item);
        end;
        if ((testf) and (CredHistr.RecordType!=0)) then begin
            testf = false;
        end;
        if ((testf) and (invoicenr!=-1)) then begin
          testf = CredHistr.RecordNr==invoicenr;
        end;
        if (testf) then begin
          if (nonblank(offinvnr)) then begin
            IVr.OfficialSerNr = offinvnr;
            if (ReadFirstKey("OfficialSerNr",IVr,1,true)) then begin
              testf = CredHistr.RecordNr==IVr.SerNr;
            end else begin
              testf = false;
            end;
          end;
        end;
        if (testf) then begin
          skipf = false;
          if ((rowoffset>0) and (curr<rowoffset)) then begin
            skipf = true;
          end;
          if ((rowlimit>0) and (countout>=rowlimit)) then begin
            skipf = true;
          end;
          curr = curr + 1;
          if (!skipf) then begin
            countout = countout + 1;
            if (CredHistr.RecordType==0) then begin
              AddPlainXmlToArea(a,"<Invoice>",3);
              AddXMLTagToArea(a,"InvoiceNr","",CredHistr.RecordNr,4); 
              AddXMLTagToArea(a,"CredManNr","",CredHistr.CredManNr,4);
              AddXMLTagToArea(a,"InvDate","",DateToString(CredHistr.TransDate,"YYYY-MM-DD"),4);
              AddXMLTagToArea(a,"DueDate","",DateToString(CredHistr.PayDate,"YYYY-MM-DD"),4);
              AddXMLTagToArea(a,"ArtCode","",ConvertXMLString(CredHistr.ArtCode,true),4);
              IVr.SerNr = CredHistr.RecordNr;
              tstr = "";
              if (ReadFirstMain(IVr,1,true)) then begin
                tstr = ConvertXMLString(IVr.OfficialSerNr,true);
                curncy = IVr.CurncyCode;
              end;
              AddXMLTagToArea(a,"OfficialSerNr","",tstr,4);
              AddXMLTagToArea(a,"Sum","",ValToString(CredHistr.Sum,M4Val,"",".",0),4);
              t = GetCredHistOpenValueOnDate(CredHistr.SerNr,blankd);
              paidflag = 0;
              if (t==0.0) then begin
                paidflag = 1;
              end;
              AddXMLTagToArea(a,"PaidSum","",ValToString(CredHistr.Sum-t,M4Val,"",".",0),4);  
              AddXMLTagToArea(a,"InvSum","",ValToString(CredHistr.InvSum,M4Val,"",".",0),4);
              AddXMLTagToArea(a,"Balance","",ValToString(CredHistr.Balance,M4Val,"",".",0),4);
              AddXMLTagToArea(a,"OpenAmount","",ValToString(t,M4Val,"",".",0),4);
              //AddXMLTagToArea(a,"PaymentStatus","",0,4);
              AddXMLTagToArea(a,"PaidFlag","",paidflag,4);
              AddXMLTagToArea(a,"CurncyCode","",curncy,4);
              AddPlainXmlToArea(a,"<Payments>",4);
              
              ResetLoop(CredHist2r);
              CredHist2r.PreviousNr = CredHistr.SerNr;
              TrHs2 = true;
              While (LoopKey("PreviousNr",CredHist2r,1,TrHs2)) begin
                if (CredHist2r.PreviousNr!=CredHistr.SerNr) then begin
                  TrHs2 = false;
                end;
                if ((TrHs2) and (CredHist2r.RecordType==1)) then begin
                  AddPlainXmlToArea(a,"<Payment>",5);  
                  AddXMLTagToArea(a,"PaymentNr","",CredHist2r.RecordNr,6);
                  //TODO: CurncyCode
                  AddXMLTagToArea(a,"PayDate","",DateToString(CredHist2r.PayDate,"YYYY-MM-DD"),6);
                  AddXMLTagToArea(a,"Sum","",ValToString(CredHist2r.Sum,M4Val,"",".",0),6);
                  AddXMLTagToArea(a,"CredManNr","",CredHist2r.CredManNr,6);
                  //AddXMLTagToArea(a,"CredFromDate","",DateToString(CredHist2r.CredFromDate,"YYYY-MM-DD"),6);
                  //AddXMLTagToArea(a,"CredToDate","",DateToString(CredHist2r.CredToDate,"YYYY-MM-DD"),6);
                  AddPlainXmlToArea(a,"</Payment>",5);
                end;
              end;
              AddPlainXmlToArea(a,"</Payments>",4);
              AddPlainXmlToArea(a,"<Prepayments>",4);
              ResetLoop(CredHist2r);
              CredHist2r.PreviousNr = CredHistr.SerNr;
              TrHs2 = true;
              While (LoopKey("PreviousNr",CredHist2r,1,TrHs2)) begin
                if (CredHist2r.PreviousNr!=CredHistr.SerNr) then begin
                  TrHs2 = false;
                end;
                if ((TrHs2) and (CredHist2r.RecordType==2)) then begin
                  AddPlainXmlToArea(a,"<Prepayment>",5);  
                  AddXMLTagToArea(a,"PrepaymentNr","",CredHist2r.RecordNr,6);
                  //TODO: CurncyCode
                  AddXMLTagToArea(a,"PayDate","",DateToString(CredHist2r.PayDate,"YYYY-MM-DD"),6);
                  AddXMLTagToArea(a,"Sum","",ValToString(CredHist2r.Sum,M4Val,"",".",0),6);
                  AddXMLTagToArea(a,"CredManNr","",CredHist2r.CredManNr,6);
                  //AddXMLTagToArea(a,"CredFromDate","",DateToString(CredHist2r.CredFromDate,"YYYY-MM-DD"),6);
                  //AddXMLTagToArea(a,"CredToDate","",DateToString(CredHist2r.CredToDate,"YYYY-MM-DD"),6);
                  AddPlainXmlToArea(a,"</Prepayment>",5);
                end;
              end;
              AddPlainXmlToArea(a,"</Prepayments>",4);
              
              AddPlainXmlToArea(a,"<CreditNotes>",4);
              ResetLoop(CredHist2r);
              CredHist2r.PreviousNr = CredHistr.SerNr;
              TrHs2 = true;
              While (LoopKey("PreviousNr",CredHist2r,1,TrHs2)) begin
                if (CredHist2r.PreviousNr!=CredHistr.SerNr) then begin
                  TrHs2 = false;
                end;
                if ((TrHs2) and (CredHist2r.RecordType==3)) then begin
                  AddPlainXmlToArea(a,"<CreditNote>",3);
                  AddXMLTagToArea(a,"InvoiceNr","",CredHist2r.RecordNr,4); 
                  AddXMLTagToArea(a,"CredManNr","",CredHist2r.CredManNr,4);
                  AddXMLTagToArea(a,"InvDate","",DateToString(CredHist2r.TransDate,"YYYY-MM-DD"),4);
                  AddXMLTagToArea(a,"ArtCode","",ConvertXMLString(CredHist2r.ArtCode,true),4);
                  IVr.SerNr = CredHist2r.RecordNr;
                  tstr = "";
                  if (ReadFirstMain(IVr,1,true)) then begin
                    tstr = ConvertXMLString(IVr.OfficialSerNr,true);
                    curncy = IVr.CurncyCode;
                  end;
                  
                  AddXMLTagToArea(a,"OfficialSerNr","",tstr,4);
                  AddXMLTagToArea(a,"Sum","",ValToString(-CredHist2r.Sum,M4Val,"",".",0),4);
                  AddXMLTagToArea(a,"PaidSum","",ValToString(-CredHist2r.PaidSum,M4Val,"",".",0),4);
                  AddXMLTagToArea(a,"InvSum","",ValToString(-CredHist2r.InvSum,M4Val,"",".",0),4);
                  AddXMLTagToArea(a,"Balance","",ValToString(CredHist2r.Balance,M4Val,"",".",0),4);
                  //AddXMLTagToArea(a,"ItemPaidAmount","",ValToString(0,M4Val,"",".",0),4); TODO?
                  t = -CredHist2r.InvSum+CredHist2r.PaidSum;
                  AddXMLTagToArea(a,"OpenAmount","",ValToString(t,M4Val,"",".",0),4);
                  //AddXMLTagToArea(a,"PaymentStatus","",0,4);
                  AddXMLTagToArea(a,"PaidFlag","",CredHist2r.PaidFlag,4);
                  AddXMLTagToArea(a,"CurncyCode","",curncy,4);
                  AddPlainXmlToArea(a,"</CreditNote>",3);
                end;
              end;
              AddPlainXmlToArea(a,"</CreditNotes>",4);
              //TODO:sorting
              AddPlainXmlToArea(a,"</Invoice>",3);
            end;
          end;//!skip
        end;
      end;
    end;
  end;
  AddXMLTagToArea(a,"RowCount","",curr,3);
  c2 = rowoffset+countout;
  if (c2>=curr) then begin
    AddXMLTagToArea(a,"EndOfRows","","",3);
  end;
  AddPlainXmlToArea(a,"</Result>",1);
  AddPlainXmlToArea(a,"</GetCustomerInvoiceDetails>",0);
  WebOutArea2(a);
  WebOutString("</data>");
  return;
end;

global
updating procedure WebFinAPI()
begin
  string 255 tstr,rep;
  string 20 compcode;
  Integer newcomp,oldcomp;
  boolean compset;
  area a;
  
  compset=false;
  newcomp = StringToInt(WebGetArg("company"));
  rep = WebGetArg("register");
  if (newcomp<=0) then begin 
    WebSetContentType("text/xml");
    WebOutString("<error>Wrong company specified</error>")    
    goto LWebFinAPI;
  end;
  oldcomp = CurrentCompany;
  if (newcomp!=oldcomp) then begin
    if (SetCompany(newcomp,false)) then begin
      compset=true;  
    end;
  end;
  switch (rep) begin
    case "CredManSchedVc":
      GenCredManSchedVcXml;
    case "GetTotalOverDue":
      GetTotalOverDue;
    case "GetRepaidPrincipal":
      GetRepaidPrincipal;
    case "GetDocument":
      GetDocument;
    case "GetDisburseDetails":
      GetDisburseDetails;
    case "GetCustomerInvoiceDetails": 
//14:47
      GetCustomerInvoiceDetails;   
  end;
  if (compset) then begin
    ResetCompany(oldcomp);
  end;
  LWebFinAPI:;
  return;
end;
